{"ast":null,"code":"import _regeneratorRuntime from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport getLocale from \"../locale/getLocale.js\";\nimport { fetchJsonOnce } from \"../util/FetchHelper.js\";\nimport normalizeLocale from \"../locale/normalizeLocale.js\";\nimport nextFallbackLocale from \"../locale/nextFallbackLocale.js\";\nimport { DEFAULT_LANGUAGE } from \"../generated/AssetParameters.js\";\nvar bundleData = new Map();\nvar bundleURLs = new Map();\n/**\n * Sets a map with texts and ID the are related to.\n * @param {string} packageName package ID that the i18n bundle will be related to\n * @param {Object} data an object with string locales as keys and text translataions as values\n * @public\n */\n\nvar setI18nBundleData = function setI18nBundleData(packageName, data) {\n  bundleData.set(packageName, data);\n};\n\nvar getI18nBundleData = function getI18nBundleData(packageName) {\n  return bundleData.get(packageName);\n};\n/**\n * Registers a map of locale/url information, to be used by the <code>fetchI18nBundle</code> method.\n * @param {string} packageName package ID that the i18n bundle will be related to\n * @param {Object} bundle an object with string locales as keys and the URLs of where the corresponding locale can be fetched from, f.e {\"en\": \"path/en.json\", ...}\n * @public\n */\n\n\nvar registerI18nBundle = function registerI18nBundle(packageName, bundle) {\n  bundleURLs.set(packageName, bundle);\n};\n/**\n * This method preforms the asynchronous task of fetching the actual text resources. It will fetch\n * each text resource over the network once (even for multiple calls to the same method).\n * It should be fully finished before the i18nBundle class is created in the webcomponents.\n * This method uses the bundle URLs that are populated by the <code>registerI18nBundle</code> method.\n * To simplify the usage, the synchronization of both methods happens internally for the same <code>bundleId</code>\n * @param {packageName} packageName the NPM package name\n * @public\n */\n\n\nvar fetchI18nBundle = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(packageName) {\n    var bundlesForPackage, language, localeId, bundleURL, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            bundlesForPackage = bundleURLs.get(packageName);\n\n            if (bundlesForPackage) {\n              _context.next = 4;\n              break;\n            }\n\n            console.warn(\"Message bundle assets are not configured. Falling back to English texts.\",\n            /* eslint-disable-line */\n            \" You need to import \".concat(packageName, \"/dist/Assets.js with a build tool that supports JSON imports.\"));\n            /* eslint-disable-line */\n\n            return _context.abrupt(\"return\");\n\n          case 4:\n            language = getLocale().getLanguage();\n            localeId = normalizeLocale(language);\n\n            while (!bundlesForPackage[localeId]) {\n              localeId = nextFallbackLocale(localeId);\n            }\n\n            if (!(localeId === DEFAULT_LANGUAGE)) {\n              _context.next = 9;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 9:\n            bundleURL = bundlesForPackage[localeId];\n\n            if (!(typeof bundleURL === \"object\")) {\n              _context.next = 13;\n              break;\n            }\n\n            // inlined from build\n            setI18nBundleData(packageName, bundleURL);\n            return _context.abrupt(\"return\");\n\n          case 13:\n            _context.next = 15;\n            return fetchJsonOnce(bundleURL);\n\n          case 15:\n            data = _context.sent;\n            setI18nBundleData(packageName, data);\n\n          case 17:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchI18nBundle(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport { fetchI18nBundle, registerI18nBundle, setI18nBundleData, getI18nBundleData };","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/@ui5/webcomponents-base/dist/asset-registries/i18n.js"],"names":["getLocale","fetchJsonOnce","normalizeLocale","nextFallbackLocale","DEFAULT_LANGUAGE","bundleData","Map","bundleURLs","setI18nBundleData","packageName","data","set","getI18nBundleData","get","registerI18nBundle","bundle","fetchI18nBundle","bundlesForPackage","console","warn","language","getLanguage","localeId","bundleURL"],"mappings":";;AAAA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AAEA,IAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AACA,IAAMC,UAAU,GAAG,IAAID,GAAJ,EAAnB;AAEA;;;;;;;AAMA,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,WAAD,EAAcC,IAAd,EAAuB;AAChDL,EAAAA,UAAU,CAACM,GAAX,CAAeF,WAAf,EAA4BC,IAA5B;AACA,CAFD;;AAIA,IAAME,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAH,WAAW,EAAI;AACxC,SAAOJ,UAAU,CAACQ,GAAX,CAAeJ,WAAf,CAAP;AACA,CAFD;AAIA;;;;;;;;AAMA,IAAMK,kBAAkB,GAAG,SAArBA,kBAAqB,CAACL,WAAD,EAAcM,MAAd,EAAyB;AACnDR,EAAAA,UAAU,CAACI,GAAX,CAAeF,WAAf,EAA4BM,MAA5B;AACA,CAFD;AAIA;;;;;;;;;;;AASA,IAAMC,eAAe;AAAA,sEAAG,iBAAMP,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBQ,YAAAA,iBADiB,GACGV,UAAU,CAACM,GAAX,CAAeJ,WAAf,CADH;;AAAA,gBAGlBQ,iBAHkB;AAAA;AAAA;AAAA;;AAItBC,YAAAA,OAAO,CAACC,IAAR;AAAyF;AAAzF,0CACuBV,WADvB;AACoG;;AAL9E;;AAAA;AASjBW,YAAAA,QATiB,GASNpB,SAAS,GAAGqB,WAAZ,EATM;AAWnBC,YAAAA,QAXmB,GAWRpB,eAAe,CAACkB,QAAD,CAXP;;AAYvB,mBAAO,CAACH,iBAAiB,CAACK,QAAD,CAAzB,EAAqC;AACpCA,cAAAA,QAAQ,GAAGnB,kBAAkB,CAACmB,QAAD,CAA7B;AACA;;AAdsB,kBAgBnBA,QAAQ,KAAKlB,gBAhBM;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAoBjBmB,YAAAA,SApBiB,GAoBLN,iBAAiB,CAACK,QAAD,CApBZ;;AAAA,kBAsBnB,OAAOC,SAAP,KAAqB,QAtBF;AAAA;AAAA;AAAA;;AAsBc;AACpCf,YAAAA,iBAAiB,CAACC,WAAD,EAAcc,SAAd,CAAjB;AAvBsB;;AAAA;AAAA;AAAA,mBA2BJtB,aAAa,CAACsB,SAAD,CA3BT;;AAAA;AA2BjBb,YAAAA,IA3BiB;AA4BvBF,YAAAA,iBAAiB,CAACC,WAAD,EAAcC,IAAd,CAAjB;;AA5BuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfM,eAAe;AAAA;AAAA;AAAA,GAArB;;AA+BA,SACCA,eADD,EAECF,kBAFD,EAGCN,iBAHD,EAICI,iBAJD","sourcesContent":["import getLocale from \"../locale/getLocale.js\";\nimport { fetchJsonOnce } from \"../util/FetchHelper.js\";\nimport normalizeLocale from \"../locale/normalizeLocale.js\";\nimport nextFallbackLocale from \"../locale/nextFallbackLocale.js\";\nimport { DEFAULT_LANGUAGE } from \"../generated/AssetParameters.js\";\n\nconst bundleData = new Map();\nconst bundleURLs = new Map();\n\n/**\n * Sets a map with texts and ID the are related to.\n * @param {string} packageName package ID that the i18n bundle will be related to\n * @param {Object} data an object with string locales as keys and text translataions as values\n * @public\n */\nconst setI18nBundleData = (packageName, data) => {\n\tbundleData.set(packageName, data);\n};\n\nconst getI18nBundleData = packageName => {\n\treturn bundleData.get(packageName);\n};\n\n/**\n * Registers a map of locale/url information, to be used by the <code>fetchI18nBundle</code> method.\n * @param {string} packageName package ID that the i18n bundle will be related to\n * @param {Object} bundle an object with string locales as keys and the URLs of where the corresponding locale can be fetched from, f.e {\"en\": \"path/en.json\", ...}\n * @public\n */\nconst registerI18nBundle = (packageName, bundle) => {\n\tbundleURLs.set(packageName, bundle);\n};\n\n/**\n * This method preforms the asynchronous task of fetching the actual text resources. It will fetch\n * each text resource over the network once (even for multiple calls to the same method).\n * It should be fully finished before the i18nBundle class is created in the webcomponents.\n * This method uses the bundle URLs that are populated by the <code>registerI18nBundle</code> method.\n * To simplify the usage, the synchronization of both methods happens internally for the same <code>bundleId</code>\n * @param {packageName} packageName the NPM package name\n * @public\n */\nconst fetchI18nBundle = async packageName => {\n\tconst bundlesForPackage = bundleURLs.get(packageName);\n\n\tif (!bundlesForPackage) {\n\t\tconsole.warn(`Message bundle assets are not configured. Falling back to English texts.`, /* eslint-disable-line */\n\t\t` You need to import ${packageName}/dist/Assets.js with a build tool that supports JSON imports.`); /* eslint-disable-line */\n\t\treturn;\n\t}\n\n\tconst language = getLocale().getLanguage();\n\n\tlet localeId = normalizeLocale(language);\n\twhile (!bundlesForPackage[localeId]) {\n\t\tlocaleId = nextFallbackLocale(localeId);\n\t}\n\n\tif (localeId === DEFAULT_LANGUAGE) {\n\t\treturn;\n\t}\n\n\tconst bundleURL = bundlesForPackage[localeId];\n\n\tif (typeof bundleURL === \"object\") { // inlined from build\n\t\tsetI18nBundleData(packageName, bundleURL);\n\t\treturn;\n\t}\n\n\tconst data = await fetchJsonOnce(bundleURL);\n\tsetI18nBundleData(packageName, data);\n};\n\nexport {\n\tfetchI18nBundle,\n\tregisterI18nBundle,\n\tsetI18nBundleData,\n\tgetI18nBundleData,\n};\n"]},"metadata":{},"sourceType":"module"}