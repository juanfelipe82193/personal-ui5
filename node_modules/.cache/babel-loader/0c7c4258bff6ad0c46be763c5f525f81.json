{"ast":null,"code":"import _toConsumableArray from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _get from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport ResizeHandler from \"@ui5/webcomponents-base/dist/delegate/ResizeHandler.js\";\nimport getLocale from \"@ui5/webcomponents-base/dist/locale/getLocale.js\";\nimport LocaleData from \"@ui5/webcomponents-localization/dist/LocaleData.js\";\nimport CalendarDate from \"@ui5/webcomponents-localization/dist/dates/CalendarDate.js\";\nimport \"@ui5/webcomponents-icons/dist/icons/date-time.js\";\nimport Button from \"./Button.js\";\nimport ToggleButton from \"./ToggleButton.js\";\nimport SegmentedButton from \"./SegmentedButton.js\";\nimport Calendar from \"./Calendar.js\";\nimport DatePicker from \"./DatePicker.js\";\nimport WheelSlider from \"./WheelSlider.js\"; // time functions\n\nimport { getHours, getMinutes, getSeconds, getHoursConfigByFormat, getTimeControlsByFormat } from \"./timepicker-utils/TimeSlider.js\"; // i18n texts\n\nimport { TIMEPICKER_HOURS_LABEL, TIMEPICKER_MINUTES_LABEL, TIMEPICKER_SECONDS_LABEL, TIMEPICKER_PERIODS_LABEL, TIMEPICKER_SUBMIT_BUTTON, TIMEPICKER_CANCEL_BUTTON, DATETIME_PICKER_DATE_BUTTON, DATETIME_PICKER_TIME_BUTTON } from \"./generated/i18n/i18n-defaults.js\"; // Template\n\nimport DateTimePickerPopoverTemplate from \"./generated/templates/DateTimePickerPopoverTemplate.lit.js\"; // Styles\n\nimport DateTimePickerPopoverCss from \"./generated/themes/DateTimePickerPopover.css.js\";\nvar PHONE_MODE_BREAKPOINT = 640; // px\n\n/**\n * @public\n */\n\nvar metadata = {\n  tag: \"ui5-datetime-picker\",\n  properties:\n  /** @lends sap.ui.webcomponents.main.DateTimePicker.prototype */\n  {\n    /**\n     * Defines the visibility of the time view in <code>phoneMode</code>.\n     * For more information, see the <code>phoneMode</code> property.\n     *\n     * <br><br>\n     * <b>Note:</b> The date view would be displayed by default.\n     * @type {boolean}\n     * @defaultvalue false\n     * @private\n     */\n    _showTimeView: {\n      type: Boolean,\n      noAttribute: true\n    },\n\n    /**\n     * Defines if the <code>DateTimePicker</code> should be displayed in phone mode.\n     * The phone mode turns on when the component is used on small screens or phone devices.\n     * In phone mode the user can see either the calendar view, or the time view\n     * and can switch between the views via toggle buttons.\n     * @type {boolean}\n     * @defaultvalue false\n     * @private\n     */\n    _phoneMode: {\n      type: Boolean\n    },\n\n    /**\n     * Defines the state the hours slider - expanded by default.\n     * @type {boolean}\n     * @defaultvalue false\n     * @private\n     */\n    _hoursCollapsed: {\n      type: Boolean\n    }\n  }\n};\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The <code>DateTimePicker</code> component alows users to select both date (day, month and year) and time (hours, minutes and seconds)\n * and for the purpose it consists of input field and Date/Time picker.\n *\n * <h3>Usage</h3>\n *\n * Use the <code>DateTimePicker</code> if you need a combined date and time input component.\n * Don't use it if you want to use either date, or time value.\n * In this case, use the <code>DatePicker</code> or the <code>TimePicker</code> components instead.\n * <br><br>\n * The user can set date/time by:\n * <ul>\n * <li>using the calendar and the time selectors</li>\n * <li>typing in the input field</li>\n * </ul>\n *\n * Programatically, to set date/time for the <code>DateTimePicker</code>, use the <code>value</code> property\n * <br><br>\n * As most of the input based components, the <code>DateTimePicker</code> supports properties,\n * such as: <code>disabled</code>, <code>readonly</code>, <code>valueState</code> and  <code>placeholder</code>.\n *\n * <h3>Formatting</h3>\n *\n * The value entered by typing into the input field must fit to the used date/time format.\n * <br><br>\n * Supported format options are pattern-based on Unicode LDML Date Format notation.\n * For more information, see <ui5-link target=\"_blank\" href=\"https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\" class=\"api-table-content-cell-link\">UTS #35: Unicode Locale Data Markup Language</ui5-link>.\n * <br><br>\n * <b>Example:</b> the following format <code>dd/MM/yyyy, hh:mm:ss aa</code>\n * corresponds the <code>13/04/2020, 03:16:16 AM</code> value.\n * <br>\n * The small 'h' defines \"12\" hours format and the \"aa\" symbols - \"AM/PM\" time periods.\n *\n * <br><br>\n * <b>Example:</b> the following format <code>dd/MM/yyyy, HH:mm:ss</code>\n * corresponds the <code>13/04/2020, 15:16:16</code> value.\n * <br>\n * The capital 'H' indicates \"24\" hours format.\n *\n * <br><br>\n * <b>Note:</b> If the <code>formatPattern</code> does NOT include time,\n * the <code>DateTimePicker</code> will fallback to the default time format according to the locale.\n *\n * <br><br>\n * <b>Note:</b> If no placeholder is set to the <code>DateTimePicker</code>,\n * the current <code>formatPattern</code> is displayed as a placeholder.\n * If another placeholder is needed, it must be set or in case no placeholder is needed - it can be set to an empty string.\n *\n * <br><br>\n * <b>Note:</b> If the user input does NOT match the <code>formatPattern</code>,\n * the <code>DateTimePicker</code> makes an attempt to parse it based on the\n * locale settings.\n *\n * <h3>Responsive behavior</h3>\n *\n * The <code>DateTimePicker</code> is responsive and fully adapts to all devices.\n * For larger screens, such as tablet or desktop, it is displayed as a popover, while\n * on phone devices, it is displayed full screen.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import @ui5/webcomponents/dist/DateTimePicker.js\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.DateTimePicker\n * @extends DatePicker\n * @tagname ui5-datetime-picker\n * @since 1.0.0-rc.7\n * @public\n */\n\nvar DateTimePicker = /*#__PURE__*/function (_DatePicker) {\n  _inherits(DateTimePicker, _DatePicker);\n\n  var _super = _createSuper(DateTimePicker);\n\n  _createClass(DateTimePicker, null, [{\n    key: \"onDefine\",\n    value: function () {\n      var _onDefine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Promise.all([DatePicker.define(), Calendar.define(), Button.define(), ToggleButton.define(), SegmentedButton.define(), WheelSlider.define()]);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onDefine() {\n        return _onDefine.apply(this, arguments);\n      }\n\n      return onDefine;\n    }()\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return metadata;\n    }\n  }, {\n    key: \"staticAreaTemplate\",\n    get: function get() {\n      return DateTimePickerPopoverTemplate;\n    }\n  }, {\n    key: \"staticAreaStyles\",\n    get: function get() {\n      return [DateTimePickerPopoverCss].concat(_toConsumableArray(_get(_getPrototypeOf(DateTimePicker), \"staticAreaStyles\", this)));\n    }\n  }]);\n\n  function DateTimePicker() {\n    var _this;\n\n    _classCallCheck(this, DateTimePicker);\n\n    _this = _super.call(this);\n    _this._calendarPreview = null; // preview of the calendar selection\n\n    _this._hoursConfig = {\n      // hours configuration (12/24 hour format)\n      minHour: 0,\n      maxHour: 0,\n      isTwelveHoursFormat: false\n    };\n    var superFn = _this._respPopoverConfig.afterClose;\n\n    _this._respPopoverConfig.afterClose = function () {\n      superFn();\n      _this._showTimeView = false;\n      _this._calendarPreview = null;\n    };\n\n    _this._handleResizeBound = _this._handleResize.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n  /**\n   * LIFECYCLE METHODS\n   */\n\n\n  _createClass(DateTimePicker, [{\n    key: \"onBeforeRendering\",\n    value: function onBeforeRendering() {\n      _get(_getPrototypeOf(DateTimePicker.prototype), \"onBeforeRendering\", this).call(this);\n\n      this.updateHoursFormatConfig();\n    }\n  }, {\n    key: \"onEnterDOM\",\n    value: function onEnterDOM() {\n      ResizeHandler.register(document.body, this._handleResizeBound);\n    }\n  }, {\n    key: \"onExitDOM\",\n    value: function onExitDOM() {\n      ResizeHandler.deregister(document.body, this._handleResizeBound);\n    }\n    /**\n     * PUBLIC METHODS\n     */\n\n    /**\n     * Opens the picker.\n     *\n     * @param {object} options A JSON object with additional configuration.<br>\n     * <code>{ focusInput: true }</code> By default, the focus goes in the picker after opening it.\n     * Specify this option to focus the input field.\n     * @public\n     */\n\n  }, {\n    key: \"openPicker\",\n    value: function () {\n      var _openPicker = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(options) {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return _get(_getPrototypeOf(DateTimePicker.prototype), \"openPicker\", this).call(this, options);\n\n              case 2:\n                _context2.next = 4;\n                return this.setSlidersValue();\n\n              case 4:\n                this.expandHoursSlider();\n                this.storePreviousValue();\n\n              case 6:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function openPicker(_x) {\n        return _openPicker.apply(this, arguments);\n      }\n\n      return openPicker;\n    }()\n    /**\n     * Closes the picker.\n     * @public\n     */\n\n  }, {\n    key: \"closePicker\",\n    value: function closePicker() {\n      return _get(_getPrototypeOf(DateTimePicker.prototype), \"closePicker\", this).call(this); // in order to be displayed in the DateTimePicker API reference\n    }\n    /**\n     * Checks if a value is valid against the current date/time format.\n     *\n     * @param {string} value A value to be tested against the current date/time format\n     * @public\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid() {\n      var value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n      return _get(_getPrototypeOf(DateTimePicker.prototype), \"isValid\", this).call(this, value); // in order to be displayed in the DateTimePicker API reference\n    }\n    /**\n     * Read-only getters\n     */\n\n  }, {\n    key: \"_handleInputLiveChange\",\n\n    /**\n     * EVENT HANDLERS\n     */\n\n    /**\n    * @override\n    * Overwrite the method to update the time sliders.\n    */\n    value: function _handleInputLiveChange() {\n      _get(_getPrototypeOf(DateTimePicker.prototype), \"_handleInputLiveChange\", this).call(this);\n\n      this.setSlidersValue();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_handleCalendarChange\",\n    value: function _handleCalendarChange(event) {\n      var newValue = event.detail.dates && event.detail.dates[0];\n\n      _get(_getPrototypeOf(DateTimePicker.prototype), \"_handleCalendarSelectedDatesChange\", this).call(this, event, newValue);\n\n      this.storeCalendarSelection();\n    }\n    /**\n     * @override\n     * Overwrite the method to avoid updating the <code>value</code> when the user clicks on the calendar.\n     *\n     * <b>Note:</b> the <code>DateTimePicker</code> should change and update the value\n     * after user presses the <code>submit</code> button.\n     */\n\n  }, {\n    key: \"_updateValueCalendarSelectedDatesChange\",\n    value: function _updateValueCalendarSelectedDatesChange() {}\n    /**\n     * Handles document resize to switch between <code>phoneMode</code> and normal appearance.\n     */\n\n  }, {\n    key: \"_handleResize\",\n    value: function () {\n      var _handleResize2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var documentWidth, toPhoneMode, modeChange;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                documentWidth = document.body.offsetWidth;\n                toPhoneMode = documentWidth <= PHONE_MODE_BREAKPOINT;\n                modeChange = toPhoneMode && !this._phoneMode || !toPhoneMode && this._phoneMode; // XOR not allowed by lint\n\n                if (modeChange) {\n                  this._phoneMode = toPhoneMode;\n                  this.setSlidersValue();\n                }\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function _handleResize() {\n        return _handleResize2.apply(this, arguments);\n      }\n\n      return _handleResize;\n    }()\n    /**\n     * Handles clicking on the <code>submit</code> button, within the picker`s footer.\n     */\n\n  }, {\n    key: \"_submitClick\",\n    value: function () {\n      var _submitClick2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var selectedDate, valid;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return this.getCurrentDateTime();\n\n              case 2:\n                selectedDate = _context4.sent;\n                this.value = this.getFormat().format(selectedDate);\n                valid = this.isValid(this.value);\n\n                if (this.value !== this.previousValue) {\n                  this.fireEvent(\"change\", {\n                    value: this.value,\n                    valid: valid\n                  });\n                  this.fireEvent(\"value-changed\", {\n                    value: this.value,\n                    valid: valid\n                  });\n                }\n\n                this.closePicker();\n\n              case 7:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _submitClick() {\n        return _submitClick2.apply(this, arguments);\n      }\n\n      return _submitClick;\n    }()\n    /**\n     * Handles clicking on the <code>cancel</code> button, within the picker`s footer,\n     * that would disregard the user selection.\n     */\n\n  }, {\n    key: \"_cancelClick\",\n    value: function () {\n      var _cancelClick2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.value = this.previousValue;\n                this.closePicker();\n\n              case 2:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function _cancelClick() {\n        return _cancelClick2.apply(this, arguments);\n      }\n\n      return _cancelClick;\n    }()\n    /**\n     * Handles the date/time switch available in <code>phoneMode</code> to switch\n     * between the date and time views.\n     * @param {Event} event\n     */\n\n  }, {\n    key: \"_dateTimeSwitchChange\",\n    value: function () {\n      var _dateTimeSwitchChange2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(event) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this._showTimeView = event.target.getAttribute(\"key\") === \"Time\";\n\n                if (this._showTimeView) {\n                  this.expandHoursSlider();\n                }\n\n              case 2:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function _dateTimeSwitchChange(_x2) {\n        return _dateTimeSwitchChange2.apply(this, arguments);\n      }\n\n      return _dateTimeSwitchChange;\n    }()\n    /**\n     * Handles clicking on \"minutes\", \"seconds\" and \"periods\" sliders.\n     * <b>Note:</b> not bound for \"hours\" click\n     * @param {Event} event\n     */\n\n  }, {\n    key: \"_sliderClick\",\n    value: function _sliderClick() {\n      this.collapseHoursSlider();\n    }\n    /**\n     * PRIVATE METHODS\n     */\n\n    /**\n    * Stores a preview of the calendar selection to restore it\n    * when the user switches between the time and date view.\n    * <br><br>\n    * <b>Note:</b> this is needed, because the <code>value</code> is not immediately updated on user interaction,\n    * but only after the user presses the <code>sumbit</code> button.\n    */\n\n  }, {\n    key: \"storeCalendarSelection\",\n    value: function storeCalendarSelection() {\n      this._calendarPreview = {\n        timestamp: this._calendar.timestamp,\n        dates: this._calendar.selectedDates\n      };\n    }\n    /**\n     * Stores the <code>value</code> when the picker opens to compare with the <code>value</code>,\n     * selected by any user interaction and fire the <code>change</code> event, if they differ.\n     */\n\n  }, {\n    key: \"storePreviousValue\",\n    value: function storePreviousValue() {\n      this.previousValue = this.value;\n    }\n    /**\n     * Normalizes the current <code>formatPattern</code>.\n     *\n     * Fallbacks to the default <code>formatPattern</code> according to the locale when:\n     * - no format is set at all\n     * - the format does not include hours\n     *\n     * @param {string} pattern The current <code>formatPattern</code>\n     * @returns {string}\n     */\n\n  }, {\n    key: \"normalizePattern\",\n    value: function normalizePattern(pattern) {\n      var hasHours = !!pattern.match(/H/i);\n      var fallback = !pattern || !hasHours;\n      return fallback ? LocaleData.getInstance(getLocale()).getCombinedDateTimePattern(\"medium\", \"medium\", this._primaryCalendarType) : pattern;\n    }\n    /**\n     * Expands the \"hours\" time slider.\n     */\n\n  }, {\n    key: \"expandHoursSlider\",\n    value: function expandHoursSlider() {\n      this._hoursCollapsed = false;\n    }\n    /**\n     * Collapses the \"hours\" time slider.\n     */\n\n  }, {\n    key: \"collapseHoursSlider\",\n    value: function collapseHoursSlider() {\n      this._hoursCollapsed = true;\n    }\n  }, {\n    key: \"getHoursSlider\",\n    value: function () {\n      var _getHoursSlider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return this.getPicker();\n\n              case 2:\n                return _context7.abrupt(\"return\", _context7.sent.querySelector(\".ui5-dt-hours-wheel\"));\n\n              case 3:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function getHoursSlider() {\n        return _getHoursSlider.apply(this, arguments);\n      }\n\n      return getHoursSlider;\n    }()\n  }, {\n    key: \"getMinutesSlider\",\n    value: function () {\n      var _getMinutesSlider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return this.getPicker();\n\n              case 2:\n                return _context8.abrupt(\"return\", _context8.sent.querySelector(\".ui5-dt-minutes-wheel\"));\n\n              case 3:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function getMinutesSlider() {\n        return _getMinutesSlider.apply(this, arguments);\n      }\n\n      return getMinutesSlider;\n    }()\n  }, {\n    key: \"getSecondsSlider\",\n    value: function () {\n      var _getSecondsSlider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                _context9.next = 2;\n                return this.getPicker();\n\n              case 2:\n                return _context9.abrupt(\"return\", _context9.sent.querySelector(\".ui5-dt-seconds-wheel\"));\n\n              case 3:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function getSecondsSlider() {\n        return _getSecondsSlider.apply(this, arguments);\n      }\n\n      return getSecondsSlider;\n    }()\n  }, {\n    key: \"getPeriodsSlider\",\n    value: function () {\n      var _getPeriodsSlider = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n        return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _context10.next = 2;\n                return this.getPicker();\n\n              case 2:\n                return _context10.abrupt(\"return\", _context10.sent.querySelector(\".ui5-dt-periods-wheel\"));\n\n              case 3:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee10, this);\n      }));\n\n      function getPeriodsSlider() {\n        return _getPeriodsSlider.apply(this, arguments);\n      }\n\n      return getPeriodsSlider;\n    }()\n  }, {\n    key: \"getPicker\",\n    value: function () {\n      var _getPicker = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n        var staticAreaItem;\n        return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n          while (1) {\n            switch (_context11.prev = _context11.next) {\n              case 0:\n                _context11.next = 2;\n                return this.getStaticAreaItemDomRef();\n\n              case 2:\n                staticAreaItem = _context11.sent;\n                return _context11.abrupt(\"return\", staticAreaItem.querySelector(\"ui5-responsive-popover\"));\n\n              case 4:\n              case \"end\":\n                return _context11.stop();\n            }\n          }\n        }, _callee11, this);\n      }));\n\n      function getPicker() {\n        return _getPicker.apply(this, arguments);\n      }\n\n      return getPicker;\n    }()\n  }, {\n    key: \"getCurrentDateTime\",\n    value: function () {\n      var _getCurrentDateTime = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var selectedTime, timeValues, currentCalendarValue, selectedDate;\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                // the time set in the timepicker\n                selectedTime = new Date();\n                _context12.next = 3;\n                return this.getTimePickerValues();\n\n              case 3:\n                timeValues = _context12.sent;\n                selectedTime.setHours(timeValues.hours);\n                selectedTime.setMinutes(timeValues.minutes);\n                selectedTime.setSeconds(timeValues.seconds); // the date set in the calendar\n\n                currentCalendarValue = this.getFormat().format(new Date(CalendarDate.fromTimestamp(this._calTimestamp * 1000, this._primaryCalendarType).valueOf()), true); // merge both the date and time\n\n                selectedDate = this.getFormat().parse(currentCalendarValue) || selectedTime;\n                selectedDate.setHours(selectedTime.getHours());\n                selectedDate.setMinutes(selectedTime.getMinutes());\n                selectedDate.setSeconds(selectedTime.getSeconds());\n                return _context12.abrupt(\"return\", selectedDate);\n\n              case 13:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n\n      function getCurrentDateTime() {\n        return _getCurrentDateTime.apply(this, arguments);\n      }\n\n      return getCurrentDateTime;\n    }()\n  }, {\n    key: \"getTimePickerValues\",\n    value: function () {\n      var _getTimePickerValues = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var secondsSlider, minutesSlider, hoursSlider, periodsSlider, hours, minutes, seconds, period;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                _context13.next = 2;\n                return this.getSecondsSlider();\n\n              case 2:\n                secondsSlider = _context13.sent;\n                _context13.next = 5;\n                return this.getMinutesSlider();\n\n              case 5:\n                minutesSlider = _context13.sent;\n                _context13.next = 8;\n                return this.getHoursSlider();\n\n              case 8:\n                hoursSlider = _context13.sent;\n                _context13.next = 11;\n                return this.getPeriodsSlider();\n\n              case 11:\n                periodsSlider = _context13.sent;\n                hours = hoursSlider ? hoursSlider.value : this._hoursConfig.minHour.toString();\n                minutes = minutesSlider ? minutesSlider.value : \"0\";\n                seconds = secondsSlider ? secondsSlider.value : \"0\";\n                period = periodsSlider ? periodsSlider.value : this.periodsArray[0];\n\n                if (period === this.periodsArray[0]) {\n                  // AM\n                  hours = hours === \"12\" ? 0 : hours;\n                }\n\n                if (period === this.periodsArray[1]) {\n                  // PM\n                  hours = hours === \"12\" ? hours : hours * 1 + 12;\n                }\n\n                return _context13.abrupt(\"return\", {\n                  hours: hours,\n                  minutes: minutes,\n                  seconds: seconds,\n                  period: period\n                });\n\n              case 19:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this);\n      }));\n\n      function getTimePickerValues() {\n        return _getTimePickerValues.apply(this, arguments);\n      }\n\n      return getTimePickerValues;\n    }()\n    /**\n     * Sets hours, minutes, seconds and period according to the current <code>value</code>\n     * or the current time if the <code>value</code> is not set.\n     */\n\n  }, {\n    key: \"setSlidersValue\",\n    value: function () {\n      var _setSlidersValue = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        var currentDate;\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                currentDate = this.value ? this.getFormat().parse(this.value) : new Date();\n\n                if (!currentDate) {\n                  _context14.next = 10;\n                  break;\n                }\n\n                _context14.next = 4;\n                return this.setHours(currentDate.getHours());\n\n              case 4:\n                _context14.next = 6;\n                return this.setMinutes(currentDate.getMinutes());\n\n              case 6:\n                _context14.next = 8;\n                return this.setSeconds(currentDate.getSeconds());\n\n              case 8:\n                _context14.next = 10;\n                return this.setPeriod(currentDate.getHours());\n\n              case 10:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n\n      function setSlidersValue() {\n        return _setSlidersValue.apply(this, arguments);\n      }\n\n      return setSlidersValue;\n    }()\n  }, {\n    key: \"setHours\",\n    value: function () {\n      var _setHours = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15(value) {\n        var tempValue, hoursSlider, config;\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                tempValue = \"\";\n                _context15.next = 3;\n                return this.getHoursSlider();\n\n              case 3:\n                hoursSlider = _context15.sent;\n                config = this._hoursConfig;\n\n                if (hoursSlider) {\n                  if (config.isTwelveHoursFormat && value > config.maxHour) {\n                    tempValue = value - 12;\n                  } else if (config.isTwelveHoursFormat && value < config.minHour) {\n                    tempValue = value + 12;\n                  } else {\n                    tempValue = value;\n                  }\n\n                  hoursSlider.value = this.normalizeDigit(tempValue);\n                }\n\n              case 6:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n\n      function setHours(_x3) {\n        return _setHours.apply(this, arguments);\n      }\n\n      return setHours;\n    }()\n  }, {\n    key: \"setMinutes\",\n    value: function () {\n      var _setMinutes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16(value) {\n        var minutesSlider;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                _context16.next = 2;\n                return this.getMinutesSlider();\n\n              case 2:\n                minutesSlider = _context16.sent;\n\n                if (minutesSlider) {\n                  minutesSlider.value = this.normalizeDigit(value);\n                }\n\n              case 4:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n\n      function setMinutes(_x4) {\n        return _setMinutes.apply(this, arguments);\n      }\n\n      return setMinutes;\n    }()\n  }, {\n    key: \"setSeconds\",\n    value: function () {\n      var _setSeconds = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17(value) {\n        var secondsSlider;\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.getSecondsSlider();\n\n              case 2:\n                secondsSlider = _context17.sent;\n\n                if (secondsSlider) {\n                  secondsSlider.value = this.normalizeDigit(value);\n                }\n\n              case 4:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n\n      function setSeconds(_x5) {\n        return _setSeconds.apply(this, arguments);\n      }\n\n      return setSeconds;\n    }()\n  }, {\n    key: \"setPeriod\",\n    value: function () {\n      var _setPeriod = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18(hours) {\n        var config, periodsSlider;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                config = this._hoursConfig;\n                _context18.next = 3;\n                return this.getPeriodsSlider();\n\n              case 3:\n                periodsSlider = _context18.sent;\n\n                if (periodsSlider) {\n                  _context18.next = 6;\n                  break;\n                }\n\n                return _context18.abrupt(\"return\");\n\n              case 6:\n                if (config.isTwelveHoursFormat) {\n                  if (config.minHour === 1) {\n                    periodsSlider.value = hours >= config.maxHour ? this.periodsArray[1] : this.periodsArray[0];\n                  } else {\n                    periodsSlider.value = hours > config.maxHour || hours === config.minHour ? this.periodsArray[1] : this.periodsArray[0];\n                  }\n                }\n\n              case 7:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n\n      function setPeriod(_x6) {\n        return _setPeriod.apply(this, arguments);\n      }\n\n      return setPeriod;\n    }()\n  }, {\n    key: \"normalizeDigit\",\n    value: function normalizeDigit(value) {\n      var valueAsString = value.toString();\n      return valueAsString.length === 1 ? \"0\".concat(value) : valueAsString;\n    }\n  }, {\n    key: \"isTimeControlContained\",\n    value: function isTimeControlContained() {\n      var format = this.getFormat().aFormatArray;\n      return getTimeControlsByFormat(format, this._hoursConfig);\n    }\n  }, {\n    key: \"updateHoursFormatConfig\",\n    value: function updateHoursFormatConfig() {\n      var formatArray = this.getFormat().aFormatArray;\n\n      if (formatArray.length < 7) {\n        return; // does not contain time data\n      }\n\n      var config = getHoursConfigByFormat(formatArray[6].type);\n      this._hoursConfig.minHour = config.minHour;\n      this._hoursConfig.maxHour = config.maxHour;\n      this._hoursConfig.isTwelveHoursFormat = config.isTwelveHoursFormat;\n    }\n  }, {\n    key: \"classes\",\n    get: function get() {\n      return {\n        picker: {\n          \"ui5-dt-picker-content--phone\": this.phone\n        },\n        dateTimeView: {\n          \"ui5-dt-cal--hidden\": this.phone && this.showTimeView,\n          \"ui5-dt-time--hidden\": this.phone && this.showDateView\n        }\n      };\n    }\n  }, {\n    key: \"_formatPattern\",\n    get: function get() {\n      return this.normalizePattern(this.formatPattern);\n    }\n  }, {\n    key: \"_calTimestamp\",\n    get: function get() {\n      return this._calendarPreview ? this._calendarPreview.timestamp : this._calendar.timestamp;\n    }\n  }, {\n    key: \"_calDates\",\n    get: function get() {\n      return this._calendarPreview ? this._calendarPreview.selectedDates : this._calendar.selectedDates;\n    }\n  }, {\n    key: \"secondsArray\",\n    get: function get() {\n      return getSeconds();\n    }\n  }, {\n    key: \"minutesArray\",\n    get: function get() {\n      return getMinutes();\n    }\n  }, {\n    key: \"hoursArray\",\n    get: function get() {\n      return getHours(this._hoursConfig);\n    }\n  }, {\n    key: \"periodsArray\",\n    get: function get() {\n      return this.getFormat().aDayPeriods.map(function (x) {\n        return x.toUpperCase();\n      });\n    }\n  }, {\n    key: \"openIconName\",\n    get: function get() {\n      return \"date-time\";\n    }\n  }, {\n    key: \"hoursLabel\",\n    get: function get() {\n      return this.i18nBundle.getText(TIMEPICKER_HOURS_LABEL);\n    }\n  }, {\n    key: \"minutesLabel\",\n    get: function get() {\n      return this.i18nBundle.getText(TIMEPICKER_MINUTES_LABEL);\n    }\n  }, {\n    key: \"secondsLabel\",\n    get: function get() {\n      return this.i18nBundle.getText(TIMEPICKER_SECONDS_LABEL);\n    }\n  }, {\n    key: \"periodLabel\",\n    get: function get() {\n      return this.i18nBundle.getText(TIMEPICKER_PERIODS_LABEL);\n    }\n  }, {\n    key: \"btnOKLabel\",\n    get: function get() {\n      return this.i18nBundle.getText(TIMEPICKER_SUBMIT_BUTTON);\n    }\n  }, {\n    key: \"btnCancelLabel\",\n    get: function get() {\n      return this.i18nBundle.getText(TIMEPICKER_CANCEL_BUTTON);\n    }\n  }, {\n    key: \"btnDateLabel\",\n    get: function get() {\n      return this.i18nBundle.getText(DATETIME_PICKER_DATE_BUTTON);\n    }\n  }, {\n    key: \"btnTimeLabel\",\n    get: function get() {\n      return this.i18nBundle.getText(DATETIME_PICKER_TIME_BUTTON);\n    }\n  }, {\n    key: \"showFooter\",\n    get: function get() {\n      return true;\n    }\n  }, {\n    key: \"showDateView\",\n    get: function get() {\n      return this.phone ? !this._showTimeView : true;\n    }\n  }, {\n    key: \"showTimeView\",\n    get: function get() {\n      return this.phone ? this._showTimeView : true;\n    }\n  }, {\n    key: \"phone\",\n    get: function get() {\n      return _get(_getPrototypeOf(DateTimePicker.prototype), \"phone\", this) || this._phoneMode;\n    }\n  }, {\n    key: \"shouldBuildHoursSlider\",\n    get: function get() {\n      return this.isTimeControlContained()[0];\n    }\n  }, {\n    key: \"shouldBuildMinutesSlider\",\n    get: function get() {\n      return this.isTimeControlContained()[1];\n    }\n  }, {\n    key: \"shouldBuildSecondsSlider\",\n    get: function get() {\n      return this.isTimeControlContained()[2];\n    }\n  }, {\n    key: \"shouldBuildPeriodsSlider\",\n    get: function get() {\n      return this.isTimeControlContained()[3];\n    }\n  }, {\n    key: \"_hoursExpanded\",\n    get: function get() {\n      return !this._hoursCollapsed;\n    }\n    /**\n     * Defines whether the dialog on mobile should have header\n     * @private\n     */\n\n  }, {\n    key: \"_shouldHideHeader\",\n    get: function get() {\n      return true;\n    }\n  }]);\n\n  return DateTimePicker;\n}(DatePicker);\n\nDateTimePicker.define();\nexport default DateTimePicker;","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/@ui5/webcomponents/dist/DateTimePicker.js"],"names":["ResizeHandler","getLocale","LocaleData","CalendarDate","Button","ToggleButton","SegmentedButton","Calendar","DatePicker","WheelSlider","getHours","getMinutes","getSeconds","getHoursConfigByFormat","getTimeControlsByFormat","TIMEPICKER_HOURS_LABEL","TIMEPICKER_MINUTES_LABEL","TIMEPICKER_SECONDS_LABEL","TIMEPICKER_PERIODS_LABEL","TIMEPICKER_SUBMIT_BUTTON","TIMEPICKER_CANCEL_BUTTON","DATETIME_PICKER_DATE_BUTTON","DATETIME_PICKER_TIME_BUTTON","DateTimePickerPopoverTemplate","DateTimePickerPopoverCss","PHONE_MODE_BREAKPOINT","metadata","tag","properties","_showTimeView","type","Boolean","noAttribute","_phoneMode","_hoursCollapsed","DateTimePicker","Promise","all","define","_calendarPreview","_hoursConfig","minHour","maxHour","isTwelveHoursFormat","superFn","_respPopoverConfig","afterClose","_handleResizeBound","_handleResize","bind","updateHoursFormatConfig","register","document","body","deregister","options","setSlidersValue","expandHoursSlider","storePreviousValue","value","event","newValue","detail","dates","storeCalendarSelection","documentWidth","offsetWidth","toPhoneMode","modeChange","getCurrentDateTime","selectedDate","getFormat","format","valid","isValid","previousValue","fireEvent","closePicker","target","getAttribute","collapseHoursSlider","timestamp","_calendar","selectedDates","pattern","hasHours","match","fallback","getInstance","getCombinedDateTimePattern","_primaryCalendarType","getPicker","querySelector","getStaticAreaItemDomRef","staticAreaItem","selectedTime","Date","getTimePickerValues","timeValues","setHours","hours","setMinutes","minutes","setSeconds","seconds","currentCalendarValue","fromTimestamp","_calTimestamp","valueOf","parse","getSecondsSlider","secondsSlider","getMinutesSlider","minutesSlider","getHoursSlider","hoursSlider","getPeriodsSlider","periodsSlider","toString","period","periodsArray","currentDate","setPeriod","tempValue","config","normalizeDigit","valueAsString","length","aFormatArray","formatArray","picker","phone","dateTimeView","showTimeView","showDateView","normalizePattern","formatPattern","aDayPeriods","map","x","toUpperCase","i18nBundle","getText","isTimeControlContained"],"mappings":"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","sourcesContent":["import ResizeHandler from \"@ui5/webcomponents-base/dist/delegate/ResizeHandler.js\";\nimport getLocale from \"@ui5/webcomponents-base/dist/locale/getLocale.js\";\nimport LocaleData from \"@ui5/webcomponents-localization/dist/LocaleData.js\";\nimport CalendarDate from \"@ui5/webcomponents-localization/dist/dates/CalendarDate.js\";\nimport \"@ui5/webcomponents-icons/dist/icons/date-time.js\";\nimport Button from \"./Button.js\";\nimport ToggleButton from \"./ToggleButton.js\";\nimport SegmentedButton from \"./SegmentedButton.js\";\nimport Calendar from \"./Calendar.js\";\nimport DatePicker from \"./DatePicker.js\";\nimport WheelSlider from \"./WheelSlider.js\";\n\n// time functions\nimport {\n\tgetHours,\n\tgetMinutes,\n\tgetSeconds,\n\tgetHoursConfigByFormat,\n\tgetTimeControlsByFormat,\n} from \"./timepicker-utils/TimeSlider.js\";\n\n// i18n texts\nimport {\n\tTIMEPICKER_HOURS_LABEL,\n\tTIMEPICKER_MINUTES_LABEL,\n\tTIMEPICKER_SECONDS_LABEL,\n\tTIMEPICKER_PERIODS_LABEL,\n\tTIMEPICKER_SUBMIT_BUTTON,\n\tTIMEPICKER_CANCEL_BUTTON,\n\tDATETIME_PICKER_DATE_BUTTON,\n\tDATETIME_PICKER_TIME_BUTTON,\n} from \"./generated/i18n/i18n-defaults.js\";\n\n// Template\nimport DateTimePickerPopoverTemplate from \"./generated/templates/DateTimePickerPopoverTemplate.lit.js\";\n\n// Styles\nimport DateTimePickerPopoverCss from \"./generated/themes/DateTimePickerPopover.css.js\";\n\nconst PHONE_MODE_BREAKPOINT = 640; // px\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-datetime-picker\",\n\tproperties: /** @lends sap.ui.webcomponents.main.DateTimePicker.prototype */ {\n\n\t\t/**\n\t\t * Defines the visibility of the time view in <code>phoneMode</code>.\n\t\t * For more information, see the <code>phoneMode</code> property.\n\t\t *\n\t\t * <br><br>\n\t\t * <b>Note:</b> The date view would be displayed by default.\n\t\t * @type {boolean}\n\t\t * @defaultvalue false\n\t\t * @private\n\t\t */\n\t\t_showTimeView: {\n\t\t\ttype: Boolean,\n\t\t\tnoAttribute: true,\n\t\t},\n\n\t\t/**\n\t\t * Defines if the <code>DateTimePicker</code> should be displayed in phone mode.\n\t\t * The phone mode turns on when the component is used on small screens or phone devices.\n\t\t * In phone mode the user can see either the calendar view, or the time view\n\t\t * and can switch between the views via toggle buttons.\n\t\t * @type {boolean}\n\t\t * @defaultvalue false\n\t\t * @private\n\t\t */\n\t\t_phoneMode: {\n\t\t\ttype: Boolean,\n\t\t},\n\n\t\t/**\n\t\t * Defines the state the hours slider - expanded by default.\n\t\t * @type {boolean}\n\t\t * @defaultvalue false\n\t\t * @private\n\t\t */\n\t\t_hoursCollapsed: {\n\t\t\ttype: Boolean,\n\t\t},\n\t},\n};\n\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The <code>DateTimePicker</code> component alows users to select both date (day, month and year) and time (hours, minutes and seconds)\n * and for the purpose it consists of input field and Date/Time picker.\n *\n * <h3>Usage</h3>\n *\n * Use the <code>DateTimePicker</code> if you need a combined date and time input component.\n * Don't use it if you want to use either date, or time value.\n * In this case, use the <code>DatePicker</code> or the <code>TimePicker</code> components instead.\n * <br><br>\n * The user can set date/time by:\n * <ul>\n * <li>using the calendar and the time selectors</li>\n * <li>typing in the input field</li>\n * </ul>\n *\n * Programatically, to set date/time for the <code>DateTimePicker</code>, use the <code>value</code> property\n * <br><br>\n * As most of the input based components, the <code>DateTimePicker</code> supports properties,\n * such as: <code>disabled</code>, <code>readonly</code>, <code>valueState</code> and  <code>placeholder</code>.\n *\n * <h3>Formatting</h3>\n *\n * The value entered by typing into the input field must fit to the used date/time format.\n * <br><br>\n * Supported format options are pattern-based on Unicode LDML Date Format notation.\n * For more information, see <ui5-link target=\"_blank\" href=\"https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\" class=\"api-table-content-cell-link\">UTS #35: Unicode Locale Data Markup Language</ui5-link>.\n * <br><br>\n * <b>Example:</b> the following format <code>dd/MM/yyyy, hh:mm:ss aa</code>\n * corresponds the <code>13/04/2020, 03:16:16 AM</code> value.\n * <br>\n * The small 'h' defines \"12\" hours format and the \"aa\" symbols - \"AM/PM\" time periods.\n *\n * <br><br>\n * <b>Example:</b> the following format <code>dd/MM/yyyy, HH:mm:ss</code>\n * corresponds the <code>13/04/2020, 15:16:16</code> value.\n * <br>\n * The capital 'H' indicates \"24\" hours format.\n *\n * <br><br>\n * <b>Note:</b> If the <code>formatPattern</code> does NOT include time,\n * the <code>DateTimePicker</code> will fallback to the default time format according to the locale.\n *\n * <br><br>\n * <b>Note:</b> If no placeholder is set to the <code>DateTimePicker</code>,\n * the current <code>formatPattern</code> is displayed as a placeholder.\n * If another placeholder is needed, it must be set or in case no placeholder is needed - it can be set to an empty string.\n *\n * <br><br>\n * <b>Note:</b> If the user input does NOT match the <code>formatPattern</code>,\n * the <code>DateTimePicker</code> makes an attempt to parse it based on the\n * locale settings.\n *\n * <h3>Responsive behavior</h3>\n *\n * The <code>DateTimePicker</code> is responsive and fully adapts to all devices.\n * For larger screens, such as tablet or desktop, it is displayed as a popover, while\n * on phone devices, it is displayed full screen.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import @ui5/webcomponents/dist/DateTimePicker.js\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.DateTimePicker\n * @extends DatePicker\n * @tagname ui5-datetime-picker\n * @since 1.0.0-rc.7\n * @public\n */\nclass DateTimePicker extends DatePicker {\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get staticAreaTemplate() {\n\t\treturn DateTimePickerPopoverTemplate;\n\t}\n\n\tstatic get staticAreaStyles() {\n\t\treturn [DateTimePickerPopoverCss, ...super.staticAreaStyles];\n\t}\n\n\tstatic async onDefine() {\n\t\tawait Promise.all([\n\t\t\tDatePicker.define(),\n\t\t\tCalendar.define(),\n\t\t\tButton.define(),\n\t\t\tToggleButton.define(),\n\t\t\tSegmentedButton.define(),\n\t\t\tWheelSlider.define(),\n\t\t]);\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._calendarPreview = null; // preview of the calendar selection\n\n\t\tthis._hoursConfig = { // hours configuration (12/24 hour format)\n\t\t\tminHour: 0,\n\t\t\tmaxHour: 0,\n\t\t\tisTwelveHoursFormat: false,\n\t\t};\n\n\t\tconst superFn = this._respPopoverConfig.afterClose;\n\t\tthis._respPopoverConfig.afterClose = () => {\n\t\t\tsuperFn();\n\t\t\tthis._showTimeView = false;\n\t\t\tthis._calendarPreview = null;\n\t\t};\n\n\t\tthis._handleResizeBound = this._handleResize.bind(this);\n\t}\n\n\t/**\n\t * LIFECYCLE METHODS\n\t */\n\n\tonBeforeRendering() {\n\t\tsuper.onBeforeRendering();\n\t\tthis.updateHoursFormatConfig();\n\t}\n\n\tonEnterDOM() {\n\t\tResizeHandler.register(document.body, this._handleResizeBound);\n\t}\n\n\tonExitDOM() {\n\t\tResizeHandler.deregister(document.body, this._handleResizeBound);\n\t}\n\n\t/**\n\t * PUBLIC METHODS\n\t */\n\n\t/**\n\t * Opens the picker.\n\t *\n\t * @param {object} options A JSON object with additional configuration.<br>\n\t * <code>{ focusInput: true }</code> By default, the focus goes in the picker after opening it.\n\t * Specify this option to focus the input field.\n\t * @public\n\t */\n\tasync openPicker(options) {\n\t\tawait super.openPicker(options);\n\t\tawait this.setSlidersValue();\n\t\tthis.expandHoursSlider();\n\t\tthis.storePreviousValue();\n\t}\n\n\t/**\n\t * Closes the picker.\n\t * @public\n\t */\n\tclosePicker() {\n\t\treturn super.closePicker(); // in order to be displayed in the DateTimePicker API reference\n\t}\n\n\t/**\n\t * Checks if a value is valid against the current date/time format.\n\t *\n\t * @param {string} value A value to be tested against the current date/time format\n\t * @public\n\t */\n\tisValid(value = \"\") {\n\t\treturn super.isValid(value); // in order to be displayed in the DateTimePicker API reference\n\t}\n\n\t/**\n\t * Read-only getters\n\t */\n\n\tget classes() {\n\t\treturn {\n\t\t\tpicker: {\n\t\t\t\t\"ui5-dt-picker-content--phone\": this.phone,\n\t\t\t},\n\t\t\tdateTimeView: {\n\t\t\t\t\"ui5-dt-cal--hidden\": this.phone && this.showTimeView,\n\t\t\t\t\"ui5-dt-time--hidden\": this.phone && this.showDateView,\n\t\t\t},\n\t\t};\n\t}\n\n\tget _formatPattern() {\n\t\treturn this.normalizePattern(this.formatPattern);\n\t}\n\n\tget _calTimestamp() {\n\t\treturn this._calendarPreview ? this._calendarPreview.timestamp : this._calendar.timestamp;\n\t}\n\n\tget _calDates() {\n\t\treturn this._calendarPreview ? this._calendarPreview.selectedDates : this._calendar.selectedDates;\n\t}\n\n\tget secondsArray() {\n\t\treturn getSeconds();\n\t}\n\n\tget minutesArray() {\n\t\treturn getMinutes();\n\t}\n\n\tget hoursArray() {\n\t\treturn getHours(this._hoursConfig);\n\t}\n\n\tget periodsArray() {\n\t\treturn this.getFormat().aDayPeriods.map(x => x.toUpperCase());\n\t}\n\n\tget openIconName() {\n\t\treturn \"date-time\";\n\t}\n\n\tget hoursLabel() {\n\t\treturn this.i18nBundle.getText(TIMEPICKER_HOURS_LABEL);\n\t}\n\n\tget minutesLabel() {\n\t\treturn this.i18nBundle.getText(TIMEPICKER_MINUTES_LABEL);\n\t}\n\n\tget secondsLabel() {\n\t\treturn this.i18nBundle.getText(TIMEPICKER_SECONDS_LABEL);\n\t}\n\n\tget periodLabel() {\n\t\treturn this.i18nBundle.getText(TIMEPICKER_PERIODS_LABEL);\n\t}\n\n\tget btnOKLabel() {\n\t\treturn this.i18nBundle.getText(TIMEPICKER_SUBMIT_BUTTON);\n\t}\n\n\tget btnCancelLabel() {\n\t\treturn this.i18nBundle.getText(TIMEPICKER_CANCEL_BUTTON);\n\t}\n\n\tget btnDateLabel() {\n\t\treturn this.i18nBundle.getText(DATETIME_PICKER_DATE_BUTTON);\n\t}\n\n\tget btnTimeLabel() {\n\t\treturn this.i18nBundle.getText(DATETIME_PICKER_TIME_BUTTON);\n\t}\n\n\tget showFooter() {\n\t\treturn true;\n\t}\n\n\tget showDateView() {\n\t\treturn this.phone ? !this._showTimeView : true;\n\t}\n\n\tget showTimeView() {\n\t\treturn this.phone ? this._showTimeView : true;\n\t}\n\n\tget phone() {\n\t\treturn super.phone || this._phoneMode;\n\t}\n\n\tget shouldBuildHoursSlider() {\n\t\treturn this.isTimeControlContained()[0];\n\t}\n\n\tget shouldBuildMinutesSlider() {\n\t\treturn this.isTimeControlContained()[1];\n\t}\n\n\tget shouldBuildSecondsSlider() {\n\t\treturn this.isTimeControlContained()[2];\n\t}\n\n\tget shouldBuildPeriodsSlider() {\n\t\treturn this.isTimeControlContained()[3];\n\t}\n\n\tget _hoursExpanded() {\n\t\treturn !this._hoursCollapsed;\n\t}\n\n\t/**\n\t * Defines whether the dialog on mobile should have header\n\t * @private\n\t */\n\tget _shouldHideHeader() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * EVENT HANDLERS\n\t */\n\n\t /**\n\t * @override\n\t * Overwrite the method to update the time sliders.\n\t */\n\t_handleInputLiveChange() {\n\t\tsuper._handleInputLiveChange();\n\t\tthis.setSlidersValue();\n\t}\n\n\t/**\n\t * @override\n\t */\n\t_handleCalendarChange(event) {\n\t\tconst newValue = event.detail.dates && event.detail.dates[0];\n\t\tsuper._handleCalendarSelectedDatesChange(event, newValue);\n\t\tthis.storeCalendarSelection();\n\t}\n\n\t/**\n\t * @override\n\t * Overwrite the method to avoid updating the <code>value</code> when the user clicks on the calendar.\n\t *\n\t * <b>Note:</b> the <code>DateTimePicker</code> should change and update the value\n\t * after user presses the <code>submit</code> button.\n\t */\n\t_updateValueCalendarSelectedDatesChange() {}\n\n\t/**\n\t * Handles document resize to switch between <code>phoneMode</code> and normal appearance.\n\t */\n\tasync _handleResize() {\n\t\tconst documentWidth = document.body.offsetWidth;\n\t\tconst toPhoneMode = documentWidth <= PHONE_MODE_BREAKPOINT;\n\t\tconst modeChange = (toPhoneMode && !this._phoneMode) || (!toPhoneMode && this._phoneMode); // XOR not allowed by lint\n\n\t\tif (modeChange) {\n\t\t\tthis._phoneMode = toPhoneMode;\n\t\t\tthis.setSlidersValue();\n\t\t}\n\t}\n\n\t/**\n\t * Handles clicking on the <code>submit</code> button, within the picker`s footer.\n\t */\n\tasync _submitClick() {\n\t\tconst selectedDate = await this.getCurrentDateTime();\n\n\t\tthis.value = this.getFormat().format(selectedDate);\n\t\tconst valid = this.isValid(this.value);\n\n\t\tif (this.value !== this.previousValue) {\n\t\t\tthis.fireEvent(\"change\", { value: this.value, valid });\n\t\t\tthis.fireEvent(\"value-changed\", { value: this.value, valid });\n\t\t}\n\n\t\tthis.closePicker();\n\t}\n\n\t/**\n\t * Handles clicking on the <code>cancel</code> button, within the picker`s footer,\n\t * that would disregard the user selection.\n\t */\n\tasync _cancelClick() {\n\t\tthis.value = this.previousValue;\n\t\tthis.closePicker();\n\t}\n\n\t/**\n\t * Handles the date/time switch available in <code>phoneMode</code> to switch\n\t * between the date and time views.\n\t * @param {Event} event\n\t */\n\tasync _dateTimeSwitchChange(event) {\n\t\tthis._showTimeView = event.target.getAttribute(\"key\") === \"Time\";\n\n\t\tif (this._showTimeView) {\n\t\t\tthis.expandHoursSlider();\n\t\t}\n\t}\n\n\t/**\n\t * Handles clicking on \"minutes\", \"seconds\" and \"periods\" sliders.\n\t * <b>Note:</b> not bound for \"hours\" click\n\t * @param {Event} event\n\t */\n\t_sliderClick() {\n\t\tthis.collapseHoursSlider();\n\t}\n\n\t/**\n\t * PRIVATE METHODS\n\t */\n\n\t /**\n\t * Stores a preview of the calendar selection to restore it\n\t * when the user switches between the time and date view.\n\t * <br><br>\n\t * <b>Note:</b> this is needed, because the <code>value</code> is not immediately updated on user interaction,\n\t * but only after the user presses the <code>sumbit</code> button.\n\t */\n\tstoreCalendarSelection() {\n\t\tthis._calendarPreview = {\n\t\t\ttimestamp: this._calendar.timestamp,\n\t\t\tdates: this._calendar.selectedDates,\n\t\t};\n\t}\n\n\t/**\n\t * Stores the <code>value</code> when the picker opens to compare with the <code>value</code>,\n\t * selected by any user interaction and fire the <code>change</code> event, if they differ.\n\t */\n\tstorePreviousValue() {\n\t\tthis.previousValue = this.value;\n\t}\n\n\t/**\n\t * Normalizes the current <code>formatPattern</code>.\n\t *\n\t * Fallbacks to the default <code>formatPattern</code> according to the locale when:\n\t * - no format is set at all\n\t * - the format does not include hours\n\t *\n\t * @param {string} pattern The current <code>formatPattern</code>\n\t * @returns {string}\n\t */\n\tnormalizePattern(pattern) {\n\t\tconst hasHours = !!pattern.match(/H/i);\n\t\tconst fallback = !pattern || !hasHours;\n\n\t\treturn fallback ? LocaleData.getInstance(getLocale()).getCombinedDateTimePattern(\"medium\", \"medium\", this._primaryCalendarType) : pattern;\n\t}\n\n\t/**\n\t * Expands the \"hours\" time slider.\n\t */\n\texpandHoursSlider() {\n\t\tthis._hoursCollapsed = false;\n\t}\n\n\t/**\n\t * Collapses the \"hours\" time slider.\n\t */\n\tcollapseHoursSlider() {\n\t\tthis._hoursCollapsed = true;\n\t}\n\n\tasync getHoursSlider() {\n\t\treturn (await this.getPicker()).querySelector(\".ui5-dt-hours-wheel\");\n\t}\n\n\tasync getMinutesSlider() {\n\t\treturn (await this.getPicker()).querySelector(\".ui5-dt-minutes-wheel\");\n\t}\n\n\tasync getSecondsSlider() {\n\t\treturn (await this.getPicker()).querySelector(\".ui5-dt-seconds-wheel\");\n\t}\n\n\tasync getPeriodsSlider() {\n\t\treturn (await this.getPicker()).querySelector(\".ui5-dt-periods-wheel\");\n\t}\n\n\tasync getPicker() {\n\t\tconst staticAreaItem = await this.getStaticAreaItemDomRef();\n\t\treturn staticAreaItem.querySelector(\"ui5-responsive-popover\");\n\t}\n\n\tasync getCurrentDateTime() {\n\t\t// the time set in the timepicker\n\t\tconst selectedTime = new Date();\n\t\tconst timeValues = await this.getTimePickerValues();\n\n\t\tselectedTime.setHours(timeValues.hours);\n\t\tselectedTime.setMinutes(timeValues.minutes);\n\t\tselectedTime.setSeconds(timeValues.seconds);\n\n\t\t// the date set in the calendar\n\t\tconst currentCalendarValue = this.getFormat().format(\n\t\t\tnew Date(CalendarDate.fromTimestamp(\n\t\t\t\tthis._calTimestamp * 1000,\n\t\t\t\tthis._primaryCalendarType\n\t\t\t).valueOf()),\n\t\t\ttrue\n\t\t);\n\n\t\t// merge both the date and time\n\t\tconst selectedDate = this.getFormat().parse(currentCalendarValue) || selectedTime;\n\t\tselectedDate.setHours(selectedTime.getHours());\n\t\tselectedDate.setMinutes(selectedTime.getMinutes());\n\t\tselectedDate.setSeconds(selectedTime.getSeconds());\n\n\t\treturn selectedDate;\n\t}\n\n\tasync getTimePickerValues() {\n\t\tconst secondsSlider = await this.getSecondsSlider();\n\t\tconst minutesSlider = await this.getMinutesSlider();\n\t\tconst hoursSlider = await this.getHoursSlider();\n\t\tconst periodsSlider = await this.getPeriodsSlider();\n\n\t\tlet hours = hoursSlider ? hoursSlider.value : this._hoursConfig.minHour.toString();\n\t\tconst minutes = minutesSlider ? minutesSlider.value : \"0\";\n\t\tconst seconds = secondsSlider ? secondsSlider.value : \"0\";\n\t\tconst period = periodsSlider ? periodsSlider.value : this.periodsArray[0];\n\n\t\tif (period === this.periodsArray[0]) { // AM\n\t\t\thours = hours === \"12\" ? 0 : hours;\n\t\t}\n\n\t\tif (period === this.periodsArray[1]) { // PM\n\t\t\thours = hours === \"12\" ? hours : hours * 1 + 12;\n\t\t}\n\n\t\treturn {\n\t\t\thours,\n\t\t\tminutes,\n\t\t\tseconds,\n\t\t\tperiod,\n\t\t};\n\t}\n\n\t/**\n\t * Sets hours, minutes, seconds and period according to the current <code>value</code>\n\t * or the current time if the <code>value</code> is not set.\n\t */\n\tasync setSlidersValue() {\n\t\tconst currentDate = this.value ? this.getFormat().parse(this.value) : new Date();\n\n\t\tif (currentDate) {\n\t\t\tawait this.setHours(currentDate.getHours());\n\t\t\tawait this.setMinutes(currentDate.getMinutes());\n\t\t\tawait this.setSeconds(currentDate.getSeconds());\n\t\t\tawait this.setPeriod(currentDate.getHours());\n\t\t}\n\t}\n\n\tasync setHours(value) {\n\t\tlet tempValue = \"\";\n\t\tconst hoursSlider = await this.getHoursSlider();\n\t\tconst config = this._hoursConfig;\n\n\t\tif (hoursSlider) {\n\t\t\tif (config.isTwelveHoursFormat && value > config.maxHour) {\n\t\t\t\ttempValue = value - 12;\n\t\t\t} else if (config.isTwelveHoursFormat && value < config.minHour) {\n\t\t\t\ttempValue = value + 12;\n\t\t\t} else {\n\t\t\t\ttempValue = value;\n\t\t\t}\n\n\t\t\thoursSlider.value = this.normalizeDigit(tempValue);\n\t\t}\n\t}\n\n\tasync setMinutes(value) {\n\t\tconst minutesSlider = await this.getMinutesSlider();\n\n\t\tif (minutesSlider) {\n\t\t\tminutesSlider.value = this.normalizeDigit(value);\n\t\t}\n\t}\n\n\tasync setSeconds(value) {\n\t\tconst secondsSlider = await this.getSecondsSlider();\n\n\t\tif (secondsSlider) {\n\t\t\tsecondsSlider.value = this.normalizeDigit(value);\n\t\t}\n\t}\n\n\tasync setPeriod(hours) {\n\t\tconst config = this._hoursConfig;\n\t\tconst periodsSlider = await this.getPeriodsSlider();\n\n\t\tif (!periodsSlider) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (config.isTwelveHoursFormat) {\n\t\t\tif (config.minHour === 1) {\n\t\t\t\tperiodsSlider.value = hours >= config.maxHour ? this.periodsArray[1] : this.periodsArray[0];\n\t\t\t} else {\n\t\t\t\tperiodsSlider.value = (hours > config.maxHour || hours === config.minHour) ? this.periodsArray[1] : this.periodsArray[0];\n\t\t\t}\n\t\t}\n\t}\n\n\tnormalizeDigit(value) {\n\t\tconst valueAsString = value.toString();\n\t\treturn valueAsString.length === 1 ? `0${value}` : valueAsString;\n\t}\n\n\tisTimeControlContained() {\n\t\tconst format = this.getFormat().aFormatArray;\n\t\treturn getTimeControlsByFormat(format, this._hoursConfig);\n\t}\n\n\tupdateHoursFormatConfig() {\n\t\tconst formatArray = this.getFormat().aFormatArray;\n\n\t\tif (formatArray.length < 7) {\n\t\t\treturn; // does not contain time data\n\t\t}\n\n\t\tconst config = getHoursConfigByFormat(formatArray[6].type);\n\t\tthis._hoursConfig.minHour = config.minHour;\n\t\tthis._hoursConfig.maxHour = config.maxHour;\n\t\tthis._hoursConfig.isTwelveHoursFormat = config.isTwelveHoursFormat;\n\t}\n}\n\nDateTimePicker.define();\n\nexport default DateTimePicker;\n"]},"metadata":{},"sourceType":"module"}