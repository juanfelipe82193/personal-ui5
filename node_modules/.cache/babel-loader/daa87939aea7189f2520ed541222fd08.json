{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';\nimport { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';\nimport { ValueState } from '@ui5/webcomponents-react/lib/ValueState';\nimport React, { forwardRef, useMemo } from 'react';\nimport { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';\nimport { CssSizeVariables } from '@ui5/webcomponents-react-base/lib/CssSizeVariables';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nvar styles = {\n  progressBarRemaining: {\n    height: '100%',\n    flexGrow: '1',\n    minWidth: '0',\n    display: 'flex',\n    alignItems: 'center'\n  },\n  progressBarTextRight: {\n    marginLeft: '0.375rem'\n  },\n  progressBarTextLeft: {\n    marginRight: '0.375rem'\n  },\n  wrapper: {\n    display: 'flex',\n    flexDirection: 'row',\n    WebkitFlexDirection: 'row',\n    boxSizing: 'border-box',\n    outline: 'none',\n    background: ThemingParameters.sapField_Background,\n    width: '100%',\n    height: CssSizeVariables.sapWcrProgressIndicatorHeight,\n    minWidth: '4rem',\n    minHeight: '1rem',\n    padding: '0',\n    margin: CssSizeVariables.sapWcrProgressIndicatorMargin,\n    border: \"1px solid \".concat(ThemingParameters.sapField_BorderColor),\n    borderRadius: '0.5rem',\n    overflow: 'hidden'\n  },\n  progressbar: {\n    transition: 'flex-basis 1s',\n    justifyContent: 'flex-end',\n    display: 'flex',\n    alignItems: 'center'\n  },\n  progressBarText: {\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontSize: ThemingParameters.sapFontSmallSize,\n    fontWeight: 'normal'\n  },\n  progressBarTextColorLow: {\n    color: ThemingParameters.sapTextColor\n  },\n  progressBarTextColorHigh: {\n    color: ThemingParameters.sapContent_ContrastTextColor\n  },\n  stateNone: {\n    backgroundColor: ThemingParameters.sapNeutralElementColor\n  },\n  stateSuccess: {\n    backgroundColor: ThemingParameters.sapPositiveElementColor\n  },\n  stateWarning: {\n    backgroundColor: ThemingParameters.sapCriticalElementColor\n  },\n  stateError: {\n    backgroundColor: ThemingParameters.sapNegativeElementColor\n  },\n  stateInformation: {\n    backgroundColor: ThemingParameters.sapInformativeElementColor\n  }\n};\nvar useStyles = createComponentStyles(styles, {\n  name: 'ProgressIndicator'\n});\n/**\n * <code>import { ProgressIndicator } from '@ui5/webcomponents-react/lib/ProgressIndicator';</code>\n */\n\nvar ProgressIndicator = forwardRef(function (props, ref) {\n  var percentValue = props.percentValue,\n      displayValue = props.displayValue,\n      width = props.width,\n      height = props.height,\n      className = props.className,\n      style = props.style,\n      tooltip = props.tooltip,\n      state = props.state,\n      slot = props.slot;\n  var classes = useStyles(); // CSS classes\n\n  var wrapperClasses = StyleClassHelper.of(classes.wrapper);\n  var progressBarClasses = StyleClassHelper.of(classes.progressbar);\n  var progressBarTextClasses = StyleClassHelper.of(classes.progressBarText);\n  var progressBarStyle = {\n    flexBasis: \"\".concat(percentValue, \"%\")\n  }; // change text color based on percent value\n\n  if (percentValue <= 50) {\n    progressBarTextClasses.put(classes.progressBarTextColorLow);\n    progressBarTextClasses.put(classes.progressBarTextRight);\n  } else {\n    progressBarTextClasses.put(classes.progressBarTextColorHigh);\n    progressBarTextClasses.put(classes.progressBarTextLeft);\n  }\n\n  var progressBarTextSpan = /*#__PURE__*/React.createElement(\"span\", {\n    className: progressBarTextClasses.valueOf()\n  }, \" \", displayValue, \" \");\n  progressBarClasses.put(classes[\"state\".concat(state)]);\n\n  if (className) {\n    wrapperClasses.put(className);\n  }\n\n  var progressBarContainerStyle = useMemo(function () {\n    return _objectSpread(_objectSpread({}, style), {}, {\n      width: width,\n      height: height\n    });\n  }, [style, width, height]);\n  var passThroughProps = usePassThroughHtmlProps(props);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref,\n    className: wrapperClasses.valueOf(),\n    style: progressBarContainerStyle,\n    title: tooltip,\n    slot: slot\n  }, passThroughProps), /*#__PURE__*/React.createElement(\"div\", {\n    className: progressBarClasses.valueOf(),\n    style: progressBarStyle\n  }, percentValue <= 50 ? null : progressBarTextSpan), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.progressBarRemaining\n  }, percentValue <= 50 ? progressBarTextSpan : null));\n});\nProgressIndicator.displayName = 'ProgressIndicator';\nProgressIndicator.defaultProps = {\n  percentValue: 0,\n  displayValue: '',\n  width: 'auto',\n  height: '',\n  state: ValueState.None\n};\nexport { ProgressIndicator };","map":{"version":3,"sources":["../src/components/ProgressIndicator/ProgressIndicator.jss.ts","../src/components/ProgressIndicator/index.tsx"],"names":["styles","progressBarRemaining","height","flexGrow","minWidth","display","alignItems","progressBarTextRight","marginLeft","progressBarTextLeft","marginRight","wrapper","flexDirection","WebkitFlexDirection","boxSizing","outline","background","ThemingParameters","width","CssSizeVariables","minHeight","padding","margin","border","borderRadius","overflow","progressbar","transition","justifyContent","progressBarText","textOverflow","whiteSpace","fontFamily","fontSize","fontWeight","progressBarTextColorLow","color","sapTextColor","progressBarTextColorHigh","sapContent_ContrastTextColor","stateNone","backgroundColor","sapNeutralElementColor","stateSuccess","sapPositiveElementColor","stateWarning","sapCriticalElementColor","stateError","sapNegativeElementColor","stateInformation","sapInformativeElementColor","useStyles","createComponentStyles","name","ProgressIndicator","forwardRef","percentValue","displayValue","className","style","tooltip","state","slot","props","classes","wrapperClasses","StyleClassHelper","progressBarClasses","progressBarTextClasses","progressBarStyle","flexBasis","progressBarTextSpan","progressBarContainerStyle","useMemo","passThroughProps","usePassThroughHtmlProps","ValueState","None"],"mappings":"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","sourcesContent":["import { CssSizeVariables } from '@ui5/webcomponents-react-base/lib/CssSizeVariables';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\n\nconst styles = {\n  progressBarRemaining: {\n    height: '100%',\n    flexGrow: '1',\n    minWidth: '0',\n    display: 'flex',\n    alignItems: 'center'\n  },\n  progressBarTextRight: {\n    marginLeft: '0.375rem'\n  },\n  progressBarTextLeft: {\n    marginRight: '0.375rem'\n  },\n  wrapper: {\n    display: 'flex',\n    flexDirection: 'row',\n    WebkitFlexDirection: 'row',\n    boxSizing: 'border-box',\n    outline: 'none',\n    background: ThemingParameters.sapField_Background,\n    width: '100%',\n    height: CssSizeVariables.sapWcrProgressIndicatorHeight,\n    minWidth: '4rem',\n    minHeight: '1rem',\n    padding: '0',\n    margin: CssSizeVariables.sapWcrProgressIndicatorMargin,\n    border: `1px solid ${ThemingParameters.sapField_BorderColor}`,\n    borderRadius: '0.5rem',\n    overflow: 'hidden'\n  },\n  progressbar: {\n    transition: 'flex-basis 1s',\n    justifyContent: 'flex-end',\n    display: 'flex',\n    alignItems: 'center'\n  },\n  progressBarText: {\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n    whiteSpace: 'nowrap',\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontSize: ThemingParameters.sapFontSmallSize,\n    fontWeight: 'normal'\n  },\n  progressBarTextColorLow: {\n    color: ThemingParameters.sapTextColor\n  },\n  progressBarTextColorHigh: {\n    color: ThemingParameters.sapContent_ContrastTextColor\n  },\n  stateNone: {\n    backgroundColor: ThemingParameters.sapNeutralElementColor\n  },\n  stateSuccess: {\n    backgroundColor: ThemingParameters.sapPositiveElementColor\n  },\n  stateWarning: {\n    backgroundColor: ThemingParameters.sapCriticalElementColor\n  },\n  stateError: {\n    backgroundColor: ThemingParameters.sapNegativeElementColor\n  },\n  stateInformation: {\n    backgroundColor: ThemingParameters.sapInformativeElementColor\n  }\n};\n\nexport default styles;\n","import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';\nimport { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';\nimport { ValueState } from '@ui5/webcomponents-react/lib/ValueState';\nimport React, { FC, forwardRef, Ref, useMemo } from 'react';\nimport { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';\nimport { CommonProps } from '../../interfaces/CommonProps';\nimport styles from './ProgressIndicator.jss';\n\nexport interface ProgressIndicatorPropTypes extends CommonProps {\n  /*\n   * Percent value to be used\n   */\n  percentValue?: number;\n  /*\n   * Value to be displayed\n   */\n  displayValue?: string;\n\n  /*\n   * Specified width of component\n   */\n  width?: string;\n\n  /*\n   * Specified height of component\n   */\n  height?: string;\n\n  /*\n   * State of indicator (using ValueState)\n   */\n  state?: ValueState;\n}\n\nconst useStyles = createComponentStyles(styles, { name: 'ProgressIndicator' });\n\n/**\n * <code>import { ProgressIndicator } from '@ui5/webcomponents-react/lib/ProgressIndicator';</code>\n */\nconst ProgressIndicator: FC<ProgressIndicatorPropTypes> = forwardRef(\n  (props: ProgressIndicatorPropTypes, ref: Ref<HTMLDivElement>) => {\n    const { percentValue, displayValue, width, height, className, style, tooltip, state, slot } = props;\n\n    const classes = useStyles();\n\n    // CSS classes\n    const wrapperClasses = StyleClassHelper.of(classes.wrapper);\n    const progressBarClasses = StyleClassHelper.of(classes.progressbar);\n    const progressBarTextClasses = StyleClassHelper.of(classes.progressBarText);\n\n    const progressBarStyle = { flexBasis: `${percentValue}%` };\n\n    // change text color based on percent value\n    if (percentValue <= 50) {\n      progressBarTextClasses.put(classes.progressBarTextColorLow);\n      progressBarTextClasses.put(classes.progressBarTextRight);\n    } else {\n      progressBarTextClasses.put(classes.progressBarTextColorHigh);\n      progressBarTextClasses.put(classes.progressBarTextLeft);\n    }\n\n    const progressBarTextSpan = <span className={progressBarTextClasses.valueOf()}> {displayValue} </span>;\n\n    progressBarClasses.put(classes[`state${state}`]);\n\n    if (className) {\n      wrapperClasses.put(className);\n    }\n\n    const progressBarContainerStyle = useMemo(() => ({ ...style, width, height }), [style, width, height]);\n\n    const passThroughProps = usePassThroughHtmlProps(props);\n\n    return (\n      <div\n        ref={ref}\n        className={wrapperClasses.valueOf()}\n        style={progressBarContainerStyle}\n        title={tooltip}\n        slot={slot}\n        {...passThroughProps}\n      >\n        <div className={progressBarClasses.valueOf()} style={progressBarStyle}>\n          {percentValue <= 50 ? null : progressBarTextSpan}\n        </div>\n        <div className={classes.progressBarRemaining}>{percentValue <= 50 ? progressBarTextSpan : null}</div>\n      </div>\n    );\n  }\n);\n\nProgressIndicator.displayName = 'ProgressIndicator';\n\nProgressIndicator.defaultProps = {\n  percentValue: 0,\n  displayValue: '',\n  width: 'auto',\n  height: '',\n  state: ValueState.None\n};\n\nexport { ProgressIndicator };\n"]},"metadata":{},"sourceType":"module"}