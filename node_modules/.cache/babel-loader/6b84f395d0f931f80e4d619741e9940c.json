{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js';\n/**\n * Stores the StyleInfo object applied to a given AttributePart.\n * Used to unset existing values when a new StyleInfo object is applied.\n */\n\nconst previousStylePropertyCache = new WeakMap();\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the `styleInfo`\n * object and adds the property values as CSS properties. Property names with\n * dashes (`-`) are assumed to be valid CSS property names and set on the\n * element's style object using `setProperty()`. Names without dashes are\n * assumed to be camelCased JavaScript property names and set on the element's\n * style object using property assignment, allowing the style object to\n * translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo {StyleInfo}\n */\n\nexport const styleMap = directive(styleInfo => part => {\n  if (!(part instanceof AttributePart) || part instanceof PropertyPart || part.committer.name !== 'style' || part.committer.parts.length > 1) {\n    throw new Error('The `styleMap` directive must be used in the style attribute ' + 'and must be the only part in the attribute.');\n  }\n\n  const {\n    committer\n  } = part;\n  const {\n    style\n  } = committer.element;\n  let previousStyleProperties = previousStylePropertyCache.get(part);\n\n  if (previousStyleProperties === undefined) {\n    // Write static styles once\n    style.cssText = committer.strings.join(' ');\n    previousStylePropertyCache.set(part, previousStyleProperties = new Set());\n  } // Remove old properties that no longer exist in styleInfo\n  // We use forEach() instead of for-of so that re don't require down-level\n  // iteration.\n\n\n  previousStyleProperties.forEach(name => {\n    if (!(name in styleInfo)) {\n      previousStyleProperties.delete(name);\n\n      if (name.indexOf('-') === -1) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        style[name] = null;\n      } else {\n        style.removeProperty(name);\n      }\n    }\n  }); // Add or update properties\n\n  for (const name in styleInfo) {\n    previousStyleProperties.add(name);\n\n    if (name.indexOf('-') === -1) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      style[name] = styleInfo[name];\n    } else {\n      style.setProperty(name, styleInfo[name]);\n    }\n  }\n});","map":{"version":3,"sources":["../src/directives/style-map.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;AAcA,SAAQ,aAAR,EAAuB,SAAvB,EAAwC,YAAxC,QAA2D,gBAA3D;AAMA;;;;;AAIA,MAAM,0BAA0B,GAAG,IAAI,OAAJ,EAAnC;AAEA;;;;;;;;;;;;;;;;;;AAiBA,OAAO,MAAM,QAAQ,GAAG,SAAS,CAAE,SAAD,IAA2B,IAAD,IAAe;AACzE,MAAI,EAAE,IAAI,YAAY,aAAlB,KAAqC,IAAI,YAAY,YAArD,IACA,IAAI,CAAC,SAAL,CAAe,IAAf,KAAwB,OADxB,IACmC,IAAI,CAAC,SAAL,CAAe,KAAf,CAAqB,MAArB,GAA8B,CADrE,EACwE;AACtE,UAAM,IAAI,KAAJ,CACF,kEACA,6CAFE,CAAN;AAGD;;AAED,QAAM;AAAC,IAAA;AAAD,MAAc,IAApB;AACA,QAAM;AAAC,IAAA;AAAD,MAAU,SAAS,CAAC,OAA1B;AAEA,MAAI,uBAAuB,GAAG,0BAA0B,CAAC,GAA3B,CAA+B,IAA/B,CAA9B;;AAEA,MAAI,uBAAuB,KAAK,SAAhC,EAA2C;AACzC;AACA,IAAA,KAAK,CAAC,OAAN,GAAgB,SAAS,CAAC,OAAV,CAAkB,IAAlB,CAAuB,GAAvB,CAAhB;AACA,IAAA,0BAA0B,CAAC,GAA3B,CAA+B,IAA/B,EAAqC,uBAAuB,GAAG,IAAI,GAAJ,EAA/D;AACD,GAjBwE,CAmBzE;AACA;AACA;;;AACA,EAAA,uBAAuB,CAAC,OAAxB,CAAiC,IAAD,IAAS;AACvC,QAAI,EAAE,IAAI,IAAI,SAAV,CAAJ,EAA0B;AACxB,MAAA,uBAAwB,CAAC,MAAzB,CAAgC,IAAhC;;AACA,UAAI,IAAI,CAAC,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;AAC5B;AACC,QAAA,KAAa,CAAC,IAAD,CAAb,GAAsB,IAAtB;AACF,OAHD,MAGO;AACL,QAAA,KAAK,CAAC,cAAN,CAAqB,IAArB;AACD;AACF;AACF,GAVD,EAtByE,CAkCzE;;AACA,OAAK,MAAM,IAAX,IAAmB,SAAnB,EAA8B;AAC5B,IAAA,uBAAuB,CAAC,GAAxB,CAA4B,IAA5B;;AACA,QAAI,IAAI,CAAC,OAAL,CAAa,GAAb,MAAsB,CAAC,CAA3B,EAA8B;AAC5B;AACC,MAAA,KAAa,CAAC,IAAD,CAAb,GAAsB,SAAS,CAAC,IAAD,CAA/B;AACF,KAHD,MAGO;AACL,MAAA,KAAK,CAAC,WAAN,CAAkB,IAAlB,EAAwB,SAAS,CAAC,IAAD,CAAjC;AACD;AACF;AACF,CA5CgC,CAA1B","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part, PropertyPart} from '../lit-html.js';\n\nexport interface StyleInfo {\n  readonly [name: string]: string;\n}\n\n/**\n * Stores the StyleInfo object applied to a given AttributePart.\n * Used to unset existing values when a new StyleInfo object is applied.\n */\nconst previousStylePropertyCache = new WeakMap<AttributePart, Set<string>>();\n\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the `styleInfo`\n * object and adds the property values as CSS properties. Property names with\n * dashes (`-`) are assumed to be valid CSS property names and set on the\n * element's style object using `setProperty()`. Names without dashes are\n * assumed to be camelCased JavaScript property names and set on the element's\n * style object using property assignment, allowing the style object to\n * translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo {StyleInfo}\n */\nexport const styleMap = directive((styleInfo: StyleInfo) => (part: Part) => {\n  if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n      part.committer.name !== 'style' || part.committer.parts.length > 1) {\n    throw new Error(\n        'The `styleMap` directive must be used in the style attribute ' +\n        'and must be the only part in the attribute.');\n  }\n\n  const {committer} = part;\n  const {style} = committer.element as HTMLElement;\n\n  let previousStyleProperties = previousStylePropertyCache.get(part);\n\n  if (previousStyleProperties === undefined) {\n    // Write static styles once\n    style.cssText = committer.strings.join(' ');\n    previousStylePropertyCache.set(part, previousStyleProperties = new Set());\n  }\n\n  // Remove old properties that no longer exist in styleInfo\n  // We use forEach() instead of for-of so that re don't require down-level\n  // iteration.\n  previousStyleProperties.forEach((name) => {\n    if (!(name in styleInfo)) {\n      previousStyleProperties!.delete(name);\n      if (name.indexOf('-') === -1) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (style as any)[name] = null;\n      } else {\n        style.removeProperty(name);\n      }\n    }\n  });\n\n  // Add or update properties\n  for (const name in styleInfo) {\n    previousStyleProperties.add(name);\n    if (name.indexOf('-') === -1) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (style as any)[name] = styleInfo[name];\n    } else {\n      style.setProperty(name, styleInfo[name]);\n    }\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}