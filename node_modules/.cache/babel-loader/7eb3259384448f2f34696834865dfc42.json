{"ast":null,"code":"const generateTimeItemsArray = x => {\n  const array = [];\n\n  for (let i = 0; i < x; i++) {\n    let tempString = i.toString();\n\n    if (tempString.length === 1) {\n      tempString = `0${tempString}`;\n    }\n\n    array.push(tempString);\n  }\n\n  return array;\n};\n\nconst getHours = config => {\n  let hoursValueArray = [];\n\n  if (config.isTwelveHoursFormat) {\n    hoursValueArray = generateTimeItemsArray(12);\n  } else {\n    hoursValueArray = generateTimeItemsArray(24);\n  }\n\n  if (config.minHour === 1) {\n    for (let i = 0; i < hoursValueArray.length; i++) {\n      const tempValue = hoursValueArray[i] * 1 + 1;\n\n      if (tempValue.toString().length === 1) {\n        hoursValueArray[i] = `0${tempValue.toString()}`;\n      } else {\n        hoursValueArray[i] = tempValue.toString();\n      }\n    }\n  }\n\n  return hoursValueArray;\n};\n\nconst getMinutes = () => {\n  return generateTimeItemsArray(60);\n};\n\nconst getSeconds = () => {\n  return generateTimeItemsArray(60);\n};\n\nconst getHoursConfigByFormat = type => {\n  const config = {};\n\n  if (type === \"hour0_23\") {\n    config.minHour = 0;\n    config.maxHour = 23;\n    config.isTwelveHoursFormat = false;\n  } else if (type === \"hour1_24\") {\n    config.minHour = 1;\n    config.maxHour = 24;\n    config.isTwelveHoursFormat = false;\n  } else if (type === \"hour0_11\") {\n    config.minHour = 0;\n    config.maxHour = 11;\n    config.isTwelveHoursFormat = true;\n  } else if (type === \"hour1_12\") {\n    config.minHour = 1;\n    config.maxHour = 12;\n    config.isTwelveHoursFormat = true;\n  }\n\n  return config;\n};\n\nconst getTimeControlsByFormat = (formatArray, hoursConfig) => {\n  const timeControls = [false, false, false, false]; // hours, minutes, seconds and am/pm\n\n  for (let i = 0; i < formatArray.length; i++) {\n    if (hoursConfig.maxHour !== 0) {\n      timeControls[0] = true;\n    }\n\n    if (hoursConfig.maxHour !== 0 && hoursConfig.isTwelveHoursFormat) {\n      timeControls[0] = true;\n    }\n\n    if (formatArray[i].type === \"minute\") {\n      timeControls[1] = true;\n    }\n\n    if (formatArray[i].type === \"second\") {\n      timeControls[2] = true;\n    }\n\n    if (formatArray[i].type === \"amPmMarker\") {\n      timeControls[3] = true;\n    }\n  }\n\n  return timeControls;\n};\n\nexport { getHours, getMinutes, getSeconds, getHoursConfigByFormat, getTimeControlsByFormat };","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/@ui5/webcomponents/dist/timepicker-utils/TimeSlider.js"],"names":["generateTimeItemsArray","x","array","i","tempString","toString","length","push","getHours","config","hoursValueArray","isTwelveHoursFormat","minHour","tempValue","getMinutes","getSeconds","getHoursConfigByFormat","type","maxHour","getTimeControlsByFormat","formatArray","hoursConfig","timeControls"],"mappings":"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","sourcesContent":["const generateTimeItemsArray = x => {\n\tconst array = [];\n\tfor (let i = 0; i < x; i++) {\n\t\tlet tempString = i.toString();\n\t\tif (tempString.length === 1) {\n\t\t\ttempString = `0${tempString}`;\n\t\t}\n\n\t\tarray.push(tempString);\n\t}\n\n\treturn array;\n};\n\nconst getHours = config => {\n\tlet hoursValueArray = [];\n\n\tif (config.isTwelveHoursFormat) {\n\t\thoursValueArray = generateTimeItemsArray(12);\n\t} else {\n\t\thoursValueArray = generateTimeItemsArray(24);\n\t}\n\n\tif (config.minHour === 1) {\n\t\tfor (let i = 0; i < hoursValueArray.length; i++) {\n\t\t\tconst tempValue = hoursValueArray[i] * 1 + 1;\n\n\t\t\tif (tempValue.toString().length === 1) {\n\t\t\t\thoursValueArray[i] = `0${tempValue.toString()}`;\n\t\t\t} else {\n\t\t\t\thoursValueArray[i] = tempValue.toString();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn hoursValueArray;\n};\n\nconst getMinutes = () => {\n\treturn generateTimeItemsArray(60);\n};\n\nconst getSeconds = () => {\n\treturn generateTimeItemsArray(60);\n};\n\nconst getHoursConfigByFormat = type => {\n\tconst config = {};\n\n\tif (type === \"hour0_23\") {\n\t\tconfig.minHour = 0;\n\t\tconfig.maxHour = 23;\n\t\tconfig.isTwelveHoursFormat = false;\n\t} else if (type === \"hour1_24\") {\n\t\tconfig.minHour = 1;\n\t\tconfig.maxHour = 24;\n\t\tconfig.isTwelveHoursFormat = false;\n\t} else if (type === \"hour0_11\") {\n\t\tconfig.minHour = 0;\n\t\tconfig.maxHour = 11;\n\t\tconfig.isTwelveHoursFormat = true;\n\t} else if (type === \"hour1_12\") {\n\t\tconfig.minHour = 1;\n\t\tconfig.maxHour = 12;\n\t\tconfig.isTwelveHoursFormat = true;\n\t}\n\n\treturn config;\n};\n\nconst getTimeControlsByFormat = (formatArray, hoursConfig) => {\n\tconst timeControls = [false, false, false, false]; // hours, minutes, seconds and am/pm\n\n\tfor (let i = 0; i < formatArray.length; i++) {\n\t\tif (hoursConfig.maxHour !== 0) {\n\t\t\ttimeControls[0] = true;\n\t\t}\n\t\tif (hoursConfig.maxHour !== 0 && hoursConfig.isTwelveHoursFormat) {\n\t\t\ttimeControls[0] = true;\n\t\t}\n\t\tif (formatArray[i].type === \"minute\") {\n\t\t\ttimeControls[1] = true;\n\t\t}\n\t\tif (formatArray[i].type === \"second\") {\n\t\t\ttimeControls[2] = true;\n\t\t}\n\t\tif (formatArray[i].type === \"amPmMarker\") {\n\t\t\ttimeControls[3] = true;\n\t\t}\n\t}\n\n\treturn timeControls;\n};\n\nexport {\n\tgetHours,\n\tgetMinutes,\n\tgetSeconds,\n\tgetHoursConfigByFormat,\n\tgetTimeControlsByFormat,\n};\n"]},"metadata":{},"sourceType":"module"}