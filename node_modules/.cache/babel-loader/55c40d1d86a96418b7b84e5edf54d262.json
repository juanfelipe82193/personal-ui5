{"ast":null,"code":"import UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport ItemNavigation from \"@ui5/webcomponents-base/dist/delegate/ItemNavigation.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport { fetchI18nBundle, getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport ResizeHandler from \"@ui5/webcomponents-base/dist/delegate/ResizeHandler.js\";\nimport { SEGMENTEDBUTTON_ARIA_DESCRIPTION } from \"./generated/i18n/i18n-defaults.js\";\nimport ToggleButton from \"./ToggleButton.js\"; // Template\n\nimport SegmentedButtonTemplate from \"./generated/templates/SegmentedButtonTemplate.lit.js\"; // Styles\n\nimport SegmentedButtonCss from \"./generated/themes/SegmentedButton.css.js\";\n/**\n * @public\n */\n\nconst metadata = {\n  tag: \"ui5-segmentedbutton\",\n  properties:\n  /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */\n  {},\n  managedSlots: true,\n  slots:\n  /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */\n  {\n    /**\n     * Defines the buttons of <code>ui5-segmentedbutton</code>.\n     * <br><br>\n     * <b>Note:</b> Multiple buttons are allowed.\n     * <br><br>\n     * <b>Note:</b> Use the <code>ui5-togglebutton</code> for the intended design.\n     * @type {HTMLElement[]}\n     * @slot\n     * @public\n     */\n    \"default\": {\n      propertyName: \"buttons\",\n      type: HTMLElement\n    }\n  },\n  events:\n  /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */\n  {\n    /**\n     * Fired when the selected button changes.\n     *\n     * @event\n     * @param {HTMLElement} selectedButton the pressed button.\n     * @public\n     */\n    selectionChange: {\n      detail: {\n        selectedButton: {\n          type: HTMLElement\n        }\n      }\n    }\n  }\n};\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n *\n * The <code>ui5-segmentedbutton</code> shows a group of buttons. When the user clicks or taps\n * one of the buttons, it stays in a pressed state. It automatically resizes the buttons\n * to fit proportionally within the component. When no width is set, the component uses the available width.\n * <br><br>\n * <b>Note:</b> There can be just one selected <code>button</code> at a time.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/SegmentedButton\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.SegmentedButton\n * @extends sap.ui.webcomponents.base.UI5Element\n * @tagname ui5-segmentedbutton\n * @since 1.0.0-rc.6\n * @public\n */\n\nclass SegmentedButton extends UI5Element {\n  static get metadata() {\n    return metadata;\n  }\n\n  static get render() {\n    return litRender;\n  }\n\n  static get template() {\n    return SegmentedButtonTemplate;\n  }\n\n  static get styles() {\n    return SegmentedButtonCss;\n  }\n\n  static async onDefine() {\n    await Promise.all([fetchI18nBundle(\"@ui5/webcomponents\"), ToggleButton.define()]);\n  }\n\n  constructor() {\n    super();\n    this.initItemNavigation();\n    this.absoluteWidthSet = false; // set to true whenever we set absolute width to the component\n\n    this.percentageWidthSet = false; //  set to true whenever we set 100% width to the component\n\n    this.hasPreviouslyFocusedItem = false;\n    this._handleResizeBound = this._handleResize.bind(this);\n    this.i18nBundle = getI18nBundle(\"@ui5/webcomponents\");\n  }\n\n  onEnterDOM() {\n    ResizeHandler.register(this.parentNode, this._handleResizeBound);\n  }\n\n  onExitDOM() {\n    ResizeHandler.deregister(this.parentNode, this._handleResizeBound);\n  }\n\n  onBeforeRendering() {\n    this.normalizeSelection();\n  }\n\n  async onAfterRendering() {\n    await Promise.all(this.buttons.map(button => button._waitForDomRef));\n    this.widths = this.buttons.map(button => button.offsetWidth);\n  }\n\n  initItemNavigation() {\n    this._itemNavigation = new ItemNavigation(this);\n\n    this._itemNavigation.getItemsCallback = () => this.getSlottedNodes(\"buttons\");\n  }\n\n  normalizeSelection() {\n    this._selectedButton = this.buttons.filter(button => button.pressed).pop();\n\n    if (this._selectedButton) {\n      this.buttons.forEach(button => {\n        button.pressed = false;\n      });\n      this._selectedButton.pressed = true;\n    }\n  }\n\n  _onclick(event) {\n    if (event.target.disabled || event.target === this.getDomRef()) {\n      return;\n    }\n\n    if (event.target !== this._selectedButton) {\n      if (this._selectedButton) {\n        this._selectedButton.pressed = false;\n      }\n\n      this._selectedButton = event.target;\n      this.fireEvent(\"selectionChange\", {\n        selectedButton: this._selectedButton\n      });\n    }\n\n    this._selectedButton.pressed = true;\n\n    this._itemNavigation.update(this._selectedButton);\n\n    return this;\n  }\n\n  _onfocusin(event) {\n    // If the component was previously focused,\n    // update the ItemNavigation to sync butons` tabindex values\n    if (this.hasPreviouslyFocusedItem) {\n      this._itemNavigation.update(event.target);\n\n      return;\n    } // If the component is focused for the first time\n    // focus the selected item if such present\n\n\n    if (this.selectedButton) {\n      this.selectedButton.focus();\n\n      this._itemNavigation.update(this._selectedButton);\n\n      this.hasPreviouslyFocusedItem = true;\n    }\n  }\n\n  _handleResize() {\n    const parentWidth = this.parentNode.offsetWidth;\n\n    if (!this.style.width || this.percentageWidthSet) {\n      this.style.width = `${Math.max(...this.widths) * this.buttons.length}px`;\n      this.absoluteWidthSet = true;\n    }\n\n    this.buttons.forEach(button => {\n      button.style.width = \"100%\";\n    });\n\n    if (parentWidth <= this.offsetWidth && this.absoluteWidthSet) {\n      this.style.width = \"100%\";\n      this.percentageWidthSet = true;\n    }\n  }\n  /**\n   * Currently selected button.\n   *\n   * @readonly\n   * @type { ui5-togglebutton }\n   * @public\n   */\n\n\n  get selectedButton() {\n    return this._selectedButton;\n  }\n\n  get ariaDescription() {\n    return this.i18nBundle.getText(SEGMENTEDBUTTON_ARIA_DESCRIPTION);\n  }\n\n}\n\nSegmentedButton.define();\nexport default SegmentedButton;","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/@ui5/webcomponents/dist/SegmentedButton.js"],"names":["UI5Element","ItemNavigation","litRender","fetchI18nBundle","getI18nBundle","ResizeHandler","SEGMENTEDBUTTON_ARIA_DESCRIPTION","ToggleButton","SegmentedButtonTemplate","SegmentedButtonCss","metadata","tag","properties","managedSlots","slots","propertyName","type","HTMLElement","events","selectionChange","detail","selectedButton","SegmentedButton","render","template","styles","onDefine","Promise","all","define","constructor","initItemNavigation","absoluteWidthSet","percentageWidthSet","hasPreviouslyFocusedItem","_handleResizeBound","_handleResize","bind","i18nBundle","onEnterDOM","register","parentNode","onExitDOM","deregister","onBeforeRendering","normalizeSelection","onAfterRendering","buttons","map","button","_waitForDomRef","widths","offsetWidth","_itemNavigation","getItemsCallback","getSlottedNodes","_selectedButton","filter","pressed","pop","forEach","_onclick","event","target","disabled","getDomRef","fireEvent","update","_onfocusin","focus","parentWidth","style","width","Math","max","length","ariaDescription","getText"],"mappings":"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","sourcesContent":["import UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport ItemNavigation from \"@ui5/webcomponents-base/dist/delegate/ItemNavigation.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport { fetchI18nBundle, getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport ResizeHandler from \"@ui5/webcomponents-base/dist/delegate/ResizeHandler.js\";\nimport { SEGMENTEDBUTTON_ARIA_DESCRIPTION } from \"./generated/i18n/i18n-defaults.js\";\nimport ToggleButton from \"./ToggleButton.js\";\n\n// Template\nimport SegmentedButtonTemplate from \"./generated/templates/SegmentedButtonTemplate.lit.js\";\n\n// Styles\nimport SegmentedButtonCss from \"./generated/themes/SegmentedButton.css.js\";\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-segmentedbutton\",\n\tproperties: /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */  {},\n\tmanagedSlots: true,\n\tslots: /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */ {\n\n\t\t/**\n\t\t * Defines the buttons of <code>ui5-segmentedbutton</code>.\n\t\t * <br><br>\n\t\t * <b>Note:</b> Multiple buttons are allowed.\n\t\t * <br><br>\n\t\t * <b>Note:</b> Use the <code>ui5-togglebutton</code> for the intended design.\n\t\t * @type {HTMLElement[]}\n\t\t * @slot\n\t\t * @public\n\t\t */\n\t\t\"default\": {\n\t\t\tpropertyName: \"buttons\",\n\t\t\ttype: HTMLElement,\n\t\t},\n\t},\n\tevents: /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */ {\n\n\t\t/**\n\t\t * Fired when the selected button changes.\n\t\t *\n\t\t * @event\n\t\t * @param {HTMLElement} selectedButton the pressed button.\n\t\t * @public\n\t\t */\n\t\tselectionChange: {\n\t\t\tdetail: {\n\t\t\t\tselectedButton: { type: HTMLElement },\n\t\t\t},\n\t\t},\n\t},\n};\n\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n *\n * The <code>ui5-segmentedbutton</code> shows a group of buttons. When the user clicks or taps\n * one of the buttons, it stays in a pressed state. It automatically resizes the buttons\n * to fit proportionally within the component. When no width is set, the component uses the available width.\n * <br><br>\n * <b>Note:</b> There can be just one selected <code>button</code> at a time.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/SegmentedButton\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.SegmentedButton\n * @extends sap.ui.webcomponents.base.UI5Element\n * @tagname ui5-segmentedbutton\n * @since 1.0.0-rc.6\n * @public\n */\nclass SegmentedButton extends UI5Element {\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get render() {\n\t\treturn litRender;\n\t}\n\n\tstatic get template() {\n\t\treturn SegmentedButtonTemplate;\n\t}\n\n\tstatic get styles() {\n\t\treturn SegmentedButtonCss;\n\t}\n\n\tstatic async onDefine() {\n\t\tawait Promise.all([\n\t\t\tfetchI18nBundle(\"@ui5/webcomponents\"),\n\t\t\tToggleButton.define(),\n\t\t]);\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.initItemNavigation();\n\n\t\tthis.absoluteWidthSet = false; // set to true whenever we set absolute width to the component\n\t\tthis.percentageWidthSet = false; //  set to true whenever we set 100% width to the component\n\t\tthis.hasPreviouslyFocusedItem = false;\n\n\t\tthis._handleResizeBound = this._handleResize.bind(this);\n\t\tthis.i18nBundle = getI18nBundle(\"@ui5/webcomponents\");\n\t}\n\n\tonEnterDOM() {\n\t\tResizeHandler.register(this.parentNode, this._handleResizeBound);\n\t}\n\n\tonExitDOM() {\n\t\tResizeHandler.deregister(this.parentNode, this._handleResizeBound);\n\t}\n\n\tonBeforeRendering() {\n\t\tthis.normalizeSelection();\n\t}\n\n\tasync onAfterRendering() {\n\t\tawait Promise.all(this.buttons.map(button => button._waitForDomRef));\n\t\tthis.widths = this.buttons.map(button => button.offsetWidth);\n\t}\n\n\tinitItemNavigation() {\n\t\tthis._itemNavigation = new ItemNavigation(this);\n\n\t\tthis._itemNavigation.getItemsCallback = () => this.getSlottedNodes(\"buttons\");\n\t}\n\n\tnormalizeSelection() {\n\t\tthis._selectedButton = this.buttons.filter(button => button.pressed).pop();\n\n\t\tif (this._selectedButton) {\n\t\t\tthis.buttons.forEach(button => {\n\t\t\t\tbutton.pressed = false;\n\t\t\t});\n\t\t\tthis._selectedButton.pressed = true;\n\t\t}\n\t}\n\n\t_onclick(event) {\n\t\tif (event.target.disabled || event.target === this.getDomRef()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (event.target !== this._selectedButton) {\n\t\t\tif (this._selectedButton) {\n\t\t\t\tthis._selectedButton.pressed = false;\n\t\t\t}\n\t\t\tthis._selectedButton = event.target;\n\t\t\tthis.fireEvent(\"selectionChange\", {\n\t\t\t\tselectedButton: this._selectedButton,\n\t\t\t});\n\t\t}\n\n\t\tthis._selectedButton.pressed = true;\n\t\tthis._itemNavigation.update(this._selectedButton);\n\n\t\treturn this;\n\t}\n\n\t_onfocusin(event) {\n\t\t// If the component was previously focused,\n\t\t// update the ItemNavigation to sync butons` tabindex values\n\t\tif (this.hasPreviouslyFocusedItem) {\n\t\t\tthis._itemNavigation.update(event.target);\n\t\t\treturn;\n\t\t}\n\n\t\t// If the component is focused for the first time\n\t\t// focus the selected item if such present\n\t\tif (this.selectedButton) {\n\t\t\tthis.selectedButton.focus();\n\t\t\tthis._itemNavigation.update(this._selectedButton);\n\t\t\tthis.hasPreviouslyFocusedItem = true;\n\t\t}\n\t}\n\n\t_handleResize() {\n\t\tconst parentWidth = this.parentNode.offsetWidth;\n\n\t\tif (!this.style.width || this.percentageWidthSet) {\n\t\t\tthis.style.width = `${Math.max(...this.widths) * this.buttons.length}px`;\n\t\t\tthis.absoluteWidthSet = true;\n\t\t}\n\n\t\tthis.buttons.forEach(button => {\n\t\t\tbutton.style.width = \"100%\";\n\t\t});\n\n\t\tif (parentWidth <= this.offsetWidth && this.absoluteWidthSet) {\n\t\t\tthis.style.width = \"100%\";\n\t\t\tthis.percentageWidthSet = true;\n\t\t}\n\t}\n\n\t/**\n\t * Currently selected button.\n\t *\n\t * @readonly\n\t * @type { ui5-togglebutton }\n\t * @public\n\t */\n\tget selectedButton() {\n\t\treturn this._selectedButton;\n\t}\n\n\tget ariaDescription() {\n\t\treturn this.i18nBundle.getText(SEGMENTEDBUTTON_ARIA_DESCRIPTION);\n\t}\n}\n\nSegmentedButton.define();\n\nexport default SegmentedButton;\n"]},"metadata":{},"sourceType":"module"}