{"ast":null,"code":"import _toConsumableArray from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _assertThisInitialized from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _createClass from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport ItemNavigation from \"@ui5/webcomponents-base/dist/delegate/ItemNavigation.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport { fetchI18nBundle, getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport ResizeHandler from \"@ui5/webcomponents-base/dist/delegate/ResizeHandler.js\";\nimport { SEGMENTEDBUTTON_ARIA_DESCRIPTION } from \"./generated/i18n/i18n-defaults.js\";\nimport ToggleButton from \"./ToggleButton.js\"; // Template\n\nimport SegmentedButtonTemplate from \"./generated/templates/SegmentedButtonTemplate.lit.js\"; // Styles\n\nimport SegmentedButtonCss from \"./generated/themes/SegmentedButton.css.js\";\n/**\n * @public\n */\n\nvar metadata = {\n  tag: \"ui5-segmentedbutton\",\n  properties:\n  /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */\n  {},\n  managedSlots: true,\n  slots:\n  /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */\n  {\n    /**\n     * Defines the buttons of <code>ui5-segmentedbutton</code>.\n     * <br><br>\n     * <b>Note:</b> Multiple buttons are allowed.\n     * <br><br>\n     * <b>Note:</b> Use the <code>ui5-togglebutton</code> for the intended design.\n     * @type {HTMLElement[]}\n     * @slot\n     * @public\n     */\n    \"default\": {\n      propertyName: \"buttons\",\n      type: HTMLElement\n    }\n  },\n  events:\n  /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */\n  {\n    /**\n     * Fired when the selected button changes.\n     *\n     * @event\n     * @param {HTMLElement} selectedButton the pressed button.\n     * @public\n     */\n    selectionChange: {\n      detail: {\n        selectedButton: {\n          type: HTMLElement\n        }\n      }\n    }\n  }\n};\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n *\n * The <code>ui5-segmentedbutton</code> shows a group of buttons. When the user clicks or taps\n * one of the buttons, it stays in a pressed state. It automatically resizes the buttons\n * to fit proportionally within the component. When no width is set, the component uses the available width.\n * <br><br>\n * <b>Note:</b> There can be just one selected <code>button</code> at a time.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/SegmentedButton\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.SegmentedButton\n * @extends sap.ui.webcomponents.base.UI5Element\n * @tagname ui5-segmentedbutton\n * @since 1.0.0-rc.6\n * @public\n */\n\nvar SegmentedButton = /*#__PURE__*/function (_UI5Element) {\n  _inherits(SegmentedButton, _UI5Element);\n\n  var _super = _createSuper(SegmentedButton);\n\n  _createClass(SegmentedButton, null, [{\n    key: \"onDefine\",\n    value: function () {\n      var _onDefine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return Promise.all([fetchI18nBundle(\"@ui5/webcomponents\"), ToggleButton.define()]);\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onDefine() {\n        return _onDefine.apply(this, arguments);\n      }\n\n      return onDefine;\n    }()\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return metadata;\n    }\n  }, {\n    key: \"render\",\n    get: function get() {\n      return litRender;\n    }\n  }, {\n    key: \"template\",\n    get: function get() {\n      return SegmentedButtonTemplate;\n    }\n  }, {\n    key: \"styles\",\n    get: function get() {\n      return SegmentedButtonCss;\n    }\n  }]);\n\n  function SegmentedButton() {\n    var _this;\n\n    _classCallCheck(this, SegmentedButton);\n\n    _this = _super.call(this);\n\n    _this.initItemNavigation();\n\n    _this.absoluteWidthSet = false; // set to true whenever we set absolute width to the component\n\n    _this.percentageWidthSet = false; //  set to true whenever we set 100% width to the component\n\n    _this.hasPreviouslyFocusedItem = false;\n    _this._handleResizeBound = _this._handleResize.bind(_assertThisInitialized(_this));\n    _this.i18nBundle = getI18nBundle(\"@ui5/webcomponents\");\n    return _this;\n  }\n\n  _createClass(SegmentedButton, [{\n    key: \"onEnterDOM\",\n    value: function onEnterDOM() {\n      ResizeHandler.register(this.parentNode, this._handleResizeBound);\n    }\n  }, {\n    key: \"onExitDOM\",\n    value: function onExitDOM() {\n      ResizeHandler.deregister(this.parentNode, this._handleResizeBound);\n    }\n  }, {\n    key: \"onBeforeRendering\",\n    value: function onBeforeRendering() {\n      this.normalizeSelection();\n    }\n  }, {\n    key: \"onAfterRendering\",\n    value: function () {\n      var _onAfterRendering = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Promise.all(this.buttons.map(function (button) {\n                  return button._waitForDomRef;\n                }));\n\n              case 2:\n                this.widths = this.buttons.map(function (button) {\n                  return button.offsetWidth;\n                });\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function onAfterRendering() {\n        return _onAfterRendering.apply(this, arguments);\n      }\n\n      return onAfterRendering;\n    }()\n  }, {\n    key: \"initItemNavigation\",\n    value: function initItemNavigation() {\n      var _this2 = this;\n\n      this._itemNavigation = new ItemNavigation(this);\n\n      this._itemNavigation.getItemsCallback = function () {\n        return _this2.getSlottedNodes(\"buttons\");\n      };\n    }\n  }, {\n    key: \"normalizeSelection\",\n    value: function normalizeSelection() {\n      this._selectedButton = this.buttons.filter(function (button) {\n        return button.pressed;\n      }).pop();\n\n      if (this._selectedButton) {\n        this.buttons.forEach(function (button) {\n          button.pressed = false;\n        });\n        this._selectedButton.pressed = true;\n      }\n    }\n  }, {\n    key: \"_onclick\",\n    value: function _onclick(event) {\n      if (event.target.disabled || event.target === this.getDomRef()) {\n        return;\n      }\n\n      if (event.target !== this._selectedButton) {\n        if (this._selectedButton) {\n          this._selectedButton.pressed = false;\n        }\n\n        this._selectedButton = event.target;\n        this.fireEvent(\"selectionChange\", {\n          selectedButton: this._selectedButton\n        });\n      }\n\n      this._selectedButton.pressed = true;\n\n      this._itemNavigation.update(this._selectedButton);\n\n      return this;\n    }\n  }, {\n    key: \"_onfocusin\",\n    value: function _onfocusin(event) {\n      // If the component was previously focused,\n      // update the ItemNavigation to sync butons` tabindex values\n      if (this.hasPreviouslyFocusedItem) {\n        this._itemNavigation.update(event.target);\n\n        return;\n      } // If the component is focused for the first time\n      // focus the selected item if such present\n\n\n      if (this.selectedButton) {\n        this.selectedButton.focus();\n\n        this._itemNavigation.update(this._selectedButton);\n\n        this.hasPreviouslyFocusedItem = true;\n      }\n    }\n  }, {\n    key: \"_handleResize\",\n    value: function _handleResize() {\n      var parentWidth = this.parentNode.offsetWidth;\n\n      if (!this.style.width || this.percentageWidthSet) {\n        this.style.width = \"\".concat(Math.max.apply(Math, _toConsumableArray(this.widths)) * this.buttons.length, \"px\");\n        this.absoluteWidthSet = true;\n      }\n\n      this.buttons.forEach(function (button) {\n        button.style.width = \"100%\";\n      });\n\n      if (parentWidth <= this.offsetWidth && this.absoluteWidthSet) {\n        this.style.width = \"100%\";\n        this.percentageWidthSet = true;\n      }\n    }\n    /**\n     * Currently selected button.\n     *\n     * @readonly\n     * @type { ui5-togglebutton }\n     * @public\n     */\n\n  }, {\n    key: \"selectedButton\",\n    get: function get() {\n      return this._selectedButton;\n    }\n  }, {\n    key: \"ariaDescription\",\n    get: function get() {\n      return this.i18nBundle.getText(SEGMENTEDBUTTON_ARIA_DESCRIPTION);\n    }\n  }]);\n\n  return SegmentedButton;\n}(UI5Element);\n\nSegmentedButton.define();\nexport default SegmentedButton;","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/@ui5/webcomponents/dist/SegmentedButton.js"],"names":["UI5Element","ItemNavigation","litRender","fetchI18nBundle","getI18nBundle","ResizeHandler","SEGMENTEDBUTTON_ARIA_DESCRIPTION","ToggleButton","SegmentedButtonTemplate","SegmentedButtonCss","metadata","tag","properties","managedSlots","slots","propertyName","type","HTMLElement","events","selectionChange","detail","selectedButton","SegmentedButton","Promise","all","define","initItemNavigation","absoluteWidthSet","percentageWidthSet","hasPreviouslyFocusedItem","_handleResizeBound","_handleResize","bind","i18nBundle","register","parentNode","deregister","normalizeSelection","buttons","map","button","_waitForDomRef","widths","offsetWidth","_itemNavigation","getItemsCallback","getSlottedNodes","_selectedButton","filter","pressed","pop","forEach","event","target","disabled","getDomRef","fireEvent","update","focus","parentWidth","style","width","Math","max","length","getText"],"mappings":"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","sourcesContent":["import UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport ItemNavigation from \"@ui5/webcomponents-base/dist/delegate/ItemNavigation.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport { fetchI18nBundle, getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport ResizeHandler from \"@ui5/webcomponents-base/dist/delegate/ResizeHandler.js\";\nimport { SEGMENTEDBUTTON_ARIA_DESCRIPTION } from \"./generated/i18n/i18n-defaults.js\";\nimport ToggleButton from \"./ToggleButton.js\";\n\n// Template\nimport SegmentedButtonTemplate from \"./generated/templates/SegmentedButtonTemplate.lit.js\";\n\n// Styles\nimport SegmentedButtonCss from \"./generated/themes/SegmentedButton.css.js\";\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-segmentedbutton\",\n\tproperties: /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */  {},\n\tmanagedSlots: true,\n\tslots: /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */ {\n\n\t\t/**\n\t\t * Defines the buttons of <code>ui5-segmentedbutton</code>.\n\t\t * <br><br>\n\t\t * <b>Note:</b> Multiple buttons are allowed.\n\t\t * <br><br>\n\t\t * <b>Note:</b> Use the <code>ui5-togglebutton</code> for the intended design.\n\t\t * @type {HTMLElement[]}\n\t\t * @slot\n\t\t * @public\n\t\t */\n\t\t\"default\": {\n\t\t\tpropertyName: \"buttons\",\n\t\t\ttype: HTMLElement,\n\t\t},\n\t},\n\tevents: /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */ {\n\n\t\t/**\n\t\t * Fired when the selected button changes.\n\t\t *\n\t\t * @event\n\t\t * @param {HTMLElement} selectedButton the pressed button.\n\t\t * @public\n\t\t */\n\t\tselectionChange: {\n\t\t\tdetail: {\n\t\t\t\tselectedButton: { type: HTMLElement },\n\t\t\t},\n\t\t},\n\t},\n};\n\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n *\n * The <code>ui5-segmentedbutton</code> shows a group of buttons. When the user clicks or taps\n * one of the buttons, it stays in a pressed state. It automatically resizes the buttons\n * to fit proportionally within the component. When no width is set, the component uses the available width.\n * <br><br>\n * <b>Note:</b> There can be just one selected <code>button</code> at a time.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/SegmentedButton\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.SegmentedButton\n * @extends sap.ui.webcomponents.base.UI5Element\n * @tagname ui5-segmentedbutton\n * @since 1.0.0-rc.6\n * @public\n */\nclass SegmentedButton extends UI5Element {\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get render() {\n\t\treturn litRender;\n\t}\n\n\tstatic get template() {\n\t\treturn SegmentedButtonTemplate;\n\t}\n\n\tstatic get styles() {\n\t\treturn SegmentedButtonCss;\n\t}\n\n\tstatic async onDefine() {\n\t\tawait Promise.all([\n\t\t\tfetchI18nBundle(\"@ui5/webcomponents\"),\n\t\t\tToggleButton.define(),\n\t\t]);\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis.initItemNavigation();\n\n\t\tthis.absoluteWidthSet = false; // set to true whenever we set absolute width to the component\n\t\tthis.percentageWidthSet = false; //  set to true whenever we set 100% width to the component\n\t\tthis.hasPreviouslyFocusedItem = false;\n\n\t\tthis._handleResizeBound = this._handleResize.bind(this);\n\t\tthis.i18nBundle = getI18nBundle(\"@ui5/webcomponents\");\n\t}\n\n\tonEnterDOM() {\n\t\tResizeHandler.register(this.parentNode, this._handleResizeBound);\n\t}\n\n\tonExitDOM() {\n\t\tResizeHandler.deregister(this.parentNode, this._handleResizeBound);\n\t}\n\n\tonBeforeRendering() {\n\t\tthis.normalizeSelection();\n\t}\n\n\tasync onAfterRendering() {\n\t\tawait Promise.all(this.buttons.map(button => button._waitForDomRef));\n\t\tthis.widths = this.buttons.map(button => button.offsetWidth);\n\t}\n\n\tinitItemNavigation() {\n\t\tthis._itemNavigation = new ItemNavigation(this);\n\n\t\tthis._itemNavigation.getItemsCallback = () => this.getSlottedNodes(\"buttons\");\n\t}\n\n\tnormalizeSelection() {\n\t\tthis._selectedButton = this.buttons.filter(button => button.pressed).pop();\n\n\t\tif (this._selectedButton) {\n\t\t\tthis.buttons.forEach(button => {\n\t\t\t\tbutton.pressed = false;\n\t\t\t});\n\t\t\tthis._selectedButton.pressed = true;\n\t\t}\n\t}\n\n\t_onclick(event) {\n\t\tif (event.target.disabled || event.target === this.getDomRef()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (event.target !== this._selectedButton) {\n\t\t\tif (this._selectedButton) {\n\t\t\t\tthis._selectedButton.pressed = false;\n\t\t\t}\n\t\t\tthis._selectedButton = event.target;\n\t\t\tthis.fireEvent(\"selectionChange\", {\n\t\t\t\tselectedButton: this._selectedButton,\n\t\t\t});\n\t\t}\n\n\t\tthis._selectedButton.pressed = true;\n\t\tthis._itemNavigation.update(this._selectedButton);\n\n\t\treturn this;\n\t}\n\n\t_onfocusin(event) {\n\t\t// If the component was previously focused,\n\t\t// update the ItemNavigation to sync butons` tabindex values\n\t\tif (this.hasPreviouslyFocusedItem) {\n\t\t\tthis._itemNavigation.update(event.target);\n\t\t\treturn;\n\t\t}\n\n\t\t// If the component is focused for the first time\n\t\t// focus the selected item if such present\n\t\tif (this.selectedButton) {\n\t\t\tthis.selectedButton.focus();\n\t\t\tthis._itemNavigation.update(this._selectedButton);\n\t\t\tthis.hasPreviouslyFocusedItem = true;\n\t\t}\n\t}\n\n\t_handleResize() {\n\t\tconst parentWidth = this.parentNode.offsetWidth;\n\n\t\tif (!this.style.width || this.percentageWidthSet) {\n\t\t\tthis.style.width = `${Math.max(...this.widths) * this.buttons.length}px`;\n\t\t\tthis.absoluteWidthSet = true;\n\t\t}\n\n\t\tthis.buttons.forEach(button => {\n\t\t\tbutton.style.width = \"100%\";\n\t\t});\n\n\t\tif (parentWidth <= this.offsetWidth && this.absoluteWidthSet) {\n\t\t\tthis.style.width = \"100%\";\n\t\t\tthis.percentageWidthSet = true;\n\t\t}\n\t}\n\n\t/**\n\t * Currently selected button.\n\t *\n\t * @readonly\n\t * @type { ui5-togglebutton }\n\t * @public\n\t */\n\tget selectedButton() {\n\t\treturn this._selectedButton;\n\t}\n\n\tget ariaDescription() {\n\t\treturn this.i18nBundle.getText(SEGMENTEDBUTTON_ARIA_DESCRIPTION);\n\t}\n}\n\nSegmentedButton.define();\n\nexport default SegmentedButton;\n"]},"metadata":{},"sourceType":"module"}