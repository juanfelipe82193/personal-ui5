{"ast":null,"code":"import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nimport { truncateLongLabel, getTextWidth } from '@ui5/webcomponents-react-charts/lib/Utils';\nimport React from 'react';\n\nvar XAxisTicks = function XAxisTicks(props) {\n  var x = props.x,\n      y = props.y,\n      payload = props.payload,\n      config = props.config,\n      visibleTicksCount = props.visibleTicksCount,\n      width = props.width;\n  var bandWidth = width / visibleTicksCount;\n  var shouldRotate = bandWidth <= 100;\n  var formattedValue = config.formatter(payload.value);\n  var textToDisplay = formattedValue;\n\n  if (shouldRotate) {\n    textToDisplay = truncateLongLabel(formattedValue, 11);\n  } else if (getTextWidth(formattedValue) > bandWidth) {\n    for (var i = \"\".concat(formattedValue).length; i > 0; i--) {\n      textToDisplay = truncateLongLabel(formattedValue, i);\n\n      if (getTextWidth(textToDisplay) <= bandWidth) {\n        break;\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(\".concat(x, \",\").concat(y + 10, \")\")\n  }, /*#__PURE__*/React.createElement(\"text\", {\n    fill: ThemingParameters.sapContent_LabelColor,\n    transform: shouldRotate ? 'rotate(-35)' : undefined,\n    textAnchor: shouldRotate ? 'end' : 'middle'\n  }, textToDisplay));\n};\n\nexport { XAxisTicks };","map":{"version":3,"sources":["../../src/internal/XAxisTicks.tsx"],"names":["XAxisTicks","x","y","payload","config","visibleTicksCount","width","props","bandWidth","shouldRotate","formattedValue","textToDisplay","truncateLongLabel","getTextWidth","i","ThemingParameters"],"mappings":";;;;IAcaA,UAA+B,GAAG,SAAlCA,UAAkC,CAAA,KAAA,EAA4B;AAAA,MACjEC,CADiE,GACbM,KADa,CAAA,CAAA;AAAA,MAC9DL,CAD8D,GACbK,KADa,CAAA,CAAA;AAAA,MAC3DJ,OAD2D,GACbI,KADa,CAAA,OAAA;AAAA,MAClDH,MADkD,GACbG,KADa,CAAA,MAAA;AAAA,MAC1CF,iBAD0C,GACbE,KADa,CAAA,iBAAA;AAAA,MACvBD,KADuB,GACbC,KADa,CAAA,KAAA;AAGzE,MAAMC,SAAS,GAAGF,KAAK,GAAvB,iBAAA;AACA,MAAMG,YAAY,GAAGD,SAAS,IAA9B,GAAA;AAEA,MAAME,cAAc,GAAGN,MAAM,CAANA,SAAAA,CAAiBD,OAAO,CAA/C,KAAuBC,CAAvB;AACA,MAAIO,aAAa,GAAjB,cAAA;;AACA,MAAA,YAAA,EAAkB;AAChBA,IAAAA,aAAa,GAAGC,iBAAiB,CAAA,cAAA,EAAjCD,EAAiC,CAAjCA;AADF,GAAA,MAEO,IAAIE,YAAY,CAAZA,cAAY,CAAZA,GAAJ,SAAA,EAA8C;AACnD,SAAK,IAAIC,CAAC,GAAG,GAAA,MAAA,CAAA,cAAA,EAAb,MAAA,EAAyCA,CAAC,GAA1C,CAAA,EAAgDA,CAAhD,EAAA,EAAqD;AACnDH,MAAAA,aAAa,GAAGC,iBAAiB,CAAA,cAAA,EAAjCD,CAAiC,CAAjCA;;AACA,UAAIE,YAAY,CAAZA,aAAY,CAAZA,IAAJ,SAAA,EAA8C;AAC5C;AACD;AACF;AACF;;AAED,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAG,IAAA,SAAS,EAAA,aAAA,MAAA,CAAA,CAAA,EAAA,GAAA,EAAA,MAAA,CAAoBX,CAAC,GAArB,EAAA,EAAA,GAAA;AAAZ,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AACE,IAAA,IAAI,EAAEa,iBAAiB,CADzB,qBAAA;AAEE,IAAA,SAAS,EAAEN,YAAY,GAAA,aAAA,GAFzB,SAAA;AAGE,IAAA,UAAU,EAAEA,YAAY,GAAA,KAAA,GAAW;AAHrC,GAAA,EAFJ,aAEI,CADF,CADF;AAWD,C","sourcesContent":["import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nimport { getTextWidth, truncateLongLabel } from '@ui5/webcomponents-react-charts/lib/Utils';\nimport React, { FC } from 'react';\nimport { IChartMeasure } from '../interfaces/IChartMeasure';\n\ninterface XAxisTicksProps {\n  visibleTicksCount?: number;\n  width?: number;\n  x?: number;\n  y?: number;\n  payload?: any;\n  config: IChartMeasure;\n}\n\nexport const XAxisTicks: FC<XAxisTicksProps> = (props: XAxisTicksProps) => {\n  const { x, y, payload, config, visibleTicksCount, width } = props;\n\n  const bandWidth = width / visibleTicksCount;\n  const shouldRotate = bandWidth <= 100;\n\n  const formattedValue = config.formatter(payload.value);\n  let textToDisplay = formattedValue;\n  if (shouldRotate) {\n    textToDisplay = truncateLongLabel(formattedValue, 11);\n  } else if (getTextWidth(formattedValue) > bandWidth) {\n    for (let i = `${formattedValue}`.length; i > 0; i--) {\n      textToDisplay = truncateLongLabel(formattedValue, i);\n      if (getTextWidth(textToDisplay) <= bandWidth) {\n        break;\n      }\n    }\n  }\n\n  return (\n    <g transform={`translate(${x},${y + 10})`}>\n      <text\n        fill={ThemingParameters.sapContent_LabelColor}\n        transform={shouldRotate ? 'rotate(-35)' : undefined}\n        textAnchor={shouldRotate ? 'end' : 'middle'}\n      >\n        {textToDisplay}\n      </text>\n    </g>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}