{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributePart, directive, PropertyPart } from '../lit-html.js'; // IE11 doesn't support classList on SVG elements, so we emulate it with a Set\n\nvar ClassList = /*#__PURE__*/function () {\n  function ClassList(element) {\n    _classCallCheck(this, ClassList);\n\n    this.classes = new Set();\n    this.changed = false;\n    this.element = element;\n    var classList = (element.getAttribute('class') || '').split(/\\s+/);\n\n    var _iterator = _createForOfIteratorHelper(classList),\n        _step;\n\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var cls = _step.value;\n        this.classes.add(cls);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n\n  _createClass(ClassList, [{\n    key: \"add\",\n    value: function add(cls) {\n      this.classes.add(cls);\n      this.changed = true;\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(cls) {\n      this.classes.delete(cls);\n      this.changed = true;\n    }\n  }, {\n    key: \"commit\",\n    value: function commit() {\n      if (this.changed) {\n        var classString = '';\n        this.classes.forEach(function (cls) {\n          return classString += cls + ' ';\n        });\n        this.element.setAttribute('class', classString);\n      }\n    }\n  }]);\n\n  return ClassList;\n}();\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\n\n\nvar previousClassesCache = new WeakMap();\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `class` if the property value is truthy; if the property value is\n * falsey, the property name is removed from the element's `class`. For example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\n\nexport var classMap = directive(function (classInfo) {\n  return function (part) {\n    if (!(part instanceof AttributePart) || part instanceof PropertyPart || part.committer.name !== 'class' || part.committer.parts.length > 1) {\n      throw new Error('The `classMap` directive must be used in the `class` attribute ' + 'and must be the only part in the attribute.');\n    }\n\n    var committer = part.committer;\n    var element = committer.element;\n    var previousClasses = previousClassesCache.get(part);\n\n    if (previousClasses === undefined) {\n      // Write static classes once\n      // Use setAttribute() because className isn't a string on SVG elements\n      element.setAttribute('class', committer.strings.join(' '));\n      previousClassesCache.set(part, previousClasses = new Set());\n    }\n\n    var classList = element.classList || new ClassList(element); // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that re don't require down-level\n    // iteration.\n\n    previousClasses.forEach(function (name) {\n      if (!(name in classInfo)) {\n        classList.remove(name);\n        previousClasses.delete(name);\n      }\n    }); // Add or remove classes based on their classMap value\n\n    for (var name in classInfo) {\n      var value = classInfo[name];\n\n      if (value != previousClasses.has(name)) {\n        // We explicitly want a loose truthy check of `value` because it seems\n        // more convenient that '' and 0 are skipped.\n        if (value) {\n          classList.add(name);\n          previousClasses.add(name);\n        } else {\n          classList.remove(name);\n          previousClasses.delete(name);\n        }\n      }\n    }\n\n    if (typeof classList.commit === 'function') {\n      classList.commit();\n    }\n  };\n});","map":{"version":3,"sources":["../src/directives/class-map.ts"],"names":[],"mappings":";;;;AAAA;;;;;;;;;;;;;AAcA,SAAQ,aAAR,EAAuB,SAAvB,EAAwC,YAAxC,QAA2D,gBAA3D,C,CAEA;;IACM,S;AAKJ,qBAAY,OAAZ,EAA4B;AAAA;;AAH5B,SAAA,OAAA,GAAuB,IAAI,GAAJ,EAAvB;AACA,SAAA,OAAA,GAAU,KAAV;AAGE,SAAK,OAAL,GAAe,OAAf;AACA,QAAM,SAAS,GAAG,CAAC,OAAO,CAAC,YAAR,CAAqB,OAArB,KAAiC,EAAlC,EAAsC,KAAtC,CAA4C,KAA5C,CAAlB;;AAF0B,+CAGR,SAHQ;AAAA;;AAAA;AAG1B,0DAA6B;AAAA,YAAlB,GAAkB;AAC3B,aAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB;AACD;AALyB;AAAA;AAAA;AAAA;AAAA;AAM3B;;;;wBACG,G,EAAW;AACb,WAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB;AACA,WAAK,OAAL,GAAe,IAAf;AACD;;;2BAEM,G,EAAW;AAChB,WAAK,OAAL,CAAa,MAAb,CAAoB,GAApB;AACA,WAAK,OAAL,GAAe,IAAf;AACD;;;6BAEK;AACJ,UAAI,KAAK,OAAT,EAAkB;AAChB,YAAI,WAAW,GAAG,EAAlB;AACA,aAAK,OAAL,CAAa,OAAb,CAAqB,UAAC,GAAD;AAAA,iBAAS,WAAW,IAAI,GAAG,GAAG,GAA9B;AAAA,SAArB;AACA,aAAK,OAAL,CAAa,YAAb,CAA0B,OAA1B,EAAmC,WAAnC;AACD;AACF;;;;;AAOH;;;;;;AAIA,IAAM,oBAAoB,GAAG,IAAI,OAAJ,EAA7B;AAEA;;;;;;;;;;AASA,OAAO,IAAM,QAAQ,GAAG,SAAS,CAAC,UAAC,SAAD;AAAA,SAA0B,UAAC,IAAD,EAAe;AACzE,QAAI,EAAE,IAAI,YAAY,aAAlB,KAAqC,IAAI,YAAY,YAArD,IACA,IAAI,CAAC,SAAL,CAAe,IAAf,KAAwB,OADxB,IACmC,IAAI,CAAC,SAAL,CAAe,KAAf,CAAqB,MAArB,GAA8B,CADrE,EACwE;AACtE,YAAM,IAAI,KAAJ,CACF,oEACA,6CAFE,CAAN;AAGD;;AANwE,QAQlE,SARkE,GAQrD,IARqD,CAQlE,SARkE;AAAA,QASlE,OATkE,GASvD,SATuD,CASlE,OATkE;AAWzE,QAAI,eAAe,GAAG,oBAAoB,CAAC,GAArB,CAAyB,IAAzB,CAAtB;;AACA,QAAI,eAAe,KAAK,SAAxB,EAAmC;AACjC;AACA;AACA,MAAA,OAAO,CAAC,YAAR,CAAqB,OAArB,EAA8B,SAAS,CAAC,OAAV,CAAkB,IAAlB,CAAuB,GAAvB,CAA9B;AACA,MAAA,oBAAoB,CAAC,GAArB,CAAyB,IAAzB,EAA+B,eAAe,GAAG,IAAI,GAAJ,EAAjD;AACD;;AAED,QAAM,SAAS,GACV,OAAO,CAAC,SAAR,IAAqB,IAAI,SAAJ,CAAc,OAAd,CAD1B,CAnByE,CAsBzE;AACA;AACA;;AACA,IAAA,eAAe,CAAC,OAAhB,CAAwB,UAAC,IAAD,EAAS;AAC/B,UAAI,EAAE,IAAI,IAAI,SAAV,CAAJ,EAA0B;AACxB,QAAA,SAAS,CAAC,MAAV,CAAiB,IAAjB;AACA,QAAA,eAAgB,CAAC,MAAjB,CAAwB,IAAxB;AACD;AACF,KALD,EAzByE,CAgCzE;;AACA,SAAK,IAAM,IAAX,IAAmB,SAAnB,EAA8B;AAC5B,UAAM,KAAK,GAAG,SAAS,CAAC,IAAD,CAAvB;;AACA,UAAI,KAAK,IAAI,eAAe,CAAC,GAAhB,CAAoB,IAApB,CAAb,EAAwC;AACtC;AACA;AACA,YAAI,KAAJ,EAAW;AACT,UAAA,SAAS,CAAC,GAAV,CAAc,IAAd;AACA,UAAA,eAAe,CAAC,GAAhB,CAAoB,IAApB;AACD,SAHD,MAGO;AACL,UAAA,SAAS,CAAC,MAAV,CAAiB,IAAjB;AACA,UAAA,eAAe,CAAC,MAAhB,CAAuB,IAAvB;AACD;AACF;AACF;;AACD,QAAI,OAAQ,SAAuB,CAAC,MAAhC,KAA2C,UAA/C,EAA2D;AACxD,MAAA,SAAuB,CAAC,MAAxB;AACF;AACF,GAlDiC;AAAA,CAAD,CAA1B","sourcesContent":["/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\nimport {AttributePart, directive, Part, PropertyPart} from '../lit-html.js';\n\n// IE11 doesn't support classList on SVG elements, so we emulate it with a Set\nclass ClassList {\n  element: Element;\n  classes: Set<string> = new Set();\n  changed = false;\n\n  constructor(element: Element) {\n    this.element = element;\n    const classList = (element.getAttribute('class') || '').split(/\\s+/);\n    for (const cls of classList) {\n      this.classes.add(cls);\n    }\n  }\n  add(cls: string) {\n    this.classes.add(cls);\n    this.changed = true;\n  }\n\n  remove(cls: string) {\n    this.classes.delete(cls);\n    this.changed = true;\n  }\n\n  commit() {\n    if (this.changed) {\n      let classString = '';\n      this.classes.forEach((cls) => classString += cls + ' ');\n      this.element.setAttribute('class', classString);\n    }\n  }\n}\n\nexport interface ClassInfo {\n  readonly [name: string]: string|boolean|number;\n}\n\n/**\n * Stores the ClassInfo object applied to a given AttributePart.\n * Used to unset existing values when a new ClassInfo object is applied.\n */\nconst previousClassesCache = new WeakMap<Part, Set<string>>();\n\n/**\n * A directive that applies CSS classes. This must be used in the `class`\n * attribute and must be the only part used in the attribute. It takes each\n * property in the `classInfo` argument and adds the property name to the\n * element's `class` if the property value is truthy; if the property value is\n * falsey, the property name is removed from the element's `class`. For example\n * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.\n * @param classInfo {ClassInfo}\n */\nexport const classMap = directive((classInfo: ClassInfo) => (part: Part) => {\n  if (!(part instanceof AttributePart) || (part instanceof PropertyPart) ||\n      part.committer.name !== 'class' || part.committer.parts.length > 1) {\n    throw new Error(\n        'The `classMap` directive must be used in the `class` attribute ' +\n        'and must be the only part in the attribute.');\n  }\n\n  const {committer} = part;\n  const {element} = committer;\n\n  let previousClasses = previousClassesCache.get(part);\n  if (previousClasses === undefined) {\n    // Write static classes once\n    // Use setAttribute() because className isn't a string on SVG elements\n    element.setAttribute('class', committer.strings.join(' '));\n    previousClassesCache.set(part, previousClasses = new Set());\n  }\n\n  const classList =\n      (element.classList || new ClassList(element)) as DOMTokenList | ClassList;\n\n  // Remove old classes that no longer apply\n  // We use forEach() instead of for-of so that re don't require down-level\n  // iteration.\n  previousClasses.forEach((name) => {\n    if (!(name in classInfo)) {\n      classList.remove(name);\n      previousClasses!.delete(name);\n    }\n  });\n\n  // Add or remove classes based on their classMap value\n  for (const name in classInfo) {\n    const value = classInfo[name];\n    if (value != previousClasses.has(name)) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      if (value) {\n        classList.add(name);\n        previousClasses.add(name);\n      } else {\n        classList.remove(name);\n        previousClasses.delete(name);\n      }\n    }\n  }\n  if (typeof (classList as ClassList).commit === 'function') {\n    (classList as ClassList).commit();\n  }\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}