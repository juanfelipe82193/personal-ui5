{"ast":null,"code":"import _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport { deprecationNotice } from '@ui5/webcomponents-react-base/lib/Utils';\n/* eslint-disable id-blacklist */\n\n/**\n * Optionals for Javascript Objects\n * Inspired by Java Optionals\n */\n\nvar Optional = /*#__PURE__*/function () {\n  /**\n   * Creates a new Optional\n   * @param {Object} object The Object to validate\n   * @param {String} path Path to search for in object. Separated by dots.\n   *                      Example: 'foo.bar'\n   * @constructor\n   */\n  function Optional(object, path) {\n    _classCallCheck(this, Optional);\n\n    this.object = void 0;\n    this.path = void 0;\n    this.object = object;\n    this.path = path;\n    deprecationNotice('Optional', \"'@ui5/webcomponents-react-base/lib/Optional' is deprecated and will be removed in the next major release.\\n. Please use the Optional-Chaining-Operator instead.\");\n  }\n  /**\n   * Creates a new Optional\n   * @param {Object} object The Object to validate\n   * @param {String} path Path to search for in object. Separated by dots.\n   *                      Example: 'foo.bar'\n   * @constructor\n   */\n\n\n  _createClass(Optional, [{\n    key: \"get\",\n\n    /**\n     * Get The Value of the Optional.\n     * Do not use the this method directly!\n     * @return {any} Resolved Value\n     * @private\n     */\n    value: function get() {\n      return this.path.split('.').reduce(function (acc, val) {\n        if (acc === undefined || acc === null) {\n          return acc;\n        }\n\n        if (acc.hasOwnProperty(val)) {\n          var newVal = acc[val];\n\n          if (newVal !== undefined && newVal !== null) {\n            return newVal;\n          }\n\n          return newVal;\n        }\n\n        return undefined;\n      }, this.object);\n    }\n    /**\n     * Return true if there is a value present, otherwise false.\n     * @returns {Boolean} true if there is a value present, otherwise false\n     */\n\n  }, {\n    key: \"isPresent\",\n    value: function isPresent() {\n      var obj = this.object;\n      return this.path.split('.').every(function (x) {\n        if (typeof obj !== 'object' || obj === null || obj === undefined || !(x in obj)) return false;\n        obj = obj[x];\n        return true;\n      });\n    }\n    /**\n     * If a value is present, invoke the specified consumer with the value, otherwise do nothing.\n     * @param {Function} fn block to be executed if a value is present\n     * @returns {any} value The executed fn if present, else null\n     */\n\n  }, {\n    key: \"ifPresent\",\n    value: function ifPresent(fn) {\n      if (this.isPresent()) {\n        return fn(this.get());\n      }\n\n      return null;\n    }\n    /**\n     * Return the value if present, otherwise return other.\n     * @param val {any} the value to be returned if there is no value present, may be null\n     * @returns {any} value the value, if present, otherwise other\n     */\n\n  }, {\n    key: \"orElse\",\n    value: function orElse(val) {\n      return this.isPresent() ? this.get() : val;\n    }\n    /**\n     * Return the contained value, if present, otherwise throw an exception to be created by the provided supplier.\n     * @param {ExceptionSupplier} exceptionSupplier The supplier which will return the exception to be thrown\n     * @returns {any} the present value\n     * @throws {Exception} ex - if there is no value present\n     *\n     */\n\n  }, {\n    key: \"orElseThrow\",\n    value: function orElseThrow(exceptionSupplier) {\n      if (!this.isPresent()) {\n        throw exceptionSupplier();\n      }\n\n      return this.get();\n    }\n  }], [{\n    key: \"of\",\n    value: function of(object, path) {\n      return new Optional(object, path);\n    }\n  }]);\n\n  return Optional;\n}();\n\nexport { Optional };","map":{"version":3,"sources":["../src/utils/Optional.ts"],"names":["Optional","object","path","deprecationNotice","acc","newVal","obj","x","fn","val","exceptionSupplier"],"mappings":";;;AAEA;;AACA;;;;;IAIMA,QAAAA,GAAAA,aAAAA,YAAAA;AAIJ;;;;;;;AAOA,WAAA,QAAA,CAAA,MAAA,EAAA,IAAA,EAA0C;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA;;AAAA,SAVzBC,MAUyB,GAAA,KAAA,CAAA;AAAA,SATlCC,IASkC,GAAA,KAAA,CAAA;AACxC,SAAA,MAAA,GAAA,MAAA;AACA,SAAA,IAAA,GAAA,IAAA;AAEAC,IAAAA,iBAAiB,CAAA,UAAA,EAAjBA,iKAAiB,CAAjBA;AAID;AAED;;;;;;;;;;;;AAWA;;;;;;0BAMM;AACJ,aAAO,KAAA,IAAA,CAAA,KAAA,CAAA,GAAA,EAAA,MAAA,CAA4B,UAAA,GAAA,EAAA,GAAA,EAAc;AAC/C,YAAIC,GAAG,KAAHA,SAAAA,IAAqBA,GAAG,KAA5B,IAAA,EAAuC;AACrC,iBAAA,GAAA;AACD;;AACD,YAAIA,GAAG,CAAHA,cAAAA,CAAJ,GAAIA,CAAJ,EAA6B;AAC3B,cAAMC,MAAM,GAAGD,GAAG,CAAlB,GAAkB,CAAlB;;AACA,cAAIC,MAAM,KAANA,SAAAA,IAAwBA,MAAM,KAAlC,IAAA,EAA6C;AAC3C,mBAAA,MAAA;AACD;;AACD,iBAAA,MAAA;AACD;;AACD,eAAA,SAAA;AAXK,OAAA,EAYJ,KAZH,MAAO,CAAP;AAaD;AAED;;;;;;;gCAIY;AACV,UAAIC,GAAQ,GAAG,KAAf,MAAA;AACA,aAAO,KAAA,IAAA,CAAA,KAAA,CAAA,GAAA,EAAA,KAAA,CAA2B,UAAA,CAAA,EAAO;AACvC,YAAI,OAAA,GAAA,KAAA,QAAA,IAA2BA,GAAG,KAA9B,IAAA,IAA2CA,GAAG,KAA9C,SAAA,IAAgE,EAAEC,CAAC,IAAvE,GAAoE,CAApE,EAAiF,OAAA,KAAA;AACjFD,QAAAA,GAAG,GAAGA,GAAG,CAATA,CAAS,CAATA;AACA,eAAA,IAAA;AAHF,OAAO,CAAP;AAKD;AAED;;;;;;;;8BAKUE,E,EAA0B;AAClC,UAAI,KAAJ,SAAI,EAAJ,EAAsB;AACpB,eAAOA,EAAE,CAAC,KAAV,GAAU,EAAD,CAAT;AACD;;AACD,aAAA,IAAA;AACD;AAED;;;;;;;;2BAKOC,G,EAAU;AACf,aAAO,KAAA,SAAA,KAAmB,KAAnB,GAAmB,EAAnB,GAAP,GAAA;AACD;AAED;;;;;;;;;;gCAOYC,iB,EAAgC;AAC1C,UAAI,CAAC,KAAL,SAAK,EAAL,EAAuB;AACrB,cAAMA,iBAAN,EAAA;AACD;;AACD,aAAO,KAAP,GAAO,EAAP;AACD;;;uBAxEST,M,EAAgBC,I,EAAc;AACtC,aAAO,IAAA,QAAA,CAAA,MAAA,EAAP,IAAO,CAAP;AACD;;;;CA9BGF,E","sourcesContent":["import { deprecationNotice } from '@ui5/webcomponents-react-base/lib/Utils';\n\n/* eslint-disable id-blacklist */\n/**\n * Optionals for Javascript Objects\n * Inspired by Java Optionals\n */\nclass Optional {\n  private readonly object: object;\n  private path: string;\n\n  /**\n   * Creates a new Optional\n   * @param {Object} object The Object to validate\n   * @param {String} path Path to search for in object. Separated by dots.\n   *                      Example: 'foo.bar'\n   * @constructor\n   */\n  constructor(object: object, path: string) {\n    this.object = object;\n    this.path = path;\n\n    deprecationNotice(\n      'Optional',\n      \"'@ui5/webcomponents-react-base/lib/Optional' is deprecated and will be removed in the next major release.\\n. Please use the Optional-Chaining-Operator instead.\"\n    );\n  }\n\n  /**\n   * Creates a new Optional\n   * @param {Object} object The Object to validate\n   * @param {String} path Path to search for in object. Separated by dots.\n   *                      Example: 'foo.bar'\n   * @constructor\n   */\n  static of(object: object, path: string) {\n    return new Optional(object, path);\n  }\n\n  /**\n   * Get The Value of the Optional.\n   * Do not use the this method directly!\n   * @return {any} Resolved Value\n   * @private\n   */\n  get() {\n    return this.path.split('.').reduce((acc, val) => {\n      if (acc === undefined || acc === null) {\n        return acc;\n      }\n      if (acc.hasOwnProperty(val)) {\n        const newVal = acc[val];\n        if (newVal !== undefined && newVal !== null) {\n          return newVal;\n        }\n        return newVal;\n      }\n      return undefined;\n    }, this.object);\n  }\n\n  /**\n   * Return true if there is a value present, otherwise false.\n   * @returns {Boolean} true if there is a value present, otherwise false\n   */\n  isPresent() {\n    let obj: any = this.object;\n    return this.path.split('.').every((x) => {\n      if (typeof obj !== 'object' || obj === null || obj === undefined || !(x in obj)) return false;\n      obj = obj[x];\n      return true;\n    });\n  }\n\n  /**\n   * If a value is present, invoke the specified consumer with the value, otherwise do nothing.\n   * @param {Function} fn block to be executed if a value is present\n   * @returns {any} value The executed fn if present, else null\n   */\n  ifPresent(fn: (value: any) => void) {\n    if (this.isPresent()) {\n      return fn(this.get());\n    }\n    return null;\n  }\n\n  /**\n   * Return the value if present, otherwise return other.\n   * @param val {any} the value to be returned if there is no value present, may be null\n   * @returns {any} value the value, if present, otherwise other\n   */\n  orElse(val: any) {\n    return this.isPresent() ? this.get() : val;\n  }\n\n  /**\n   * Return the contained value, if present, otherwise throw an exception to be created by the provided supplier.\n   * @param {ExceptionSupplier} exceptionSupplier The supplier which will return the exception to be thrown\n   * @returns {any} the present value\n   * @throws {Exception} ex - if there is no value present\n   *\n   */\n  orElseThrow(exceptionSupplier: () => Error) {\n    if (!this.isPresent()) {\n      throw exceptionSupplier();\n    }\n    return this.get();\n  }\n}\n\nexport { Optional };\n"]},"metadata":{},"sourceType":"module"}