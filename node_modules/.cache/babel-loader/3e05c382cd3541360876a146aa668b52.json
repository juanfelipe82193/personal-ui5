{"ast":null,"code":"import _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nimport { useConsolidatedRef } from '@ui5/webcomponents-react-base/lib/useConsolidatedRef';\nimport { enrichEventWithDetails } from '@ui5/webcomponents-react-base/lib/Utils';\nimport { BarChartPlaceholder } from '@ui5/webcomponents-react-charts/lib/BarChartPlaceholder';\nimport { ChartDataLabel } from '@ui5/webcomponents-react-charts/lib/components/ChartDataLabel';\nimport { XAxisTicks } from '@ui5/webcomponents-react-charts/lib/components/XAxisTicks';\nimport { YAxisTicks } from '@ui5/webcomponents-react-charts/lib/components/YAxisTicks';\nimport { ChartContainer } from '@ui5/webcomponents-react-charts/lib/next/ChartContainer';\nimport { useLegendItemClick } from '@ui5/webcomponents-react-charts/lib/useLegendItemClick';\nimport React, { useMemo, useState, useRef, useEffect, useCallback, forwardRef } from 'react';\nimport { BarChart as BarChart$1, CartesianGrid, XAxis, YAxis, Bar, Legend, ReferenceLine, Tooltip, Brush } from 'recharts';\nimport { getTextWidth } from '@ui5/webcomponents-react-charts/lib/Utils';\nimport { getValueByDataKey } from 'recharts/lib/util/ChartUtils';\nimport debounce from 'lodash.debounce';\n\nvar useChartMargin = function useChartMargin(margin, hasZoomingTool) {\n  return useMemo(function () {\n    var _margin$right, _margin$top, _margin$bottom, _margin$left;\n\n    return {\n      right: (_margin$right = margin === null || margin === void 0 ? void 0 : margin.right) !== null && _margin$right !== void 0 ? _margin$right : 30,\n      top: ((_margin$top = margin === null || margin === void 0 ? void 0 : margin.top) !== null && _margin$top !== void 0 ? _margin$top : hasZoomingTool) ? 40 : 20,\n      bottom: (_margin$bottom = margin === null || margin === void 0 ? void 0 : margin.bottom) !== null && _margin$bottom !== void 0 ? _margin$bottom : 20,\n      left: (_margin$left = margin === null || margin === void 0 ? void 0 : margin.left) !== null && _margin$left !== void 0 ? _margin$left : 10\n    };\n  }, [margin, hasZoomingTool]);\n};\n\nvar defaultFormatter = function defaultFormatter(d) {\n  return d;\n};\n\nvar defaultMaxYAxisWidth = 200;\n\nvar useLongestYAxisLabelBar = function useLongestYAxisLabelBar(dataset, elements) {\n  return useMemo(function () {\n    var axisWidths = Array(elements.length).fill(0);\n    var marginLeft = 0;\n\n    if (dataset instanceof Array && elements) {\n      var resolveAllMeasureLabels = function resolveAllMeasureLabels(item) {\n        return elements.map(function (elementConfig) {\n          return elementConfig.formatter(getValueByDataKey(item, elementConfig.accessor, ''));\n        });\n      };\n\n      var allFormattedDataLabels = dataset.map(resolveAllMeasureLabels);\n      allFormattedDataLabels.forEach(function (dimensionLabels) {\n        dimensionLabels.forEach(function (label, dimensionIndex) {\n          axisWidths[dimensionIndex] = Math.max(getTextWidth(label), axisWidths[dimensionIndex]);\n        });\n      });\n      axisWidths = axisWidths.map(function (length) {\n        return Math.min(defaultMaxYAxisWidth, length);\n      });\n      marginLeft = axisWidths.reduce(function (acc, val) {\n        return acc + val;\n      }, 0);\n    }\n\n    return [axisWidths, {\n      marginLeft: marginLeft,\n      maxWidth: \"calc(100% - \".concat(marginLeft + 8, \"px)\")\n    }];\n  }, [dataset, elements]);\n};\n\nvar defaultAxisHeight = 30;\n\nvar useObserveXAxisHeights = function useObserveXAxisHeights(chartRef, axisCount) {\n  var _useState = useState(Array(axisCount).fill(defaultAxisHeight)),\n      _useState2 = _slicedToArray(_useState, 2),\n      xAxisHeights = _useState2[0],\n      setXAxisHeights = _useState2[1];\n\n  var mostRecentXAxisHeights = useRef(xAxisHeights);\n  useEffect(function () {\n    var mutationObserver = new MutationObserver(debounce(function () {\n      var _chartRef$current;\n\n      var defaultHeights = Array(axisCount).fill(defaultAxisHeight);\n      (_chartRef$current = chartRef.current) === null || _chartRef$current === void 0 ? void 0 : _chartRef$current.querySelectorAll('.xAxis').forEach(function (xAxis, index) {\n        var _xAxis$getBBox;\n\n        var currentAxisHeight = xAxis === null || xAxis === void 0 ? void 0 : (_xAxis$getBBox = xAxis.getBBox()) === null || _xAxis$getBBox === void 0 ? void 0 : _xAxis$getBBox.height;\n\n        if (currentAxisHeight > 30) {\n          defaultHeights[index] = currentAxisHeight;\n        }\n      });\n      var arraysHaveTheSameLength = mostRecentXAxisHeights.current.length === defaultHeights.length;\n      var arrayContentIsIdentical = mostRecentXAxisHeights.current.every(function (value, index) {\n        return defaultHeights[index] === value;\n      });\n\n      if (!(arraysHaveTheSameLength && arrayContentIsIdentical)) {\n        mostRecentXAxisHeights.current = defaultHeights;\n        setXAxisHeights(defaultHeights);\n      }\n    }, 75));\n\n    if (chartRef.current) {\n      mutationObserver.observe(chartRef.current, {\n        characterData: false,\n        characterDataOldValue: false,\n        attributes: false,\n        childList: true,\n        subtree: true\n      });\n    }\n\n    return function () {\n      mutationObserver.disconnect();\n    };\n  }, [chartRef, setXAxisHeights, mostRecentXAxisHeights]);\n  return xAxisHeights;\n};\n\nvar usePrepareDimensionsAndMeasures = function usePrepareDimensionsAndMeasures(rawDimensions, rawMeasures) {\n  var dimensionDefaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var measureDefaults = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var dimensions = useMemo(function () {\n    return rawDimensions.map(function (label) {\n      return _objectSpread(_objectSpread({}, dimensionDefaults), label);\n    });\n  }, [rawDimensions, dimensionDefaults]);\n  var measures = useMemo(function () {\n    return rawMeasures.map(function (value) {\n      return _objectSpread(_objectSpread({}, measureDefaults), value);\n    });\n  }, [rawMeasures, measureDefaults]);\n  return {\n    dimensions: dimensions,\n    measures: measures\n  };\n};\n\nvar useTooltipFormatter = function useTooltipFormatter(measures) {\n  return useCallback(function (value, name, props) {\n    var measure = measures.find(function (_ref) {\n      var accessor = _ref.accessor;\n      return accessor === props.dataKey;\n    });\n\n    if (measure && measure.formatter && typeof measure.formatter === 'function') {\n      return measure.formatter(value);\n    }\n\n    return value;\n  }, [measures]);\n};\n\nvar tickLineConfig = {\n  stroke: 'transparent'\n};\nvar tooltipContentStyle = {\n  backgroundColor: ThemingParameters.sapBackgroundColor\n};\nvar tooltipFillOpacity = {\n  fillOpacity: 0.3\n};\nvar dimensionDefaults = {\n  formatter: defaultFormatter\n};\nvar measureDefaults = {\n  formatter: defaultFormatter,\n  opacity: 1\n};\n/**\n * <code>import { BarChart } from '@ui5/webcomponents-react-charts/lib/next/BarChart';</code>\n */\n\nvar BarChart = forwardRef(function (props, ref) {\n  var loading = props.loading,\n      dataset = props.dataset,\n      _props$noLegend = props.noLegend,\n      noLegend = _props$noLegend === void 0 ? false : _props$noLegend,\n      _props$noAnimation = props.noAnimation,\n      noAnimation = _props$noAnimation === void 0 ? false : _props$noAnimation,\n      onDataPointClick = props.onDataPointClick,\n      onLegendClick = props.onLegendClick,\n      style = props.style,\n      className = props.className,\n      tooltip = props.tooltip,\n      slot = props.slot;\n  var chartConfig = useMemo(function () {\n    return _objectSpread({\n      margin: {},\n      yAxisVisible: true,\n      xAxisVisible: true,\n      gridStroke: ThemingParameters.sapList_BorderColor,\n      gridHorizontal: true,\n      gridVertical: false,\n      legendPosition: 'bottom',\n      legendHorizontalAlign: 'left',\n      barGap: 3,\n      zoomingTool: false,\n      resizeDebounce: 250\n    }, props.chartConfig);\n  }, [props.chartConfig]);\n\n  var _usePrepareDimensions = usePrepareDimensionsAndMeasures(props.dimensions, props.measures, dimensionDefaults, measureDefaults),\n      dimensions = _usePrepareDimensions.dimensions,\n      measures = _usePrepareDimensions.measures;\n\n  var tooltipValueFormatter = useTooltipFormatter(measures);\n  var primaryDimension = dimensions[0];\n  var primaryMeasure = measures[0];\n  var chartRef = useConsolidatedRef(ref);\n  var onItemLegendClick = useLegendItemClick(onLegendClick);\n  var onDataPointClickInternal = useCallback(function (payload, i, event) {\n    if (payload && onDataPointClick) {\n      var value = payload.value.length ? payload.value[1] - payload.value[0] : payload.value;\n      onDataPointClick(enrichEventWithDetails(event, {\n        dataKey: Object.keys(payload).filter(function (key) {\n          return key !== 'value';\n        }).find(function (key) {\n          return payload[key] === value;\n        }),\n        value: value,\n        payload: payload.payload,\n        dataIndex: i\n      }));\n    }\n  }, [onDataPointClick]);\n  var isBigDataSet = (dataset === null || dataset === void 0 ? void 0 : dataset.length) > 30;\n  var primaryDimensionAccessor = primaryDimension === null || primaryDimension === void 0 ? void 0 : primaryDimension.accessor;\n\n  var _useLongestYAxisLabel = useLongestYAxisLabelBar(dataset, dimensions),\n      _useLongestYAxisLabel2 = _slicedToArray(_useLongestYAxisLabel, 2),\n      width = _useLongestYAxisLabel2[0],\n      legendPosition = _useLongestYAxisLabel2[1];\n\n  var marginChart = useChartMargin(chartConfig.margin, chartConfig.zoomingTool);\n\n  var _useObserveXAxisHeigh = useObserveXAxisHeights(chartRef, 1),\n      _useObserveXAxisHeigh2 = _slicedToArray(_useObserveXAxisHeigh, 1),\n      xAxisHeight = _useObserveXAxisHeigh2[0];\n\n  return /*#__PURE__*/React.createElement(ChartContainer, {\n    dataset: dataset,\n    loading: loading,\n    Placeholder: BarChartPlaceholder,\n    ref: chartRef,\n    style: style,\n    className: className,\n    tooltip: tooltip,\n    slot: slot,\n    resizeDebounce: chartConfig.resizeDebounce\n  }, /*#__PURE__*/React.createElement(BarChart$1, {\n    margin: marginChart,\n    layout: \"vertical\",\n    data: dataset,\n    barGap: chartConfig.barGap,\n    className: typeof onDataPointClick === 'function' ? 'has-click-handler' : undefined\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    vertical: chartConfig.gridVertical,\n    horizontal: chartConfig.gridHorizontal,\n    stroke: chartConfig.gridStroke\n  }), chartConfig.xAxisVisible && /*#__PURE__*/React.createElement(XAxis, {\n    interval: 0,\n    type: \"number\",\n    tick: /*#__PURE__*/React.createElement(XAxisTicks, {\n      config: primaryMeasure\n    }),\n    axisLine: chartConfig.xAxisVisible,\n    tickLine: tickLineConfig,\n    tickFormatter: primaryMeasure === null || primaryMeasure === void 0 ? void 0 : primaryMeasure.formatter,\n    height: xAxisHeight\n  }), chartConfig.yAxisVisible && dimensions.map(function (dimension, index) {\n    var _dimension$interval;\n\n    return /*#__PURE__*/React.createElement(YAxis, {\n      interval: (_dimension$interval = dimension === null || dimension === void 0 ? void 0 : dimension.interval) !== null && _dimension$interval !== void 0 ? _dimension$interval : isBigDataSet ? 'preserveStart' : 0,\n      type: \"category\",\n      key: dimension.accessor,\n      dataKey: dimension.accessor,\n      xAxisId: index,\n      tick: /*#__PURE__*/React.createElement(YAxisTicks, {\n        config: dimension\n      }),\n      tickLine: index < 1,\n      axisLine: index < 1,\n      yAxisId: index,\n      width: width[index],\n      allowDuplicatedCategory: index === 0\n    });\n  }), measures.map(function (element, index) {\n    var _element$label, _element$color, _element$color2;\n\n    return /*#__PURE__*/React.createElement(Bar, {\n      stackId: element.stackId,\n      fillOpacity: element.opacity,\n      key: element.accessor,\n      name: (_element$label = element.label) !== null && _element$label !== void 0 ? _element$label : element.accessor,\n      strokeOpacity: element.opacity,\n      label: /*#__PURE__*/React.createElement(ChartDataLabel, {\n        config: element,\n        chartType: \"bar\",\n        position: \"insideRight\"\n      }),\n      type: \"monotone\",\n      dataKey: element.accessor,\n      fill: (_element$color = element.color) !== null && _element$color !== void 0 ? _element$color : \"var(--sapChart_OrderedColor_\".concat(index % 11 + 1, \")\"),\n      stroke: (_element$color2 = element.color) !== null && _element$color2 !== void 0 ? _element$color2 : \"var(--sapChart_OrderedColor_\".concat(index % 11 + 1, \")\"),\n      barSize: element.width,\n      onClick: onDataPointClickInternal,\n      isAnimationActive: noAnimation === false\n    });\n  }), !noLegend && /*#__PURE__*/React.createElement(Legend, {\n    verticalAlign: chartConfig.legendPosition,\n    align: chartConfig.legendHorizontalAlign,\n    onClick: onItemLegendClick,\n    wrapperStyle: legendPosition\n  }), chartConfig.referenceLine && /*#__PURE__*/React.createElement(ReferenceLine, {\n    stroke: chartConfig.referenceLine.color,\n    x: chartConfig.referenceLine.value,\n    label: chartConfig.referenceLine.label\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    cursor: tooltipFillOpacity,\n    formatter: tooltipValueFormatter,\n    contentStyle: tooltipContentStyle\n  }), chartConfig.zoomingTool && /*#__PURE__*/React.createElement(Brush, {\n    y: 10,\n    dataKey: primaryDimensionAccessor,\n    stroke: ThemingParameters.sapObjectHeader_BorderColor,\n    travellerWidth: 10,\n    height: 20\n  })));\n});\nBarChart.displayName = 'BarChart';\nexport { BarChart };","map":{"version":3,"sources":["../../src/hooks/useChartMargin.ts","../../src/internal/defaults.ts","../../src/hooks/useLongestYAxisLabelBar.ts","../../src/hooks/useObserveXAxisHeights.ts","../../src/hooks/usePrepareDimensionsAndMeasures.ts","../../src/hooks/useTooltipFormatter.ts","../../src/internal/staticProps.ts","../../src/components/BarChart/BarChart.tsx"],"names":["useChartMargin","useMemo","right","margin","top","bottom","left","defaultFormatter","defaultMaxYAxisWidth","useLongestYAxisLabelBar","axisWidths","Array","elements","marginLeft","dataset","resolveAllMeasureLabels","elementConfig","getValueByDataKey","allFormattedDataLabels","dimensionLabels","Math","getTextWidth","acc","maxWidth","defaultAxisHeight","useObserveXAxisHeights","xAxisHeights","setXAxisHeights","useState","mostRecentXAxisHeights","useRef","useEffect","mutationObserver","debounce","defaultHeights","currentAxisHeight","xAxis","arraysHaveTheSameLength","arrayContentIsIdentical","chartRef","characterData","characterDataOldValue","attributes","childList","subtree","usePrepareDimensionsAndMeasures","dimensionDefaults","measureDefaults","dimensions","measures","useTooltipFormatter","useCallback","measure","accessor","props","tickLineConfig","stroke","tooltipContentStyle","backgroundColor","ThemingParameters","sapBackgroundColor","tooltipFillOpacity","fillOpacity","formatter","opacity","BarChart","forwardRef","loading","noLegend","noAnimation","onDataPointClick","onLegendClick","style","className","tooltip","slot","chartConfig","yAxisVisible","xAxisVisible","gridStroke","gridHorizontal","gridVertical","legendPosition","legendHorizontalAlign","barGap","zoomingTool","resizeDebounce","tooltipValueFormatter","primaryDimension","primaryMeasure","useConsolidatedRef","onItemLegendClick","useLegendItemClick","onDataPointClickInternal","payload","value","enrichEventWithDetails","dataKey","key","dataIndex","i","isBigDataSet","primaryDimensionAccessor","width","marginChart","xAxisHeight","undefined","dimension","index","element","label"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\n\nexport const useChartMargin = (margin, hasZoomingTool) =>\n  useMemo(() => {\n    return {\n      right: margin?.right ?? 30,\n      top: margin?.top ?? hasZoomingTool ? 40 : 20,\n      bottom: margin?.bottom ?? 20,\n      left: margin?.left ?? 10\n    };\n  }, [margin, hasZoomingTool]);\n","export const defaultFormatter = (d) => d;\n\nexport const defaultMaxYAxisWidth = 200;\n","import { getTextWidth } from '@ui5/webcomponents-react-charts/lib/Utils';\nimport { useMemo } from 'react';\nimport { getValueByDataKey } from 'recharts/lib/util/ChartUtils';\nimport { defaultMaxYAxisWidth } from '../internal/defaults';\n\nexport const useLongestYAxisLabelBar = (dataset: unknown[], elements): [number[], object] =>\n  useMemo(() => {\n    let axisWidths = Array(elements.length).fill(0);\n    let marginLeft = 0;\n\n    if (dataset instanceof Array && elements) {\n      const resolveAllMeasureLabels = (item): string[] => {\n        return elements.map((elementConfig) =>\n          elementConfig.formatter(getValueByDataKey(item, elementConfig.accessor, ''))\n        );\n      };\n\n      const allFormattedDataLabels = dataset.map(resolveAllMeasureLabels);\n      allFormattedDataLabels.forEach((dimensionLabels) => {\n        dimensionLabels.forEach((label, dimensionIndex) => {\n          axisWidths[dimensionIndex] = Math.max(getTextWidth(label), axisWidths[dimensionIndex]);\n        });\n      });\n\n      axisWidths = axisWidths.map((length) => Math.min(defaultMaxYAxisWidth, length));\n      marginLeft = axisWidths.reduce((acc, val) => acc + val, 0);\n    }\n\n    return [axisWidths, { marginLeft, maxWidth: `calc(100% - ${marginLeft + 8}px)` }];\n  }, [dataset, elements]);\n","import debounce from 'lodash.debounce';\nimport { RefObject, useEffect, useRef, useState } from 'react';\n\nconst defaultAxisHeight = 30;\n\nexport const useObserveXAxisHeights = (chartRef: RefObject<SVGElement>, axisCount) => {\n  const [xAxisHeights, setXAxisHeights] = useState(Array(axisCount).fill(defaultAxisHeight));\n  const mostRecentXAxisHeights = useRef<number[]>(xAxisHeights);\n\n  useEffect(() => {\n    const mutationObserver = new MutationObserver(\n      debounce(() => {\n        const defaultHeights = Array(axisCount).fill(defaultAxisHeight);\n        chartRef.current?.querySelectorAll<SVGElement>('.xAxis').forEach((xAxis, index) => {\n          const currentAxisHeight = xAxis?.getBBox()?.height;\n          if (currentAxisHeight > 30) {\n            defaultHeights[index] = currentAxisHeight;\n          }\n        });\n\n        const arraysHaveTheSameLength = mostRecentXAxisHeights.current.length === defaultHeights.length;\n        const arrayContentIsIdentical = mostRecentXAxisHeights.current.every(\n          (value, index) => defaultHeights[index] === value\n        );\n        if (!(arraysHaveTheSameLength && arrayContentIsIdentical)) {\n          mostRecentXAxisHeights.current = defaultHeights;\n          setXAxisHeights(defaultHeights);\n        }\n      }, 75)\n    );\n\n    if (chartRef.current) {\n      mutationObserver.observe(chartRef.current, {\n        characterData: false,\n        characterDataOldValue: false,\n        attributes: false,\n        childList: true,\n        subtree: true\n      });\n    }\n    return () => {\n      mutationObserver.disconnect();\n    };\n  }, [chartRef, setXAxisHeights, mostRecentXAxisHeights]);\n\n  return xAxisHeights;\n};\n","import { useMemo } from 'react';\n\nexport const usePrepareDimensionsAndMeasures = <DimensionConfig = any, MeasureConfig = any>(\n  rawDimensions,\n  rawMeasures,\n  dimensionDefaults = {},\n  measureDefaults = {}\n) => {\n  const dimensions: DimensionConfig = useMemo(\n    () =>\n      rawDimensions.map((label) => ({\n        ...dimensionDefaults,\n        ...label\n      })),\n    [rawDimensions, dimensionDefaults]\n  );\n\n  const measures: MeasureConfig = useMemo(\n    () =>\n      rawMeasures.map((value) => ({\n        ...measureDefaults,\n        ...value\n      })),\n    [rawMeasures, measureDefaults]\n  );\n\n  return { dimensions, measures };\n};\n","import { useCallback } from 'react';\n\nexport const useTooltipFormatter = (measures) => {\n  return useCallback(\n    (value, name, props) => {\n      const measure = measures.find(({ accessor }) => accessor === props.dataKey);\n      if (measure && measure.formatter && typeof measure.formatter === 'function') {\n        return measure.formatter(value);\n      }\n      return value;\n    },\n    [measures]\n  );\n};\n","import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\n\nexport const tickLineConfig = { stroke: 'transparent' };\nexport const tooltipContentStyle = { backgroundColor: ThemingParameters.sapBackgroundColor };\nexport const tooltipFillOpacity = { fillOpacity: 0.3 };\nexport const xAxisPadding = { left: 25, right: 25 };\n","import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nimport { useConsolidatedRef } from '@ui5/webcomponents-react-base/lib/useConsolidatedRef';\nimport { enrichEventWithDetails } from '@ui5/webcomponents-react-base/lib/Utils';\nimport { BarChartPlaceholder } from '@ui5/webcomponents-react-charts/lib/BarChartPlaceholder';\nimport { ChartDataLabel } from '@ui5/webcomponents-react-charts/lib/components/ChartDataLabel';\nimport { XAxisTicks } from '@ui5/webcomponents-react-charts/lib/components/XAxisTicks';\nimport { YAxisTicks } from '@ui5/webcomponents-react-charts/lib/components/YAxisTicks';\nimport { ChartContainer } from '@ui5/webcomponents-react-charts/lib/next/ChartContainer';\nimport { useLegendItemClick } from '@ui5/webcomponents-react-charts/lib/useLegendItemClick';\nimport React, { FC, forwardRef, Ref, useCallback, useMemo } from 'react';\nimport {\n  Bar,\n  BarChart as BarChartLib,\n  Brush,\n  CartesianGrid,\n  Legend,\n  ReferenceLine,\n  Tooltip,\n  XAxis,\n  YAxis\n} from 'recharts';\nimport { useChartMargin } from '../../hooks/useChartMargin';\nimport { useLongestYAxisLabelBar } from '../../hooks/useLongestYAxisLabelBar';\nimport { useObserveXAxisHeights } from '../../hooks/useObserveXAxisHeights';\nimport { usePrepareDimensionsAndMeasures } from '../../hooks/usePrepareDimensionsAndMeasures';\nimport { useTooltipFormatter } from '../../hooks/useTooltipFormatter';\nimport { IChartDimension } from '../../interfaces/IChartDimension';\nimport { IChartMeasure } from '../../interfaces/IChartMeasure';\nimport { RechartBaseProps } from '../../interfaces/RechartBaseProps';\nimport { defaultFormatter } from '../../internal/defaults';\nimport { tickLineConfig, tooltipContentStyle, tooltipFillOpacity } from '../../internal/staticProps';\n\nconst dimensionDefaults = {\n  formatter: defaultFormatter\n};\n\nconst measureDefaults = {\n  formatter: defaultFormatter,\n  opacity: 1\n};\n\ninterface MeasureConfig extends IChartMeasure {\n  /**\n   * Bar Width\n   * @default auto\n   */\n  width?: number;\n  /**\n   * Bar Opacity\n   * @default 1\n   */\n  opacity?: number;\n  /**\n   * Bar Stack ID\n   * @default undefined\n   */\n  stackId?: string;\n}\n\ninterface DimensionConfig extends IChartDimension {\n  /**\n   * Interval of dimension axis labels\n   * @default 0\n   */\n  interval?: number;\n}\n\nexport interface BarChartProps extends RechartBaseProps {\n  dimensions: DimensionConfig[];\n  /**\n   * An array of config objects. Each object is defining one bar in the chart.\n   *\n   * <h4>Required properties</h4>\n   * - `accessor`: string containing the path to the dataset key this bar should display. Supports object structures by using <code>'parent.child'</code>.\n   *   Can also be a getter.\n   *\n   * <h4>Optional properties</h4>\n   *\n   * - `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n   * - `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_OrderedColor_` colors\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   * - `hideDataLabel`: flag whether the data labels should be hidden in the chart for this bar.\n   * - `DataLabel`: a custom component to be used for the data label\n   * - `width`: bar width, defaults to `auto`\n   * - `opacity`: bar opacity, defaults to `1`\n   * - `stackId`: bars with the same stackId will be stacked\n   *\n   */\n  measures: MeasureConfig[];\n}\n\n/**\n * <code>import { BarChart } from '@ui5/webcomponents-react-charts/lib/next/BarChart';</code>\n */\nconst BarChart: FC<BarChartProps> = forwardRef((props: BarChartProps, ref: Ref<any>) => {\n  const {\n    loading,\n    dataset,\n    noLegend = false,\n    noAnimation = false,\n    onDataPointClick,\n    onLegendClick,\n    style,\n    className,\n    tooltip,\n    slot\n  } = props;\n\n  const chartConfig = useMemo(() => {\n    return {\n      margin: {},\n      yAxisVisible: true,\n      xAxisVisible: true,\n      gridStroke: ThemingParameters.sapList_BorderColor,\n      gridHorizontal: true,\n      gridVertical: false,\n      legendPosition: 'bottom',\n      legendHorizontalAlign: 'left',\n      barGap: 3,\n      zoomingTool: false,\n      resizeDebounce: 250,\n      ...props.chartConfig\n    };\n  }, [props.chartConfig]);\n\n  const { dimensions, measures } = usePrepareDimensionsAndMeasures(\n    props.dimensions,\n    props.measures,\n    dimensionDefaults,\n    measureDefaults\n  );\n\n  const tooltipValueFormatter = useTooltipFormatter(measures);\n\n  const primaryDimension = dimensions[0];\n  const primaryMeasure = measures[0];\n  const chartRef = useConsolidatedRef<any>(ref);\n\n  const onItemLegendClick = useLegendItemClick(onLegendClick);\n\n  const onDataPointClickInternal = useCallback(\n    (payload, i, event) => {\n      if (payload && onDataPointClick) {\n        const value = payload.value.length ? payload.value[1] - payload.value[0] : payload.value;\n        onDataPointClick(\n          enrichEventWithDetails(event, {\n            dataKey: Object.keys(payload)\n              .filter((key) => key !== 'value')\n              .find((key) => payload[key] === value),\n            value,\n            payload: payload.payload,\n            dataIndex: i\n          })\n        );\n      }\n    },\n    [onDataPointClick]\n  );\n\n  const isBigDataSet = dataset?.length > 30;\n  const primaryDimensionAccessor = primaryDimension?.accessor;\n\n  const [width, legendPosition] = useLongestYAxisLabelBar(dataset, dimensions);\n  const marginChart = useChartMargin(chartConfig.margin, chartConfig.zoomingTool);\n  const [xAxisHeight] = useObserveXAxisHeights(chartRef, 1);\n\n  return (\n    <ChartContainer\n      dataset={dataset}\n      loading={loading}\n      Placeholder={BarChartPlaceholder}\n      ref={chartRef}\n      style={style}\n      className={className}\n      tooltip={tooltip}\n      slot={slot}\n      resizeDebounce={chartConfig.resizeDebounce}\n    >\n      <BarChartLib\n        margin={marginChart}\n        layout=\"vertical\"\n        data={dataset}\n        barGap={chartConfig.barGap}\n        className={typeof onDataPointClick === 'function' ? 'has-click-handler' : undefined}\n      >\n        <CartesianGrid\n          vertical={chartConfig.gridVertical}\n          horizontal={chartConfig.gridHorizontal}\n          stroke={chartConfig.gridStroke}\n        />\n        {chartConfig.xAxisVisible && (\n          <XAxis\n            interval={0}\n            type=\"number\"\n            tick={<XAxisTicks config={primaryMeasure} />}\n            axisLine={chartConfig.xAxisVisible}\n            tickLine={tickLineConfig}\n            tickFormatter={primaryMeasure?.formatter}\n            height={xAxisHeight}\n          />\n        )}\n        {chartConfig.yAxisVisible &&\n          dimensions.map((dimension, index) => {\n            return (\n              <YAxis\n                interval={dimension?.interval ?? (isBigDataSet ? 'preserveStart' : 0)}\n                type=\"category\"\n                key={dimension.accessor}\n                dataKey={dimension.accessor}\n                xAxisId={index}\n                tick={<YAxisTicks config={dimension} />}\n                tickLine={index < 1}\n                axisLine={index < 1}\n                yAxisId={index}\n                width={width[index]}\n                allowDuplicatedCategory={index === 0}\n              />\n            );\n          })}\n        {measures.map((element, index) => {\n          return (\n            <Bar\n              stackId={element.stackId}\n              fillOpacity={element.opacity}\n              key={element.accessor}\n              name={element.label ?? element.accessor}\n              strokeOpacity={element.opacity}\n              label={<ChartDataLabel config={element} chartType=\"bar\" position=\"insideRight\" />}\n              type=\"monotone\"\n              dataKey={element.accessor}\n              fill={element.color ?? `var(--sapChart_OrderedColor_${(index % 11) + 1})`}\n              stroke={element.color ?? `var(--sapChart_OrderedColor_${(index % 11) + 1})`}\n              barSize={element.width}\n              onClick={onDataPointClickInternal}\n              isAnimationActive={noAnimation === false}\n            />\n          );\n        })}\n        {!noLegend && (\n          <Legend\n            verticalAlign={chartConfig.legendPosition}\n            align={chartConfig.legendHorizontalAlign}\n            onClick={onItemLegendClick}\n            wrapperStyle={legendPosition}\n          />\n        )}\n        {chartConfig.referenceLine && (\n          <ReferenceLine\n            stroke={chartConfig.referenceLine.color}\n            x={chartConfig.referenceLine.value}\n            label={chartConfig.referenceLine.label}\n          />\n        )}\n        <Tooltip cursor={tooltipFillOpacity} formatter={tooltipValueFormatter} contentStyle={tooltipContentStyle} />\n        {chartConfig.zoomingTool && (\n          <Brush\n            y={10}\n            dataKey={primaryDimensionAccessor}\n            stroke={ThemingParameters.sapObjectHeader_BorderColor}\n            travellerWidth={10}\n            height={20}\n          />\n        )}\n      </BarChartLib>\n    </ChartContainer>\n  );\n});\n\nBarChart.displayName = 'BarChart';\n\nexport { BarChart };\n"]},"metadata":{},"sourceType":"module"}