{"ast":null,"code":"import _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\nimport { deprecationNotice } from '@ui5/webcomponents-react-base/lib/Utils';\n\nvar HSLColor = /*#__PURE__*/function () {\n  function HSLColor(hue, saturation, lightness) {\n    var alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n    _classCallCheck(this, HSLColor);\n\n    this.hue = void 0;\n    this.saturation = void 0;\n    this.lightness = void 0;\n    this.alpha = 1;\n    this.hue = hue;\n    this.saturation = saturation;\n    this.lightness = lightness;\n    this.alpha = alpha;\n    deprecationNotice('HSLColor', \"'@ui5/webcomponents-react-base/lib/HSLColor' is deprecated and will be removed in the next major release.\");\n  }\n\n  _createClass(HSLColor, [{\n    key: \"getHue\",\n    value: function getHue() {\n      return this.hue;\n    }\n  }, {\n    key: \"getSaturation\",\n    value: function getSaturation() {\n      return this.saturation;\n    }\n  }, {\n    key: \"getLightness\",\n    value: function getLightness() {\n      return this.lightness;\n    }\n  }, {\n    key: \"lighten\",\n    value: function lighten(amount) {\n      this.lightness += amount;\n      return this;\n    }\n  }, {\n    key: \"darken\",\n    value: function darken(amount) {\n      this.lightness -= amount;\n      return this;\n    }\n  }, {\n    key: \"saturate\",\n    value: function saturate(amount) {\n      this.saturation += amount;\n      return this;\n    }\n  }, {\n    key: \"desaturate\",\n    value: function desaturate(amount) {\n      this.saturation -= amount;\n      return this;\n    }\n  }, {\n    key: \"setAlpha\",\n    value: function setAlpha(amount) {\n      this.alpha = amount;\n      return this;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      if (this.alpha !== 1) {\n        return \"hsla(\".concat(this.hue, \", \").concat(this.saturation, \"%, \").concat(this.lightness, \"%, \").concat(this.alpha, \")\");\n      }\n\n      return \"hsl(\".concat(this.hue, \", \").concat(this.saturation, \"%, \").concat(this.lightness, \"%)\");\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this.toString();\n    }\n  }, {\n    key: \"clone\",\n    value: function clone() {\n      return new HSLColor(this.hue, this.saturation, this.lightness);\n    }\n    /**\n     * Copied from https://github.com/Qix-/color-convert/blob/master/conversions.js\n     */\n\n  }, {\n    key: \"toRGB\",\n    value: function toRGB() {\n      var h = this.hue / 360;\n      var s = this.saturation / 100;\n      var l = this.lightness / 100;\n      var t2;\n      var t3;\n      var val;\n\n      if (s === 0) {\n        val = l * 255;\n        return [val, val, val];\n      }\n\n      if (l < 0.5) {\n        t2 = l * (1 + s);\n      } else {\n        t2 = l + s - l * s;\n      }\n\n      var t1 = 2 * l - t2;\n      var rgb = [0, 0, 0];\n\n      for (var i = 0; i < 3; i++) {\n        t3 = h + 1 / 3 * -(i - 1);\n\n        if (t3 < 0) {\n          t3++;\n        }\n\n        if (t3 > 1) {\n          t3--;\n        }\n\n        if (6 * t3 < 1) {\n          val = t1 + (t2 - t1) * 6 * t3;\n        } else if (2 * t3 < 1) {\n          val = t2;\n        } else if (3 * t3 < 2) {\n          val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n        } else {\n          val = t1;\n        }\n\n        rgb[i] = val * 255;\n      }\n\n      return rgb;\n    }\n    /**\n     * Copied from https://github.com/styled-components/polished/blob/master/src/color/getLuminance.js\n     */\n\n  }, {\n    key: \"getLuminance\",\n    value: function getLuminance(hsl) {\n      var color = hsl ? HSLColor.of(hsl) : this;\n\n      var _color$toRGB$map = color.toRGB().map(function (value) {\n        var channel = value / 255;\n        return channel <= 0.03928 ? channel / 12.92 : Math.pow((channel + 0.055) / 1.055, 2.4);\n      }),\n          _color$toRGB$map2 = _slicedToArray(_color$toRGB$map, 3),\n          r = _color$toRGB$map2[0],\n          g = _color$toRGB$map2[1],\n          b = _color$toRGB$map2[2];\n\n      return parseFloat((0.2126 * r + 0.7152 * g + 0.0722 * b).toFixed(3));\n    }\n  }, {\n    key: \"contrast\",\n    value: function contrast() {\n      var dark = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'hsl(0, 0%, 0%)';\n      var light = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'hsl(0, 0%, 100%)';\n      var threshold = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.43; // Figure out which is actually light and dark:\n\n      if (this.getLuminance(dark) > this.getLuminance(light)) {\n        var t = light;\n        light = dark;\n        dark = t;\n      }\n\n      if (this.getLuminance() < threshold) {\n        return light;\n      } else {\n        return dark;\n      }\n    }\n  }, {\n    key: \"hsl\",\n    get: function get() {\n      return this.toString();\n    }\n  }], [{\n    key: \"of\",\n    value: function of(hue, saturation, lightness, alpha) {\n      if (typeof hue === 'string' && HSLColor.HSL_REGEX.test(hue)) {\n        return HSLColor.fromHsl(hue);\n      }\n\n      if (typeof hue === 'string' && HSLColor.HEX_REGEX.test(hue)) {\n        return HSLColor.fromHex(hue);\n      }\n\n      if (hue instanceof HSLColor) {\n        return hue;\n      }\n\n      return new HSLColor(hue, saturation, lightness, alpha);\n    }\n  }, {\n    key: \"fromHex\",\n    value: function fromHex(hex) {\n      var result = HSLColor.HEX_REGEX.exec(hex);\n      var r = parseInt(''.padEnd(2, result[1]), 16);\n      var g = parseInt(''.padEnd(2, result[2]), 16);\n      var b = parseInt(''.padEnd(2, result[3]), 16);\n      r /= 255;\n      g /= 255;\n      b /= 255;\n      var max = Math.max(r, g, b);\n      var min = Math.min(r, g, b);\n      var hue;\n      var saturation;\n      var lightness = (max + min) / 2;\n\n      if (max === min) {\n        hue = saturation = 0; // achromatic\n      } else {\n        var d = max - min;\n        saturation = lightness > 0.5 ? d / (2 - max - min) : d / (max + min);\n\n        switch (max) {\n          case r:\n            hue = (g - b) / d + (g < b ? 6 : 0);\n            break;\n\n          case g:\n            hue = (b - r) / d + 2;\n            break;\n\n          case b:\n            hue = (r - g) / d + 4;\n            break;\n        }\n\n        hue /= 6;\n      }\n\n      saturation = Math.round(saturation * 1000);\n      saturation = saturation / 10;\n      lightness = Math.round(lightness * 1000);\n      lightness = lightness / 10;\n      hue = Math.round(360 * hue * 10) / 10;\n      return new HSLColor(hue, saturation, lightness);\n    }\n  }, {\n    key: \"fromHsl\",\n    value: function fromHsl(hsl) {\n      var _HSLColor$HSL_REGEX$e = HSLColor.HSL_REGEX.exec(hsl),\n          _HSLColor$HSL_REGEX$e2 = _slicedToArray(_HSLColor$HSL_REGEX$e, 4),\n          fullMatch = _HSLColor$HSL_REGEX$e2[0],\n          hue = _HSLColor$HSL_REGEX$e2[1],\n          saturation = _HSLColor$HSL_REGEX$e2[2],\n          lightness = _HSLColor$HSL_REGEX$e2[3];\n\n      return new HSLColor(parseFloat(hue), parseFloat(saturation), parseFloat(lightness));\n    }\n  }, {\n    key: \"lighten\",\n    value: function lighten(color, amount) {\n      return HSLColor.of(color).clone().lighten(amount);\n    }\n  }, {\n    key: \"darken\",\n    value: function darken(color, amount) {\n      return HSLColor.of(color).clone().darken(amount);\n    }\n  }, {\n    key: \"saturate\",\n    value: function saturate(color, amount) {\n      return HSLColor.of(color).clone().saturate(amount);\n    }\n  }, {\n    key: \"desaturate\",\n    value: function desaturate(color, amount) {\n      return HSLColor.of(color).clone().desaturate(amount);\n    }\n  }, {\n    key: \"hsla\",\n    value: function hsla(color, amount) {\n      return HSLColor.of(color).clone().setAlpha(amount);\n    }\n  }]);\n\n  return HSLColor;\n}();\n\nHSLColor.HSL_REGEX = /(\\d{0,3}\\.?\\d*?), ?(\\d{0,3}\\.?\\d*?)%?, ?(\\d{0,3}\\.?\\d*?)%?/;\nHSLColor.HEX_REGEX = /^#([a-f\\d]{1,2})([a-f\\d]{1,2})([a-f\\d]{1,2})$/i;\nexport { HSLColor };","map":{"version":3,"sources":["../src/styling/HSLColor.ts"],"names":["HSLColor","HSL_REGEX","HEX_REGEX","hue","saturation","lightness","alpha","deprecationNotice","result","r","parseInt","g","b","max","Math","min","d","fullMatch","parseFloat","h","s","l","val","t2","t1","rgb","i","t3","color","hsl","channel","value","dark","light","threshold","t"],"mappings":"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","sourcesContent":["import { deprecationNotice } from '@ui5/webcomponents-react-base/lib/Utils';\n\nexport class HSLColor {\n  private static HSL_REGEX = /(\\d{0,3}\\.?\\d*?), ?(\\d{0,3}\\.?\\d*?)%?, ?(\\d{0,3}\\.?\\d*?)%?/;\n  private static HEX_REGEX = /^#([a-f\\d]{1,2})([a-f\\d]{1,2})([a-f\\d]{1,2})$/i;\n\n  private hue: number;\n  private saturation: number;\n  private lightness: number;\n  private alpha = 1;\n\n  constructor(hue: number, saturation: number, lightness: number, alpha = 1) {\n    this.hue = hue;\n    this.saturation = saturation;\n    this.lightness = lightness;\n    this.alpha = alpha;\n\n    deprecationNotice(\n      'HSLColor',\n      \"'@ui5/webcomponents-react-base/lib/HSLColor' is deprecated and will be removed in the next major release.\"\n    );\n  }\n\n  static of(hue: number | string | HSLColor, saturation?: number, lightness?: number, alpha?: number): HSLColor {\n    if (typeof hue === 'string' && HSLColor.HSL_REGEX.test(hue)) {\n      return HSLColor.fromHsl(hue);\n    }\n    if (typeof hue === 'string' && HSLColor.HEX_REGEX.test(hue)) {\n      return HSLColor.fromHex(hue);\n    }\n    if (hue instanceof HSLColor) {\n      return hue;\n    }\n    return new HSLColor(hue as number, saturation, lightness, alpha);\n  }\n\n  private static fromHex(hex: string) {\n    const result = HSLColor.HEX_REGEX.exec(hex);\n\n    let r = parseInt(''.padEnd(2, result[1]), 16);\n    let g = parseInt(''.padEnd(2, result[2]), 16);\n    let b = parseInt(''.padEnd(2, result[3]), 16);\n\n    r /= 255;\n    g /= 255;\n    b /= 255;\n    const max = Math.max(r, g, b);\n    const min = Math.min(r, g, b);\n    let hue;\n    let saturation;\n    let lightness = (max + min) / 2;\n\n    if (max === min) {\n      hue = saturation = 0; // achromatic\n    } else {\n      const d = max - min;\n      saturation = lightness > 0.5 ? d / (2 - max - min) : d / (max + min);\n      switch (max) {\n        case r:\n          hue = (g - b) / d + (g < b ? 6 : 0);\n          break;\n        case g:\n          hue = (b - r) / d + 2;\n          break;\n        case b:\n          hue = (r - g) / d + 4;\n          break;\n      }\n      hue /= 6;\n    }\n\n    saturation = Math.round(saturation * 1000);\n    saturation = saturation / 10;\n    lightness = Math.round(lightness * 1000);\n    lightness = lightness / 10;\n    hue = Math.round(360 * hue * 10) / 10;\n\n    return new HSLColor(hue, saturation, lightness);\n  }\n\n  private static fromHsl(hsl: string): HSLColor {\n    const [fullMatch, hue, saturation, lightness] = HSLColor.HSL_REGEX.exec(hsl);\n    return new HSLColor(parseFloat(hue), parseFloat(saturation), parseFloat(lightness));\n  }\n\n  static lighten(color: HSLColor | string, amount: number) {\n    return HSLColor.of(color).clone().lighten(amount);\n  }\n\n  static darken(color: HSLColor | string, amount: number) {\n    return HSLColor.of(color).clone().darken(amount);\n  }\n\n  static saturate(color: HSLColor | string, amount: number) {\n    return HSLColor.of(color).clone().saturate(amount);\n  }\n\n  static desaturate(color: HSLColor | string, amount: number) {\n    return HSLColor.of(color).clone().desaturate(amount);\n  }\n\n  static hsla(color: HSLColor | string, amount: number) {\n    return HSLColor.of(color).clone().setAlpha(amount);\n  }\n\n  getHue() {\n    return this.hue;\n  }\n\n  getSaturation() {\n    return this.saturation;\n  }\n\n  getLightness() {\n    return this.lightness;\n  }\n\n  lighten(amount: number) {\n    this.lightness += amount;\n    return this;\n  }\n\n  darken(amount: number) {\n    this.lightness -= amount;\n    return this;\n  }\n\n  saturate(amount: number) {\n    this.saturation += amount;\n    return this;\n  }\n\n  desaturate(amount: number) {\n    this.saturation -= amount;\n    return this;\n  }\n\n  setAlpha(amount: number) {\n    this.alpha = amount;\n    return this;\n  }\n\n  toString() {\n    if (this.alpha !== 1) {\n      return `hsla(${this.hue}, ${this.saturation}%, ${this.lightness}%, ${this.alpha})`;\n    }\n    return `hsl(${this.hue}, ${this.saturation}%, ${this.lightness}%)`;\n  }\n\n  valueOf() {\n    return this.toString();\n  }\n\n  get hsl() {\n    return this.toString();\n  }\n\n  private clone() {\n    return new HSLColor(this.hue, this.saturation, this.lightness);\n  }\n\n  /**\n   * Copied from https://github.com/Qix-/color-convert/blob/master/conversions.js\n   */\n  toRGB() {\n    const h = this.hue / 360;\n    const s = this.saturation / 100;\n    const l = this.lightness / 100;\n    let t2;\n    let t3;\n    let val;\n\n    if (s === 0) {\n      val = l * 255;\n      return [val, val, val];\n    }\n\n    if (l < 0.5) {\n      t2 = l * (1 + s);\n    } else {\n      t2 = l + s - l * s;\n    }\n\n    const t1 = 2 * l - t2;\n\n    const rgb = [0, 0, 0];\n    for (let i = 0; i < 3; i++) {\n      t3 = h + (1 / 3) * -(i - 1);\n      if (t3 < 0) {\n        t3++;\n      }\n      if (t3 > 1) {\n        t3--;\n      }\n\n      if (6 * t3 < 1) {\n        val = t1 + (t2 - t1) * 6 * t3;\n      } else if (2 * t3 < 1) {\n        val = t2;\n      } else if (3 * t3 < 2) {\n        val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n      } else {\n        val = t1;\n      }\n\n      rgb[i] = val * 255;\n    }\n\n    return rgb;\n  }\n\n  /**\n   * Copied from https://github.com/styled-components/polished/blob/master/src/color/getLuminance.js\n   */\n  getLuminance(hsl?: string | HSLColor) {\n    const color = hsl ? HSLColor.of(hsl) : this;\n    const [r, g, b] = color.toRGB().map((value) => {\n      const channel = value / 255;\n      return channel <= 0.03928 ? channel / 12.92 : ((channel + 0.055) / 1.055) ** 2.4;\n    });\n    return parseFloat((0.2126 * r + 0.7152 * g + 0.0722 * b).toFixed(3));\n  }\n\n  contrast(\n    dark: string | HSLColor = 'hsl(0, 0%, 0%)',\n    light: string | HSLColor = 'hsl(0, 0%, 100%)',\n    threshold = 0.43\n  ) {\n    // Figure out which is actually light and dark:\n    if (this.getLuminance(dark) > this.getLuminance(light)) {\n      const t = light;\n      light = dark;\n      dark = t;\n    }\n\n    if (this.getLuminance() < threshold) {\n      return light;\n    } else {\n      return dark;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}