{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _parseColor2 = _interopRequireDefault(require(\"parse-color\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    \"default\": obj\n  };\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n/**\n * Calculate relative luminance.\n *\n * Use relative luminance definition from W3C\n * https://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n * @param color string any color string\n * @param args object optional arguments: ignoreTransparency (default: false)\n */\n\n\nvar getRelativeLuminance = function getRelativeLuminance(color) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ignoreTransparen = _ref.ignoreTransparency,\n      ignoreTransparency = _ref$ignoreTransparen === void 0 ? false : _ref$ignoreTransparen;\n\n  if (!color) {\n    throw new TypeError('getRelativeLuminance() needs you to pass the color parameter.'); // return 0;\n  }\n\n  var _parseColor = (0, _parseColor2[\"default\"])(color),\n      _parseColor$rgba = _slicedToArray(_parseColor.rgba, 4),\n      r = _parseColor$rgba[0],\n      g = _parseColor$rgba[1],\n      b = _parseColor$rgba[2],\n      a = _parseColor$rgba[3]; // @TODO: account for alpha values (rgba etc)\n  // Lea Verou has a good looking approach:\n  // https://github.com/LeaVerou/contrast-ratio\n\n\n  if (a < 1 && !ignoreTransparency) {\n    throw new TypeError('getRelativeLuminance() does not now how to handle transparency.');\n  }\n\n  var srgb = [r, g, b].map(function (value) {\n    return value / 255;\n  });\n\n  var _srgb$map = srgb.map(function (value) {\n    return value <= 0.03928 ? value / 12.92 : Math.pow((value + 0.055) / 1.055, 2.4);\n  }),\n      _srgb$map2 = _slicedToArray(_srgb$map, 3),\n      R = _srgb$map2[0],\n      G = _srgb$map2[1],\n      B = _srgb$map2[2];\n\n  var L = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n  return L;\n};\n\nvar _default = getRelativeLuminance;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/get-relative-luminance/build/index.js"],"names":["Object","defineProperty","exports","value","_parseColor2","_interopRequireDefault","require","obj","__esModule","_slicedToArray","arr","i","_arrayWithHoles","_iterableToArrayLimit","_nonIterableRest","TypeError","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","length","err","Array","isArray","getRelativeLuminance","color","_ref","arguments","_ref$ignoreTransparen","ignoreTransparency","_parseColor","_parseColor$rgba","rgba","r","g","b","a","srgb","map","_srgb$map","Math","pow","_srgb$map2","R","G","B","L","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\n\nvar _parseColor2 = _interopRequireDefault(require(\"parse-color\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nfunction _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }\n\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); }\n\nfunction _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"] != null) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; }\n\nfunction _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }\n\n/**\n * Calculate relative luminance.\n *\n * Use relative luminance definition from W3C\n * https://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n * @param color string any color string\n * @param args object optional arguments: ignoreTransparency (default: false)\n */\nvar getRelativeLuminance = function getRelativeLuminance(color) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref$ignoreTransparen = _ref.ignoreTransparency,\n      ignoreTransparency = _ref$ignoreTransparen === void 0 ? false : _ref$ignoreTransparen;\n\n  if (!color) {\n    throw new TypeError('getRelativeLuminance() needs you to pass the color parameter.'); // return 0;\n  }\n\n  var _parseColor = (0, _parseColor2[\"default\"])(color),\n      _parseColor$rgba = _slicedToArray(_parseColor.rgba, 4),\n      r = _parseColor$rgba[0],\n      g = _parseColor$rgba[1],\n      b = _parseColor$rgba[2],\n      a = _parseColor$rgba[3]; // @TODO: account for alpha values (rgba etc)\n  // Lea Verou has a good looking approach:\n  // https://github.com/LeaVerou/contrast-ratio\n\n\n  if (a < 1 && !ignoreTransparency) {\n    throw new TypeError('getRelativeLuminance() does not now how to handle transparency.');\n  }\n\n  var srgb = [r, g, b].map(function (value) {\n    return value / 255;\n  });\n\n  var _srgb$map = srgb.map(function (value) {\n    return value <= 0.03928 ? value / 12.92 : Math.pow((value + 0.055) / 1.055, 2.4);\n  }),\n      _srgb$map2 = _slicedToArray(_srgb$map, 3),\n      R = _srgb$map2[0],\n      G = _srgb$map2[1],\n      B = _srgb$map2[2];\n\n  var L = 0.2126 * R + 0.7152 * G + 0.0722 * B;\n  return L;\n};\n\nvar _default = getRelativeLuminance;\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}