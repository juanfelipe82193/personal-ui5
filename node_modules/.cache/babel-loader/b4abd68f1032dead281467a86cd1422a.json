{"ast":null,"code":"import _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nimport { useConsolidatedRef } from '@ui5/webcomponents-react-base/lib/useConsolidatedRef';\nimport { enrichEventWithDetails } from '@ui5/webcomponents-react-base/lib/Utils';\nimport { ChartDataLabel } from '@ui5/webcomponents-react-charts/lib/components/ChartDataLabel';\nimport { XAxisTicks } from '@ui5/webcomponents-react-charts/lib/components/XAxisTicks';\nimport { YAxisTicks } from '@ui5/webcomponents-react-charts/lib/components/YAxisTicks';\nimport { LineChartPlaceholder } from '@ui5/webcomponents-react-charts/lib/LineChartPlaceholder';\nimport { ChartContainer } from '@ui5/webcomponents-react-charts/lib/next/ChartContainer';\nimport { useLegendItemClick } from '@ui5/webcomponents-react-charts/lib/useLegendItemClick';\nimport React, { useMemo, useState, useRef, useEffect, useCallback, forwardRef } from 'react';\nimport { LineChart as LineChart$1, CartesianGrid, XAxis, YAxis, Line, Legend, ReferenceLine, Tooltip, Brush } from 'recharts';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport { getTextWidth } from '@ui5/webcomponents-react-charts/lib/Utils';\nimport { getValueByDataKey } from 'recharts/lib/util/ChartUtils';\nimport debounce from 'lodash.debounce';\n\nvar useChartMargin = function useChartMargin(margin, hasZoomingTool) {\n  return useMemo(function () {\n    var _margin$right, _margin$top, _margin$bottom, _margin$left;\n\n    return {\n      right: (_margin$right = margin === null || margin === void 0 ? void 0 : margin.right) !== null && _margin$right !== void 0 ? _margin$right : 30,\n      top: ((_margin$top = margin === null || margin === void 0 ? void 0 : margin.top) !== null && _margin$top !== void 0 ? _margin$top : hasZoomingTool) ? 40 : 20,\n      bottom: (_margin$bottom = margin === null || margin === void 0 ? void 0 : margin.bottom) !== null && _margin$bottom !== void 0 ? _margin$bottom : 20,\n      left: (_margin$left = margin === null || margin === void 0 ? void 0 : margin.left) !== null && _margin$left !== void 0 ? _margin$left : 10\n    };\n  }, [margin, hasZoomingTool]);\n};\n\nvar defaultFormatter = function defaultFormatter(d) {\n  return d;\n};\n\nvar defaultMaxYAxisWidth = 200;\n\nvar useLongestYAxisLabel = function useLongestYAxisLabel(dataset, elements) {\n  return useMemo(function () {\n    var labelLength = 0;\n    var primaryElement = elements[0];\n\n    if (dataset instanceof Array && primaryElement) {\n      var resolveAllMeasureLabels = function resolveAllMeasureLabels(item) {\n        return elements.map(function (elementConfig) {\n          return primaryElement.formatter(getValueByDataKey(item, elementConfig.accessor, ''));\n        });\n      };\n\n      labelLength = Math.max.apply(Math, _toConsumableArray(dataset.map(resolveAllMeasureLabels).flat().map(getTextWidth)));\n      labelLength += 8;\n    }\n\n    labelLength = Math.min(labelLength, defaultMaxYAxisWidth);\n    return [labelLength, {\n      marginLeft: labelLength,\n      maxWidth: \"calc(100% - \".concat(labelLength + 10, \"px)\")\n    }];\n  }, [dataset, elements]);\n};\n\nvar defaultAxisHeight = 30;\n\nvar useObserveXAxisHeights = function useObserveXAxisHeights(chartRef, axisCount) {\n  var _useState = useState(Array(axisCount).fill(defaultAxisHeight)),\n      _useState2 = _slicedToArray(_useState, 2),\n      xAxisHeights = _useState2[0],\n      setXAxisHeights = _useState2[1];\n\n  var mostRecentXAxisHeights = useRef(xAxisHeights);\n  useEffect(function () {\n    var mutationObserver = new MutationObserver(debounce(function () {\n      var _chartRef$current;\n\n      var defaultHeights = Array(axisCount).fill(defaultAxisHeight);\n      (_chartRef$current = chartRef.current) === null || _chartRef$current === void 0 ? void 0 : _chartRef$current.querySelectorAll('.xAxis').forEach(function (xAxis, index) {\n        var _xAxis$getBBox;\n\n        var currentAxisHeight = xAxis === null || xAxis === void 0 ? void 0 : (_xAxis$getBBox = xAxis.getBBox()) === null || _xAxis$getBBox === void 0 ? void 0 : _xAxis$getBBox.height;\n\n        if (currentAxisHeight > 30) {\n          defaultHeights[index] = currentAxisHeight;\n        }\n      });\n      var arraysHaveTheSameLength = mostRecentXAxisHeights.current.length === defaultHeights.length;\n      var arrayContentIsIdentical = mostRecentXAxisHeights.current.every(function (value, index) {\n        return defaultHeights[index] === value;\n      });\n\n      if (!(arraysHaveTheSameLength && arrayContentIsIdentical)) {\n        mostRecentXAxisHeights.current = defaultHeights;\n        setXAxisHeights(defaultHeights);\n      }\n    }, 75));\n\n    if (chartRef.current) {\n      mutationObserver.observe(chartRef.current, {\n        characterData: false,\n        characterDataOldValue: false,\n        attributes: false,\n        childList: true,\n        subtree: true\n      });\n    }\n\n    return function () {\n      mutationObserver.disconnect();\n    };\n  }, [chartRef, setXAxisHeights, mostRecentXAxisHeights]);\n  return xAxisHeights;\n};\n\nvar usePrepareDimensionsAndMeasures = function usePrepareDimensionsAndMeasures(rawDimensions, rawMeasures) {\n  var dimensionDefaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var measureDefaults = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  var dimensions = useMemo(function () {\n    return rawDimensions.map(function (label) {\n      return _objectSpread(_objectSpread({}, dimensionDefaults), label);\n    });\n  }, [rawDimensions, dimensionDefaults]);\n  var measures = useMemo(function () {\n    return rawMeasures.map(function (value) {\n      return _objectSpread(_objectSpread({}, measureDefaults), value);\n    });\n  }, [rawMeasures, measureDefaults]);\n  return {\n    dimensions: dimensions,\n    measures: measures\n  };\n};\n\nvar useTooltipFormatter = function useTooltipFormatter(measures) {\n  return useCallback(function (value, name, props) {\n    var measure = measures.find(function (_ref) {\n      var accessor = _ref.accessor;\n      return accessor === props.dataKey;\n    });\n\n    if (measure && measure.formatter && typeof measure.formatter === 'function') {\n      return measure.formatter(value);\n    }\n\n    return value;\n  }, [measures]);\n};\n\nvar tickLineConfig = {\n  stroke: 'transparent'\n};\nvar tooltipContentStyle = {\n  backgroundColor: ThemingParameters.sapBackgroundColor\n};\nvar tooltipFillOpacity = {\n  fillOpacity: 0.3\n};\nvar xAxisPadding = {\n  left: 25,\n  right: 25\n};\nvar dimensionDefaults = {\n  formatter: defaultFormatter\n};\nvar measureDefaults = {\n  formatter: defaultFormatter,\n  width: 1,\n  opacity: 1\n};\n/**\n * <code>import { LineChart } from '@ui5/webcomponents-react-charts/lib/next/LineChart';</code>\n */\n\nvar LineChart = forwardRef(function (props, ref) {\n  var _ref2, _chartConfig$secondYA2, _chartConfig$secondYA3;\n\n  var dataset = props.dataset,\n      loading = props.loading,\n      _props$noLegend = props.noLegend,\n      noLegend = _props$noLegend === void 0 ? false : _props$noLegend,\n      _props$noAnimation = props.noAnimation,\n      noAnimation = _props$noAnimation === void 0 ? false : _props$noAnimation,\n      onDataPointClick = props.onDataPointClick,\n      onLegendClick = props.onLegendClick,\n      style = props.style,\n      className = props.className,\n      tooltip = props.tooltip,\n      slot = props.slot;\n  var chartConfig = useMemo(function () {\n    return _objectSpread({\n      yAxisVisible: false,\n      xAxisVisible: true,\n      gridStroke: ThemingParameters.sapList_BorderColor,\n      gridHorizontal: true,\n      gridVertical: false,\n      legendPosition: 'bottom',\n      legendHorizontalAlign: 'left',\n      zoomingTool: false,\n      resizeDebounce: 250\n    }, props.chartConfig);\n  }, [props.chartConfig]);\n\n  var _usePrepareDimensions = usePrepareDimensionsAndMeasures(props.dimensions, props.measures, dimensionDefaults, measureDefaults),\n      dimensions = _usePrepareDimensions.dimensions,\n      measures = _usePrepareDimensions.measures;\n\n  var tooltipValueFormatter = useTooltipFormatter(measures);\n  var primaryDimension = dimensions[0];\n  var primaryMeasure = measures[0];\n  var chartRef = useConsolidatedRef(ref);\n  var dataKeys = measures.map(function (_ref) {\n    var accessor = _ref.accessor;\n    return accessor;\n  });\n  var colorSecondY = chartConfig.secondYAxis ? dataKeys.findIndex(function (key) {\n    var _chartConfig$secondYA;\n\n    return key === ((_chartConfig$secondYA = chartConfig.secondYAxis) === null || _chartConfig$secondYA === void 0 ? void 0 : _chartConfig$secondYA.dataKey);\n  }) : 0;\n  var onItemLegendClick = useLegendItemClick(onLegendClick);\n  var onDataPointClickInternal = useCallback(function (payload, eventOrIndex) {\n    if (eventOrIndex.dataKey && onDataPointClick) {\n      onDataPointClick(enrichEventWithDetails({}, {\n        value: eventOrIndex.value,\n        dataKey: eventOrIndex.dataKey,\n        dataIndex: eventOrIndex.index,\n        payload: eventOrIndex.payload\n      }));\n    }\n  }, [onDataPointClick]);\n  var isBigDataSet = (_ref2 = (dataset === null || dataset === void 0 ? void 0 : dataset.length) > 30) !== null && _ref2 !== void 0 ? _ref2 : false;\n  var primaryDimensionAccessor = primaryDimension === null || primaryDimension === void 0 ? void 0 : primaryDimension.accessor;\n\n  var _useLongestYAxisLabel = useLongestYAxisLabel(dataset, measures),\n      _useLongestYAxisLabel2 = _slicedToArray(_useLongestYAxisLabel, 2),\n      yAxisWidth = _useLongestYAxisLabel2[0],\n      legendPosition = _useLongestYAxisLabel2[1];\n\n  var marginChart = useChartMargin(chartConfig.margin, chartConfig.zoomingTool);\n  var xAxisHeights = useObserveXAxisHeights(chartRef, props.dimensions.length);\n  return /*#__PURE__*/React.createElement(ChartContainer, {\n    dataset: dataset,\n    loading: loading,\n    Placeholder: LineChartPlaceholder,\n    ref: chartRef,\n    style: style,\n    className: className,\n    tooltip: tooltip,\n    slot: slot,\n    resizeDebounce: chartConfig.resizeDebounce\n  }, /*#__PURE__*/React.createElement(LineChart$1, {\n    margin: marginChart,\n    data: dataset,\n    onClick: onDataPointClickInternal,\n    className: typeof onDataPointClick === 'function' ? 'has-click-handler' : undefined\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    vertical: chartConfig.gridVertical,\n    horizontal: chartConfig.gridHorizontal,\n    stroke: chartConfig.gridStroke\n  }), chartConfig.xAxisVisible && dimensions.map(function (dimension, index) {\n    var _dimension$interval;\n\n    return /*#__PURE__*/React.createElement(XAxis, {\n      key: dimension.accessor,\n      dataKey: dimension.accessor,\n      xAxisId: index,\n      interval: (_dimension$interval = dimension === null || dimension === void 0 ? void 0 : dimension.interval) !== null && _dimension$interval !== void 0 ? _dimension$interval : isBigDataSet ? 'preserveStart' : 0,\n      tick: /*#__PURE__*/React.createElement(XAxisTicks, {\n        config: dimension\n      }),\n      tickLine: index < 1,\n      axisLine: index < 1,\n      height: xAxisHeights[index],\n      padding: xAxisPadding,\n      allowDuplicatedCategory: index === 0\n    });\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    axisLine: chartConfig.yAxisVisible,\n    tickLine: tickLineConfig,\n    yAxisId: \"left\",\n    tickFormatter: primaryMeasure === null || primaryMeasure === void 0 ? void 0 : primaryMeasure.formatter,\n    interval: 0,\n    tick: /*#__PURE__*/React.createElement(YAxisTicks, {\n      config: primaryMeasure\n    }),\n    width: yAxisWidth\n  }), ((_chartConfig$secondYA2 = chartConfig.secondYAxis) === null || _chartConfig$secondYA2 === void 0 ? void 0 : _chartConfig$secondYA2.dataKey) && /*#__PURE__*/React.createElement(YAxis, {\n    dataKey: chartConfig.secondYAxis.dataKey,\n    stroke: (_chartConfig$secondYA3 = chartConfig.secondYAxis.color) !== null && _chartConfig$secondYA3 !== void 0 ? _chartConfig$secondYA3 : \"var(--sapChart_OrderedColor_\".concat(colorSecondY % 11 + 1, \")\"),\n    label: {\n      value: chartConfig.secondYAxis.name,\n      offset: 2,\n      angle: +90,\n      position: 'center'\n    },\n    orientation: \"right\",\n    yAxisId: \"right\",\n    interval: 0\n  }), measures.map(function (element, index) {\n    var _chartConfig$secondYA4, _element$label, _element$color;\n\n    return /*#__PURE__*/React.createElement(Line, {\n      dot: !isBigDataSet,\n      yAxisId: ((_chartConfig$secondYA4 = chartConfig.secondYAxis) === null || _chartConfig$secondYA4 === void 0 ? void 0 : _chartConfig$secondYA4.dataKey) === element.accessor ? 'right' : 'left',\n      key: element.accessor,\n      name: (_element$label = element.label) !== null && _element$label !== void 0 ? _element$label : element.accessor,\n      strokeOpacity: element.opacity,\n      label: isBigDataSet ? false : /*#__PURE__*/React.createElement(ChartDataLabel, {\n        config: element,\n        chartType: \"line\",\n        position: \"top\"\n      }),\n      type: \"monotone\",\n      dataKey: element.accessor,\n      stroke: (_element$color = element.color) !== null && _element$color !== void 0 ? _element$color : \"var(--sapChart_OrderedColor_\".concat(index % 11 + 1, \")\"),\n      strokeWidth: element.width,\n      activeDot: {\n        onClick: onDataPointClickInternal\n      },\n      isAnimationActive: noAnimation === false\n    });\n  }), !noLegend && /*#__PURE__*/React.createElement(Legend, {\n    verticalAlign: chartConfig.legendPosition,\n    align: chartConfig.legendHorizontalAlign,\n    onClick: onItemLegendClick,\n    wrapperStyle: legendPosition\n  }), chartConfig.referenceLine && /*#__PURE__*/React.createElement(ReferenceLine, {\n    stroke: chartConfig.referenceLine.color,\n    y: chartConfig.referenceLine.value,\n    label: chartConfig.referenceLine.label,\n    yAxisId: 'left'\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    cursor: tooltipFillOpacity,\n    formatter: tooltipValueFormatter,\n    contentStyle: tooltipContentStyle\n  }), chartConfig.zoomingTool && /*#__PURE__*/React.createElement(Brush, {\n    y: 10,\n    dataKey: primaryDimensionAccessor,\n    stroke: ThemingParameters.sapObjectHeader_BorderColor,\n    travellerWidth: 10,\n    height: 20\n  })));\n});\nLineChart.displayName = 'LineChart';\nexport { LineChart };","map":{"version":3,"sources":["../../src/hooks/useChartMargin.ts","../../src/internal/defaults.ts","../../src/hooks/useLongestYAxisLabel.ts","../../src/hooks/useObserveXAxisHeights.ts","../../src/hooks/usePrepareDimensionsAndMeasures.ts","../../src/hooks/useTooltipFormatter.ts","../../src/internal/staticProps.ts","../../src/components/LineChart/LineChart.tsx"],"names":["useChartMargin","useMemo","right","margin","top","bottom","left","defaultFormatter","defaultMaxYAxisWidth","useLongestYAxisLabel","labelLength","primaryElement","elements","dataset","resolveAllMeasureLabels","getValueByDataKey","elementConfig","Math","marginLeft","maxWidth","defaultAxisHeight","useObserveXAxisHeights","xAxisHeights","setXAxisHeights","useState","Array","mostRecentXAxisHeights","useRef","useEffect","mutationObserver","debounce","defaultHeights","currentAxisHeight","xAxis","arraysHaveTheSameLength","arrayContentIsIdentical","chartRef","characterData","characterDataOldValue","attributes","childList","subtree","usePrepareDimensionsAndMeasures","dimensionDefaults","measureDefaults","dimensions","measures","useTooltipFormatter","useCallback","measure","accessor","props","tickLineConfig","stroke","tooltipContentStyle","backgroundColor","ThemingParameters","sapBackgroundColor","tooltipFillOpacity","fillOpacity","xAxisPadding","formatter","width","opacity","LineChart","forwardRef","loading","noLegend","noAnimation","onDataPointClick","onLegendClick","style","className","tooltip","slot","chartConfig","yAxisVisible","xAxisVisible","gridStroke","gridHorizontal","gridVertical","legendPosition","legendHorizontalAlign","zoomingTool","resizeDebounce","tooltipValueFormatter","primaryDimension","primaryMeasure","useConsolidatedRef","dataKeys","colorSecondY","key","onItemLegendClick","useLegendItemClick","onDataPointClickInternal","eventOrIndex","enrichEventWithDetails","value","dataKey","dataIndex","payload","isBigDataSet","primaryDimensionAccessor","yAxisWidth","marginChart","undefined","dimension","index","offset","angle","position","element","onClick"],"mappings":"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","sourcesContent":["import { useMemo } from 'react';\n\nexport const useChartMargin = (margin, hasZoomingTool) =>\n  useMemo(() => {\n    return {\n      right: margin?.right ?? 30,\n      top: margin?.top ?? hasZoomingTool ? 40 : 20,\n      bottom: margin?.bottom ?? 20,\n      left: margin?.left ?? 10\n    };\n  }, [margin, hasZoomingTool]);\n","export const defaultFormatter = (d) => d;\n\nexport const defaultMaxYAxisWidth = 200;\n","import { getTextWidth } from '@ui5/webcomponents-react-charts/lib/Utils';\nimport { useMemo } from 'react';\nimport { getValueByDataKey } from 'recharts/lib/util/ChartUtils';\nimport { defaultMaxYAxisWidth } from '../internal/defaults';\n\nexport const useLongestYAxisLabel = (dataset: unknown[], elements): [number, object] =>\n  useMemo(() => {\n    let labelLength = 0;\n    const primaryElement = elements[0];\n\n    if (dataset instanceof Array && primaryElement) {\n      const resolveAllMeasureLabels = (item): string[] => {\n        return elements.map((elementConfig) =>\n          primaryElement.formatter(getValueByDataKey(item, elementConfig.accessor, ''))\n        );\n      };\n      labelLength = Math.max(...dataset.map(resolveAllMeasureLabels).flat().map(getTextWidth));\n      labelLength += 8;\n    }\n\n    labelLength = Math.min(labelLength, defaultMaxYAxisWidth);\n\n    return [labelLength, { marginLeft: labelLength, maxWidth: `calc(100% - ${labelLength + 10}px)` }];\n  }, [dataset, elements]);\n","import debounce from 'lodash.debounce';\nimport { RefObject, useEffect, useRef, useState } from 'react';\n\nconst defaultAxisHeight = 30;\n\nexport const useObserveXAxisHeights = (chartRef: RefObject<SVGElement>, axisCount) => {\n  const [xAxisHeights, setXAxisHeights] = useState(Array(axisCount).fill(defaultAxisHeight));\n  const mostRecentXAxisHeights = useRef<number[]>(xAxisHeights);\n\n  useEffect(() => {\n    const mutationObserver = new MutationObserver(\n      debounce(() => {\n        const defaultHeights = Array(axisCount).fill(defaultAxisHeight);\n        chartRef.current?.querySelectorAll<SVGElement>('.xAxis').forEach((xAxis, index) => {\n          const currentAxisHeight = xAxis?.getBBox()?.height;\n          if (currentAxisHeight > 30) {\n            defaultHeights[index] = currentAxisHeight;\n          }\n        });\n\n        const arraysHaveTheSameLength = mostRecentXAxisHeights.current.length === defaultHeights.length;\n        const arrayContentIsIdentical = mostRecentXAxisHeights.current.every(\n          (value, index) => defaultHeights[index] === value\n        );\n        if (!(arraysHaveTheSameLength && arrayContentIsIdentical)) {\n          mostRecentXAxisHeights.current = defaultHeights;\n          setXAxisHeights(defaultHeights);\n        }\n      }, 75)\n    );\n\n    if (chartRef.current) {\n      mutationObserver.observe(chartRef.current, {\n        characterData: false,\n        characterDataOldValue: false,\n        attributes: false,\n        childList: true,\n        subtree: true\n      });\n    }\n    return () => {\n      mutationObserver.disconnect();\n    };\n  }, [chartRef, setXAxisHeights, mostRecentXAxisHeights]);\n\n  return xAxisHeights;\n};\n","import { useMemo } from 'react';\n\nexport const usePrepareDimensionsAndMeasures = <DimensionConfig = any, MeasureConfig = any>(\n  rawDimensions,\n  rawMeasures,\n  dimensionDefaults = {},\n  measureDefaults = {}\n) => {\n  const dimensions: DimensionConfig = useMemo(\n    () =>\n      rawDimensions.map((label) => ({\n        ...dimensionDefaults,\n        ...label\n      })),\n    [rawDimensions, dimensionDefaults]\n  );\n\n  const measures: MeasureConfig = useMemo(\n    () =>\n      rawMeasures.map((value) => ({\n        ...measureDefaults,\n        ...value\n      })),\n    [rawMeasures, measureDefaults]\n  );\n\n  return { dimensions, measures };\n};\n","import { useCallback } from 'react';\n\nexport const useTooltipFormatter = (measures) => {\n  return useCallback(\n    (value, name, props) => {\n      const measure = measures.find(({ accessor }) => accessor === props.dataKey);\n      if (measure && measure.formatter && typeof measure.formatter === 'function') {\n        return measure.formatter(value);\n      }\n      return value;\n    },\n    [measures]\n  );\n};\n","import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\n\nexport const tickLineConfig = { stroke: 'transparent' };\nexport const tooltipContentStyle = { backgroundColor: ThemingParameters.sapBackgroundColor };\nexport const tooltipFillOpacity = { fillOpacity: 0.3 };\nexport const xAxisPadding = { left: 25, right: 25 };\n","import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nimport { useConsolidatedRef } from '@ui5/webcomponents-react-base/lib/useConsolidatedRef';\nimport { enrichEventWithDetails } from '@ui5/webcomponents-react-base/lib/Utils';\nimport { ChartDataLabel } from '@ui5/webcomponents-react-charts/lib/components/ChartDataLabel';\nimport { XAxisTicks } from '@ui5/webcomponents-react-charts/lib/components/XAxisTicks';\nimport { YAxisTicks } from '@ui5/webcomponents-react-charts/lib/components/YAxisTicks';\nimport { LineChartPlaceholder } from '@ui5/webcomponents-react-charts/lib/LineChartPlaceholder';\nimport { ChartContainer } from '@ui5/webcomponents-react-charts/lib/next/ChartContainer';\nimport { useLegendItemClick } from '@ui5/webcomponents-react-charts/lib/useLegendItemClick';\nimport React, { FC, forwardRef, Ref, useCallback, useMemo } from 'react';\nimport {\n  Brush,\n  CartesianGrid,\n  Legend,\n  Line,\n  LineChart as LineChartLib,\n  ReferenceLine,\n  Tooltip,\n  XAxis,\n  YAxis\n} from 'recharts';\nimport { useChartMargin } from '../../hooks/useChartMargin';\nimport { useLongestYAxisLabel } from '../../hooks/useLongestYAxisLabel';\nimport { useObserveXAxisHeights } from '../../hooks/useObserveXAxisHeights';\nimport { usePrepareDimensionsAndMeasures } from '../../hooks/usePrepareDimensionsAndMeasures';\nimport { useTooltipFormatter } from '../../hooks/useTooltipFormatter';\nimport { IChartDimension } from '../../interfaces/IChartDimension';\nimport { IChartMeasure } from '../../interfaces/IChartMeasure';\nimport { RechartBaseProps } from '../../interfaces/RechartBaseProps';\nimport { defaultFormatter } from '../../internal/defaults';\nimport { tickLineConfig, tooltipContentStyle, tooltipFillOpacity, xAxisPadding } from '../../internal/staticProps';\n\ninterface MeasureConfig extends IChartMeasure {\n  /**\n   * Line Width\n   * @default 1\n   */\n  width?: number;\n  /**\n   * Line Opacity\n   * @default 1\n   */\n  opacity?: number;\n}\n\ninterface DimensionConfig extends IChartDimension {\n  interval?: number;\n}\n\nexport interface LineChartProps extends RechartBaseProps {\n  dimensions: DimensionConfig[];\n  /**\n   * An array of config objects. Each object is defining one line in the chart.\n   *\n   * <h4>Required properties</h4>\n   * - `accessor`: string containing the path to the dataset key this line should display. Supports object structures by using <code>'parent.child'</code>.\n   *   Can also be a getter.\n   *\n   * <h4>Optional properties</h4>\n   *\n   * - `label`: Label to display in legends or tooltips. Falls back to the <code>accessor</code> if not present.\n   * - `color`: any valid CSS Color or CSS Variable. Defaults to the `sapChart_Ordinal` colors\n   * - `formatter`: function will be called for each data label and allows you to format it according to your needs\n   * - `hideDataLabel`: flag whether the data labels should be hidden in the chart for this line.\n   * - `DataLabel`: a custom component to be used for the data label\n   * - `width`: line width, defaults to `1`\n   * - `opacity`: line opacity, defaults to `1`\n   *\n   */\n  measures: MeasureConfig[];\n}\n\nconst dimensionDefaults = {\n  formatter: defaultFormatter\n};\n\nconst measureDefaults = {\n  formatter: defaultFormatter,\n  width: 1,\n  opacity: 1\n};\n\n/**\n * <code>import { LineChart } from '@ui5/webcomponents-react-charts/lib/next/LineChart';</code>\n */\nconst LineChart: FC<LineChartProps> = forwardRef((props: LineChartProps, ref: Ref<any>) => {\n  const {\n    dataset,\n    loading,\n    noLegend = false,\n    noAnimation = false,\n    onDataPointClick,\n    onLegendClick,\n    style,\n    className,\n    tooltip,\n    slot\n  } = props;\n\n  const chartConfig = useMemo(() => {\n    return {\n      yAxisVisible: false,\n      xAxisVisible: true,\n      gridStroke: ThemingParameters.sapList_BorderColor,\n      gridHorizontal: true,\n      gridVertical: false,\n      legendPosition: 'bottom',\n      legendHorizontalAlign: 'left',\n      zoomingTool: false,\n      resizeDebounce: 250,\n      ...props.chartConfig\n    };\n  }, [props.chartConfig]);\n\n  const { dimensions, measures } = usePrepareDimensionsAndMeasures(\n    props.dimensions,\n    props.measures,\n    dimensionDefaults,\n    measureDefaults\n  );\n\n  const tooltipValueFormatter = useTooltipFormatter(measures);\n\n  const primaryDimension = dimensions[0];\n  const primaryMeasure = measures[0];\n\n  const chartRef = useConsolidatedRef<any>(ref);\n\n  const dataKeys = measures.map(({ accessor }) => accessor);\n  const colorSecondY = chartConfig.secondYAxis\n    ? dataKeys.findIndex((key) => key === chartConfig.secondYAxis?.dataKey)\n    : 0;\n\n  const onItemLegendClick = useLegendItemClick(onLegendClick);\n\n  const onDataPointClickInternal = useCallback(\n    (payload, eventOrIndex) => {\n      if (eventOrIndex.dataKey && onDataPointClick) {\n        onDataPointClick(\n          enrichEventWithDetails(\n            {},\n            {\n              value: eventOrIndex.value,\n              dataKey: eventOrIndex.dataKey,\n              dataIndex: eventOrIndex.index,\n              payload: eventOrIndex.payload\n            }\n          )\n        );\n      }\n    },\n    [onDataPointClick]\n  );\n\n  const isBigDataSet = dataset?.length > 30 ?? false;\n  const primaryDimensionAccessor = primaryDimension?.accessor;\n\n  const [yAxisWidth, legendPosition] = useLongestYAxisLabel(dataset, measures);\n  const marginChart = useChartMargin(chartConfig.margin, chartConfig.zoomingTool);\n  const xAxisHeights = useObserveXAxisHeights(chartRef, props.dimensions.length);\n\n  return (\n    <ChartContainer\n      dataset={dataset}\n      loading={loading}\n      Placeholder={LineChartPlaceholder}\n      ref={chartRef}\n      style={style}\n      className={className}\n      tooltip={tooltip}\n      slot={slot}\n      resizeDebounce={chartConfig.resizeDebounce}\n    >\n      <LineChartLib\n        margin={marginChart}\n        data={dataset}\n        onClick={onDataPointClickInternal}\n        className={typeof onDataPointClick === 'function' ? 'has-click-handler' : undefined}\n      >\n        <CartesianGrid\n          vertical={chartConfig.gridVertical}\n          horizontal={chartConfig.gridHorizontal}\n          stroke={chartConfig.gridStroke}\n        />\n        {chartConfig.xAxisVisible &&\n          dimensions.map((dimension, index) => {\n            return (\n              <XAxis\n                key={dimension.accessor}\n                dataKey={dimension.accessor}\n                xAxisId={index}\n                interval={dimension?.interval ?? (isBigDataSet ? 'preserveStart' : 0)}\n                tick={<XAxisTicks config={dimension} />}\n                tickLine={index < 1}\n                axisLine={index < 1}\n                height={xAxisHeights[index]}\n                padding={xAxisPadding}\n                allowDuplicatedCategory={index === 0}\n              />\n            );\n          })}\n        <YAxis\n          axisLine={chartConfig.yAxisVisible}\n          tickLine={tickLineConfig}\n          yAxisId=\"left\"\n          tickFormatter={primaryMeasure?.formatter}\n          interval={0}\n          tick={<YAxisTicks config={primaryMeasure} />}\n          width={yAxisWidth}\n        />\n        {chartConfig.secondYAxis?.dataKey && (\n          <YAxis\n            dataKey={chartConfig.secondYAxis.dataKey}\n            stroke={chartConfig.secondYAxis.color ?? `var(--sapChart_OrderedColor_${(colorSecondY % 11) + 1})`}\n            label={{ value: chartConfig.secondYAxis.name, offset: 2, angle: +90, position: 'center' }}\n            orientation=\"right\"\n            yAxisId=\"right\"\n            interval={0}\n          />\n        )}\n        {measures.map((element, index) => {\n          return (\n            <Line\n              dot={!isBigDataSet}\n              yAxisId={chartConfig.secondYAxis?.dataKey === element.accessor ? 'right' : 'left'}\n              key={element.accessor}\n              name={element.label ?? element.accessor}\n              strokeOpacity={element.opacity}\n              label={isBigDataSet ? false : <ChartDataLabel config={element} chartType=\"line\" position=\"top\" />}\n              type=\"monotone\"\n              dataKey={element.accessor}\n              stroke={element.color ?? `var(--sapChart_OrderedColor_${(index % 11) + 1})`}\n              strokeWidth={element.width}\n              activeDot={{ onClick: onDataPointClickInternal }}\n              isAnimationActive={noAnimation === false}\n            />\n          );\n        })}\n        {!noLegend && (\n          <Legend\n            verticalAlign={chartConfig.legendPosition}\n            align={chartConfig.legendHorizontalAlign}\n            onClick={onItemLegendClick}\n            wrapperStyle={legendPosition}\n          />\n        )}\n        {chartConfig.referenceLine && (\n          <ReferenceLine\n            stroke={chartConfig.referenceLine.color}\n            y={chartConfig.referenceLine.value}\n            label={chartConfig.referenceLine.label}\n            yAxisId={'left'}\n          />\n        )}\n        <Tooltip cursor={tooltipFillOpacity} formatter={tooltipValueFormatter} contentStyle={tooltipContentStyle} />\n        {chartConfig.zoomingTool && (\n          <Brush\n            y={10}\n            dataKey={primaryDimensionAccessor}\n            stroke={ThemingParameters.sapObjectHeader_BorderColor}\n            travellerWidth={10}\n            height={20}\n          />\n        )}\n      </LineChartLib>\n    </ChartContainer>\n  );\n});\n\nLineChart.displayName = 'LineChart';\n\nexport { LineChart };\n"]},"metadata":{},"sourceType":"module"}