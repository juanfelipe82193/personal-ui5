{"ast":null,"code":"import _toConsumableArray from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _createForOfIteratorHelper from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _classCallCheck from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\n\nexport var TemplateInstance = /*#__PURE__*/function () {\n  function TemplateInstance(template, processor, options) {\n    _classCallCheck(this, TemplateInstance);\n\n    this.__parts = [];\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  _createClass(TemplateInstance, [{\n    key: \"update\",\n    value: function update(values) {\n      var i = 0;\n\n      var _iterator = _createForOfIteratorHelper(this.__parts),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var part = _step.value;\n\n          if (part !== undefined) {\n            part.setValue(values[i]);\n          }\n\n          i++;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var _iterator2 = _createForOfIteratorHelper(this.__parts),\n          _step2;\n\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _part = _step2.value;\n\n          if (_part !== undefined) {\n            _part.commit();\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"_clone\",\n    value: function _clone() {\n      // There are a number of steps in the lifecycle of a template instance's\n      // DOM fragment:\n      //  1. Clone - create the instance fragment\n      //  2. Adopt - adopt into the main document\n      //  3. Process - find part markers and create parts\n      //  4. Upgrade - upgrade custom elements\n      //  5. Update - set node, attribute, property, etc., values\n      //  6. Connect - connect to the document. Optional and outside of this\n      //     method.\n      //\n      // We have a few constraints on the ordering of these steps:\n      //  * We need to upgrade before updating, so that property values will pass\n      //    through any property setters.\n      //  * We would like to process before upgrading so that we're sure that the\n      //    cloned fragment is inert and not disturbed by self-modifying DOM.\n      //  * We want custom elements to upgrade even in disconnected fragments.\n      //\n      // Given these constraints, with full custom elements support we would\n      // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n      //\n      // But Safari does not implement CustomElementRegistry#upgrade, so we\n      // can not implement that order and still have upgrade-before-update and\n      // upgrade disconnected fragments. So we instead sacrifice the\n      // process-before-upgrade constraint, since in Custom Elements v1 elements\n      // must not modify their light DOM in the constructor. We still have issues\n      // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n      // that don't strictly adhere to the no-modification rule because shadow\n      // DOM, which may be created in the constructor, is emulated by being placed\n      // in the light DOM.\n      //\n      // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n      // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n      // in one step.\n      //\n      // The Custom Elements v1 polyfill supports upgrade(), so the order when\n      // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n      // Connect.\n      var fragment = isCEPolyfill ? this.template.element.content.cloneNode(true) : document.importNode(this.template.element.content, true);\n      var stack = [];\n      var parts = this.template.parts; // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n\n      var walker = document.createTreeWalker(fragment, 133\n      /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */\n      , null, false);\n      var partIndex = 0;\n      var nodeIndex = 0;\n      var part;\n      var node = walker.nextNode(); // Loop through all the nodes and parts of a template\n\n      while (partIndex < parts.length) {\n        part = parts[partIndex];\n\n        if (!isTemplatePartActive(part)) {\n          this.__parts.push(undefined);\n\n          partIndex++;\n          continue;\n        } // Progress the tree walker until we find our next part's node.\n        // Note that multiple parts may share the same node (attribute parts\n        // on a single element), so this loop may not run at all.\n\n\n        while (nodeIndex < part.index) {\n          nodeIndex++;\n\n          if (node.nodeName === 'TEMPLATE') {\n            stack.push(node);\n            walker.currentNode = node.content;\n          }\n\n          if ((node = walker.nextNode()) === null) {\n            // We've exhausted the content inside a nested template element.\n            // Because we still have parts (the outer for-loop), we know:\n            // - There is a template in the stack\n            // - The walker will find a nextNode outside the template\n            walker.currentNode = stack.pop();\n            node = walker.nextNode();\n          }\n        } // We've arrived at our part's node.\n\n\n        if (part.type === 'node') {\n          var _part2 = this.processor.handleTextExpression(this.options);\n\n          _part2.insertAfterNode(node.previousSibling);\n\n          this.__parts.push(_part2);\n        } else {\n          var _this$__parts;\n\n          (_this$__parts = this.__parts).push.apply(_this$__parts, _toConsumableArray(this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options)));\n        }\n\n        partIndex++;\n      }\n\n      if (isCEPolyfill) {\n        document.adoptNode(fragment);\n        customElements.upgrade(fragment);\n      }\n\n      return fragment;\n    }\n  }]);\n\n  return TemplateInstance;\n}();","map":{"version":3,"sources":["../src/lib/template-instance.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\nimport {isCEPolyfill} from './dom.js';\nimport {Part} from './part.js';\nimport {RenderOptions} from './render-options.js';\nimport {TemplateProcessor} from './template-processor.js';\nimport {isTemplatePartActive, Template, TemplatePart} from './template.js';\n\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n  private readonly __parts: Array<Part|undefined> = [];\n  readonly processor: TemplateProcessor;\n  readonly options: RenderOptions;\n  readonly template: Template;\n\n  constructor(\n      template: Template, processor: TemplateProcessor,\n      options: RenderOptions) {\n    this.template = template;\n    this.processor = processor;\n    this.options = options;\n  }\n\n  update(values: readonly unknown[]) {\n    let i = 0;\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.setValue(values[i]);\n      }\n      i++;\n    }\n    for (const part of this.__parts) {\n      if (part !== undefined) {\n        part.commit();\n      }\n    }\n  }\n\n  _clone(): DocumentFragment {\n    // There are a number of steps in the lifecycle of a template instance's\n    // DOM fragment:\n    //  1. Clone - create the instance fragment\n    //  2. Adopt - adopt into the main document\n    //  3. Process - find part markers and create parts\n    //  4. Upgrade - upgrade custom elements\n    //  5. Update - set node, attribute, property, etc., values\n    //  6. Connect - connect to the document. Optional and outside of this\n    //     method.\n    //\n    // We have a few constraints on the ordering of these steps:\n    //  * We need to upgrade before updating, so that property values will pass\n    //    through any property setters.\n    //  * We would like to process before upgrading so that we're sure that the\n    //    cloned fragment is inert and not disturbed by self-modifying DOM.\n    //  * We want custom elements to upgrade even in disconnected fragments.\n    //\n    // Given these constraints, with full custom elements support we would\n    // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n    //\n    // But Safari does not implement CustomElementRegistry#upgrade, so we\n    // can not implement that order and still have upgrade-before-update and\n    // upgrade disconnected fragments. So we instead sacrifice the\n    // process-before-upgrade constraint, since in Custom Elements v1 elements\n    // must not modify their light DOM in the constructor. We still have issues\n    // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n    // that don't strictly adhere to the no-modification rule because shadow\n    // DOM, which may be created in the constructor, is emulated by being placed\n    // in the light DOM.\n    //\n    // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n    // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n    // in one step.\n    //\n    // The Custom Elements v1 polyfill supports upgrade(), so the order when\n    // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n    // Connect.\n\n    const fragment = isCEPolyfill ?\n        this.template.element.content.cloneNode(true) as DocumentFragment :\n        document.importNode(this.template.element.content, true);\n\n    const stack: Node[] = [];\n    const parts = this.template.parts;\n    // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n    const walker = document.createTreeWalker(\n        fragment,\n        133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */,\n        null,\n        false);\n    let partIndex = 0;\n    let nodeIndex = 0;\n    let part: TemplatePart;\n    let node = walker.nextNode();\n    // Loop through all the nodes and parts of a template\n    while (partIndex < parts.length) {\n      part = parts[partIndex];\n      if (!isTemplatePartActive(part)) {\n        this.__parts.push(undefined);\n        partIndex++;\n        continue;\n      }\n\n      // Progress the tree walker until we find our next part's node.\n      // Note that multiple parts may share the same node (attribute parts\n      // on a single element), so this loop may not run at all.\n      while (nodeIndex < part.index) {\n        nodeIndex++;\n        if (node!.nodeName === 'TEMPLATE') {\n          stack.push(node!);\n          walker.currentNode = (node as HTMLTemplateElement).content;\n        }\n        if ((node = walker.nextNode()) === null) {\n          // We've exhausted the content inside a nested template element.\n          // Because we still have parts (the outer for-loop), we know:\n          // - There is a template in the stack\n          // - The walker will find a nextNode outside the template\n          walker.currentNode = stack.pop()!;\n          node = walker.nextNode();\n        }\n      }\n\n      // We've arrived at our part's node.\n      if (part.type === 'node') {\n        const part = this.processor.handleTextExpression(this.options);\n        part.insertAfterNode(node!.previousSibling!);\n        this.__parts.push(part);\n      } else {\n        this.__parts.push(...this.processor.handleAttributeExpressions(\n            node as Element, part.name, part.strings, this.options));\n      }\n      partIndex++;\n    }\n\n    if (isCEPolyfill) {\n      document.adoptNode(fragment);\n      customElements.upgrade(fragment);\n    }\n    return fragment;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}