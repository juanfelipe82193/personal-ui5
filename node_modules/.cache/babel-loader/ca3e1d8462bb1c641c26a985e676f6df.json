{"ast":null,"code":"import { getRTL } from '@ui5/webcomponents-base/dist/config/RTL';\nimport { getTheme } from '@ui5/webcomponents-base/dist/config/Theme';\nimport { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';\nimport { cssVariablesStyles } from '@ui5/webcomponents-react-base/lib/CssSizeVariables';\nimport { useI18nBundle } from '@ui5/webcomponents-react-base/lib/hooks';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nimport { ContentDensity } from '@ui5/webcomponents-react/lib/ContentDensity';\nimport React, { useMemo, useEffect } from 'react';\nimport { ThemeProvider as ThemeProvider$1 } from 'react-jss';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { GlobalStyleClasses } from '@ui5/webcomponents-react/lib/GlobalStyleClasses';\nvar GlobalStyleClassesStyles = {\n  '@global': _defineProperty({}, \".\".concat(GlobalStyleClasses.sapScrollBar), {\n    '&::-webkit-scrollbar': {\n      backgroundColor: ThemingParameters.sapScrollBar_TrackColor,\n      width: ThemingParameters.sapScrollBar_Dimension\n    },\n    '&::-webkit-scrollbar-thumb': {\n      backgroundColor: ThemingParameters.sapScrollBar_FaceColor,\n      width: ThemingParameters.sapScrollBar_Dimension,\n      borderRadius: '0.25rem',\n      '&:hover': {\n        backgroundColor: ThemingParameters.sapScrollBar_Hover_FaceColor\n      }\n    },\n    '&::-webkit-scrollbar-corner': {\n      backgroundColor: ThemingParameters.sapScrollBar_TrackColor\n    }\n  })\n};\nvar useStyles = createComponentStyles(GlobalStyleClassesStyles);\n\nvar cssVarsPonyfillNeeded = function cssVarsPonyfillNeeded() {\n  return !!window.CSSVarsPonyfill;\n}; // inject the size variables first before the ThemeProvider Component is mounted, otherwise there will be some flickering\n\n\nif (!document.querySelector('style[data-ui5-webcomponents-react-sizes]')) {\n  var variables = document.createElement('style');\n  variables.setAttribute('data-ui5-webcomponents-react-sizes', '');\n  variables.innerHTML = cssVariablesStyles;\n  document.head.appendChild(variables);\n}\n/**\n * <code>import { ThemeProvider } from '@ui5/webcomponents-react/lib/ThemeProvider';</code>\n */\n\n\nvar ThemeProvider = function ThemeProvider(props) {\n  var children = props.children;\n  var isCompactSize = document.body.classList.contains('ui5-content-density-compact');\n  useStyles();\n  useI18nBundle('@ui5/webcomponents-react');\n  var theme = getTheme();\n  var themeContext = useMemo(function () {\n    return {\n      theme: theme,\n      contentDensity: isCompactSize ? ContentDensity.Compact : ContentDensity.Cozy,\n      parameters: ThemingParameters,\n      rtl: getRTL()\n    };\n  }, [theme, isCompactSize]);\n  useEffect(function () {\n    if (cssVarsPonyfillNeeded()) {\n      window.CSSVarsPonyfill.cssVars({\n        rootElement: document.head,\n        include: 'style[data-ui5-webcomponents-react-sizes],style[data-jss]',\n        watch: true,\n        silent: true\n      });\n    }\n\n    if (getRTL()) {\n      document.dir = 'rtl';\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(ThemeProvider$1, {\n    theme: themeContext\n  }, children);\n};\n\nThemeProvider.displayName = 'ThemeProvider';\nexport { ThemeProvider };","map":{"version":3,"sources":["../src/components/ThemeProvider/GlobalStyleClasses.jss.ts","../src/components/ThemeProvider/index.tsx"],"names":["GlobalStyleClassesStyles","GlobalStyleClasses","backgroundColor","ThemingParameters","width","sapScrollBar_Dimension","borderRadius","sapScrollBar_Hover_FaceColor","sapScrollBar_TrackColor","useStyles","createComponentStyles","cssVarsPonyfillNeeded","window","document","variables","ThemeProvider","children","props","isCompactSize","useI18nBundle","theme","getTheme","themeContext","useMemo","contentDensity","ContentDensity","parameters","rtl","getRTL","useEffect","rootElement","include","watch","silent"],"mappings":";;;;;;;;;;;AAGO,IAAMA,wBAAwB,GAAG;AACtC,aAAA,eAAA,CAAA,EAAA,EAAA,IAAA,MAAA,CACOC,kBAAkB,CADzB,YAAA,CAAA,EAC2C;AACvC,4BAAwB;AACtBC,MAAAA,eAAe,EAAEC,iBAAiB,CADZ,uBAAA;AAEtBC,MAAAA,KAAK,EAAED,iBAAiB,CAACE;AAFH,KADe;AAKvC,kCAA8B;AAC5BH,MAAAA,eAAe,EAAEC,iBAAiB,CADN,sBAAA;AAE5BC,MAAAA,KAAK,EAAED,iBAAiB,CAFI,sBAAA;AAG5BG,MAAAA,YAAY,EAHgB,SAAA;AAI5B,iBAAW;AACTJ,QAAAA,eAAe,EAAEC,iBAAiB,CAACI;AAD1B;AAJiB,KALS;AAavC,mCAA+B;AAC7BL,MAAAA,eAAe,EAAEC,iBAAiB,CAACK;AADN;AAbQ,GAD3C;AADsC,CAAjC;ACSP,IAAMC,SAAS,GAAGC,qBAAqB,CAAvC,wBAAuC,CAAvC;;AAUA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAA;AAAA,SAAM,CAAC,CAACC,MAAM,CAAd,eAAA;AAA9B,CAAA,C,CAMA;;;AACA,IAAI,CAACC,QAAQ,CAARA,aAAAA,CAAL,2CAAKA,CAAL,EAA0E;AACxE,MAAMC,SAAS,GAAGD,QAAQ,CAARA,aAAAA,CAAlB,OAAkBA,CAAlB;AACAC,EAAAA,SAAS,CAATA,YAAAA,CAAAA,oCAAAA,EAAAA,EAAAA;AACAA,EAAAA,SAAS,CAATA,SAAAA,GAAAA,kBAAAA;AACAD,EAAAA,QAAQ,CAARA,IAAAA,CAAAA,WAAAA,CAAAA,SAAAA;AACD;AAED;;;;;IAGME,aAAqC,GAAG,SAAxCA,aAAwC,CAAA,KAAA,EAA+B;AAAA,MACnEC,QADmE,GACtDC,KADsD,CAAA,QAAA;AAE3E,MAAMC,aAAa,GAAGL,QAAQ,CAARA,IAAAA,CAAAA,SAAAA,CAAAA,QAAAA,CAAtB,6BAAsBA,CAAtB;AACAJ,EAAAA,SAAS;AACTU,EAAAA,aAAa,CAAbA,0BAAa,CAAbA;AAEA,MAAMC,KAAK,GAAGC,QAAd,EAAA;AAEA,MAAMC,YAAsB,GAAGC,OAAO,CAAC,YAAM;AAC3C,WAAO;AACLH,MAAAA,KAAK,EADA,KAAA;AAELI,MAAAA,cAAc,EAAEN,aAAa,GAAGO,cAAc,CAAjB,OAAA,GAA4BA,cAAc,CAFlE,IAAA;AAGLC,MAAAA,UAAU,EAHL,iBAAA;AAILC,MAAAA,GAAG,EAAEC,MAAM;AAJN,KAAP;AADoC,GAAA,EAOnC,CAAA,KAAA,EAPH,aAOG,CAPmC,CAAtC;AASAC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIlB,qBAAJ,EAAA,EAA6B;AAC3BC,MAAAA,MAAM,CAANA,eAAAA,CAAAA,OAAAA,CAA+B;AAC7BkB,QAAAA,WAAW,EAAEjB,QAAQ,CADQ,IAAA;AAE7BkB,QAAAA,OAAO,EAFsB,2DAAA;AAG7BC,QAAAA,KAAK,EAHwB,IAAA;AAI7BC,QAAAA,MAAM,EAAE;AAJqB,OAA/BrB;AAMD;;AACD,QAAIgB,MAAJ,EAAA,EAAc;AACZf,MAAAA,QAAQ,CAARA,GAAAA,GAAAA,KAAAA;AACD;AAXM,GAAA,EAATgB,EAAS,CAATA;AAcA,SAAA,aAAO,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AAAuB,IAAA,KAAK,EAAEP;AAA9B,GAAA,EAAP,QAAO,CAAP;AACD,C;;AAEDP,aAAa,CAAbA,WAAAA,GAAAA,eAAAA","sourcesContent":["import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nimport { GlobalStyleClasses } from '@ui5/webcomponents-react/lib/GlobalStyleClasses';\n\nexport const GlobalStyleClassesStyles = {\n  '@global': {\n    [`.${GlobalStyleClasses.sapScrollBar}`]: {\n      '&::-webkit-scrollbar': {\n        backgroundColor: ThemingParameters.sapScrollBar_TrackColor,\n        width: ThemingParameters.sapScrollBar_Dimension\n      },\n      '&::-webkit-scrollbar-thumb': {\n        backgroundColor: ThemingParameters.sapScrollBar_FaceColor,\n        width: ThemingParameters.sapScrollBar_Dimension,\n        borderRadius: '0.25rem',\n        '&:hover': {\n          backgroundColor: ThemingParameters.sapScrollBar_Hover_FaceColor\n        }\n      },\n      '&::-webkit-scrollbar-corner': {\n        backgroundColor: ThemingParameters.sapScrollBar_TrackColor\n      }\n    }\n  }\n};\n","import { getRTL } from '@ui5/webcomponents-base/dist/config/RTL';\nimport { getTheme } from '@ui5/webcomponents-base/dist/config/Theme';\nimport { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';\nimport { cssVariablesStyles } from '@ui5/webcomponents-react-base/lib/CssSizeVariables';\nimport { useI18nBundle } from '@ui5/webcomponents-react-base/lib/hooks';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nimport { ContentDensity } from '@ui5/webcomponents-react/lib/ContentDensity';\nimport React, { FC, ReactNode, useEffect, useMemo } from 'react';\nimport { ThemeProvider as ReactJssThemeProvider } from 'react-jss';\nimport { JSSTheme } from '../../interfaces/JSSTheme';\nimport { GlobalStyleClassesStyles } from './GlobalStyleClasses.jss';\n\nconst useStyles = createComponentStyles(GlobalStyleClassesStyles);\n\ndeclare global {\n  interface Window {\n    CSSVarsPonyfill: {\n      cssVars: (options: any) => void;\n    };\n  }\n}\n\nconst cssVarsPonyfillNeeded = () => !!window.CSSVarsPonyfill;\n\nexport interface ThemeProviderProps {\n  children: ReactNode;\n}\n\n// inject the size variables first before the ThemeProvider Component is mounted, otherwise there will be some flickering\nif (!document.querySelector('style[data-ui5-webcomponents-react-sizes]')) {\n  const variables = document.createElement('style');\n  variables.setAttribute('data-ui5-webcomponents-react-sizes', '');\n  variables.innerHTML = cssVariablesStyles;\n  document.head.appendChild(variables);\n}\n\n/**\n * <code>import { ThemeProvider } from '@ui5/webcomponents-react/lib/ThemeProvider';</code>\n */\nconst ThemeProvider: FC<ThemeProviderProps> = (props: ThemeProviderProps) => {\n  const { children } = props;\n  const isCompactSize = document.body.classList.contains('ui5-content-density-compact');\n  useStyles();\n  useI18nBundle('@ui5/webcomponents-react');\n\n  const theme = getTheme();\n\n  const themeContext: JSSTheme = useMemo(() => {\n    return {\n      theme,\n      contentDensity: isCompactSize ? ContentDensity.Compact : ContentDensity.Cozy,\n      parameters: ThemingParameters,\n      rtl: getRTL()\n    };\n  }, [theme, isCompactSize]);\n\n  useEffect(() => {\n    if (cssVarsPonyfillNeeded()) {\n      window.CSSVarsPonyfill.cssVars({\n        rootElement: document.head,\n        include: 'style[data-ui5-webcomponents-react-sizes],style[data-jss]',\n        watch: true,\n        silent: true\n      });\n    }\n    if (getRTL()) {\n      document.dir = 'rtl';\n    }\n  }, []);\n\n  return <ReactJssThemeProvider theme={themeContext}>{children}</ReactJssThemeProvider>;\n};\n\nThemeProvider.displayName = 'ThemeProvider';\n\nexport { ThemeProvider };\n"]},"metadata":{},"sourceType":"module"}