{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport { deprecationNotice } from '@ui5/webcomponents-react-base/lib/Utils';\nimport { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';\nimport { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';\nimport { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';\nimport React, { forwardRef, useMemo } from 'react';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nvar TextStyles = {\n  // Text Style\n  text: {\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontSize: ThemingParameters.sapFontSize,\n    fontWeight: 'normal',\n    color: ThemingParameters.sapTextColor,\n    display: 'inline-block',\n    boxSizing: 'border-box',\n    whiteSpace: 'pre-line',\n    wordWrap: 'break-word',\n    maxWidth: '100%'\n  },\n  renderWhitespace: {\n    whiteSpace: 'pre-wrap'\n  },\n  noWrap: {\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    wordWrap: 'normal',\n    overflow: 'hidden',\n    '&$renderWhitespace': {\n      whiteSpace: 'pre'\n    }\n  }\n};\nvar useStyles = createComponentStyles(TextStyles, {\n  name: 'Text'\n});\n/**\n * <code>import { Text } from '@ui5/webcomponents-react/lib/Text';</code>\n */\n\nvar Text = forwardRef(function (props, ref) {\n  var children = props.children,\n      renderWhitespace = props.renderWhitespace,\n      wrapping = props.wrapping,\n      width = props.width,\n      className = props.className,\n      style = props.style,\n      tooltip = props.tooltip,\n      slot = props.slot;\n  var classes = useStyles();\n  var classNameString = StyleClassHelper.of(classes.text);\n\n  if (wrapping === false) {\n    classNameString.put(classes.noWrap);\n  }\n\n  if (renderWhitespace) {\n    classNameString.put(classes.renderWhitespace);\n  }\n\n  if (className) {\n    classNameString.put(className);\n  }\n\n  var inlineStyles = useMemo(function () {\n    if (width !== null && width !== undefined) {\n      deprecationNotice('Text', 'The prop `width` is deprecated and will be removed in the v0.10.0. Please use the `style` object instead.');\n    }\n\n    return _objectSpread({\n      width: width\n    }, style);\n  }, [style, width]);\n  var passThroughProps = usePassThroughHtmlProps(props);\n  return /*#__PURE__*/React.createElement(\"span\", _extends({\n    ref: ref,\n    style: inlineStyles,\n    className: classNameString.toString(),\n    title: tooltip,\n    slot: slot\n  }, passThroughProps), children);\n});\nText.defaultProps = {\n  renderWhitespace: false,\n  wrapping: true,\n  width: null\n};\nText.displayName = 'Text';\nexport { Text };","map":{"version":3,"sources":["../src/components/Text/Text.jss.ts","../src/components/Text/index.tsx"],"names":["TextStyles","text","fontFamily","ThemingParameters","fontSize","fontWeight","color","display","boxSizing","whiteSpace","wordWrap","maxWidth","renderWhitespace","noWrap","textOverflow","overflow","useStyles","createComponentStyles","name","Text","forwardRef","children","wrapping","width","className","style","tooltip","slot","props","classes","classNameString","StyleClassHelper","inlineStyles","useMemo","deprecationNotice","passThroughProps","usePassThroughHtmlProps"],"mappings":"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","sourcesContent":["import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\n\nexport const TextStyles = {\n  // Text Style\n  text: {\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontSize: ThemingParameters.sapFontSize,\n    fontWeight: 'normal',\n    color: ThemingParameters.sapTextColor,\n    display: 'inline-block',\n    boxSizing: 'border-box',\n    whiteSpace: 'pre-line',\n    wordWrap: 'break-word',\n    maxWidth: '100%'\n  },\n  renderWhitespace: {\n    whiteSpace: 'pre-wrap'\n  },\n  noWrap: {\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    wordWrap: 'normal',\n    overflow: 'hidden',\n    '&$renderWhitespace': {\n      whiteSpace: 'pre'\n    }\n  }\n};\n","import { deprecationNotice } from '@ui5/webcomponents-react-base/lib/Utils';\nimport { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';\nimport { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';\nimport { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';\nimport React, { CSSProperties, FC, forwardRef, ReactNode, Ref, useMemo } from 'react';\nimport { CommonProps } from '../../interfaces/CommonProps';\nimport { TextStyles } from './Text.jss';\n\nexport interface TextProps extends CommonProps {\n  /**\n   * Pass the text as direct child of Text\n   */\n  children: string | JSX.Element | ReactNode;\n\n  renderWhitespace?: boolean;\n\n  wrapping?: boolean;\n\n  width?: CSSProperties['width'];\n}\n\nconst useStyles = createComponentStyles(TextStyles, { name: 'Text' });\n\n/**\n * <code>import { Text } from '@ui5/webcomponents-react/lib/Text';</code>\n */\nconst Text: FC<TextProps> = forwardRef((props: TextProps, ref: Ref<HTMLSpanElement>) => {\n  const { children, renderWhitespace, wrapping, width, className, style, tooltip, slot } = props;\n  const classes = useStyles();\n  const classNameString = StyleClassHelper.of(classes.text);\n  if (wrapping === false) {\n    classNameString.put(classes.noWrap);\n  }\n  if (renderWhitespace) {\n    classNameString.put(classes.renderWhitespace);\n  }\n  if (className) {\n    classNameString.put(className);\n  }\n\n  const inlineStyles = useMemo(() => {\n    if (width !== null && width !== undefined) {\n      deprecationNotice(\n        'Text',\n        'The prop `width` is deprecated and will be removed in the v0.10.0. Please use the `style` object instead.'\n      );\n    }\n    return {\n      width,\n      ...style\n    };\n  }, [style, width]);\n\n  const passThroughProps = usePassThroughHtmlProps(props);\n\n  return (\n    <span\n      ref={ref}\n      style={inlineStyles}\n      className={classNameString.toString()}\n      title={tooltip}\n      slot={slot}\n      {...passThroughProps}\n    >\n      {children}\n    </span>\n  );\n});\n\nText.defaultProps = {\n  renderWhitespace: false,\n  wrapping: true,\n  width: null\n};\n\nText.displayName = 'Text';\n\nexport { Text };\n"]},"metadata":{},"sourceType":"module"}