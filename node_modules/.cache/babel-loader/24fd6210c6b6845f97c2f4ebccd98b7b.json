{"ast":null,"code":"import _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';\nimport { deprecationNotice } from '@ui5/webcomponents-react-base/lib/Utils';\nimport { CurrentViewportRangeContext } from '@ui5/webcomponents-react/lib/CurrentViewportRangeContext';\nimport { Label } from '@ui5/webcomponents-react/lib/Label';\nimport React, { forwardRef, useContext, useMemo, cloneElement } from 'react';\n\nvar calculateWidth = function calculateWidth(rate) {\n  return Math.floor(100 / 12 * rate) + '%';\n};\n\nvar useStyles = createComponentStyles({\n  formItem: {\n    alignItems: 'center'\n  },\n  label: {\n    paddingRight: '0.5em'\n  },\n  content: {\n    display: 'block'\n  }\n}, {\n  name: 'FormItem'\n});\n/**\n * <code>import { FormItem } from '@ui5/webcomponents-react/lib/FormItem';</code>\n */\n\nvar FormItem = forwardRef(function (props, ref) {\n  var _labelToRender$props$;\n\n  var label = props.label,\n      labelText = props.labelText,\n      children = props.children,\n      tooltip = props.tooltip,\n      style = props.style,\n      className = props.className,\n      slot = props.slot;\n  var currentRange = useContext(CurrentViewportRangeContext);\n  var classes = useStyles();\n  var memoizedStyles = useMemo(function () {\n    var labelWidth;\n    var labelTextAlign = 'flex-end';\n    var display = 'flex';\n    var elementWidth;\n\n    switch (currentRange) {\n      case 'Phone':\n        labelWidth = '100%';\n        elementWidth = '100%';\n        display = 'block';\n        labelTextAlign = 'flex-start';\n        break;\n\n      case 'Tablet':\n        labelWidth = calculateWidth(2);\n        elementWidth = calculateWidth(10);\n        break;\n\n      case 'Desktop':\n      case 'LargeDesktop':\n        labelWidth = calculateWidth(4);\n        elementWidth = calculateWidth(8);\n        break;\n    }\n\n    return {\n      topDivStyle: _objectSpread({\n        display: display\n      }, style),\n      labelStyle: {\n        width: labelWidth,\n        justifyContent: labelTextAlign\n      },\n      elementStyle: {\n        width: elementWidth\n      }\n    };\n  }, [children, currentRange, style]);\n  var classNames = \"\".concat(classes.formItem);\n\n  if (className) {\n    classNames += \" \".concat(className);\n  }\n\n  if (labelText) {\n    deprecationNotice('FormItem', \"prop 'labelText' is deprecated and will be removed in the next major release. Please use 'label' instead.\");\n  }\n\n  var labelToRender = label !== null && label !== void 0 ? label : labelText;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: ref,\n    style: memoizedStyles.topDivStyle,\n    className: classNames,\n    title: tooltip,\n    slot: slot\n  }, typeof labelToRender === 'string' ? /*#__PURE__*/React.createElement(Label, {\n    style: memoizedStyles.labelStyle,\n    className: classes.label\n  }, labelToRender ? \"\".concat(labelToRender, \":\") : '') : cloneElement(labelToRender, {\n    style: _objectSpread(_objectSpread({}, memoizedStyles.labelStyle), labelToRender.props.style || {}),\n    className: \"\".concat(classes.label, \" \").concat((_labelToRender$props$ = labelToRender.props.className) !== null && _labelToRender$props$ !== void 0 ? _labelToRender$props$ : ''),\n    children: labelToRender.props.children ? \"\".concat(labelToRender.props.children, \":\") : ''\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: memoizedStyles.elementStyle,\n    className: classes.content\n  }, children));\n});\nFormItem.displayName = 'FormItem';\nexport { FormItem };","map":{"version":3,"sources":["../src/components/FormItem/index.tsx"],"names":["calculateWidth","Math","useStyles","createComponentStyles","formItem","alignItems","label","paddingRight","content","display","name","FormItem","forwardRef","labelText","children","tooltip","style","className","slot","props","currentRange","useContext","classes","memoizedStyles","useMemo","labelTextAlign","labelWidth","elementWidth","topDivStyle","labelStyle","width","justifyContent","elementStyle","classNames","deprecationNotice","labelToRender","cloneElement"],"mappings":"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","sourcesContent":["import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';\nimport { deprecationNotice } from '@ui5/webcomponents-react-base/lib/Utils';\nimport { CurrentViewportRangeContext } from '@ui5/webcomponents-react/lib/CurrentViewportRangeContext';\nimport { Label } from '@ui5/webcomponents-react/lib/Label';\nimport React, {\n  cloneElement,\n  FC,\n  forwardRef,\n  ReactElement,\n  ReactNode,\n  ReactNodeArray,\n  Ref,\n  useContext,\n  useMemo\n} from 'react';\nimport { CommonProps } from '../../interfaces/CommonProps';\n\nexport interface FormItemProps extends CommonProps {\n  label?: string | ReactElement;\n  /**\n   * @deprecated use label instead\n   */\n  labelText?: string; // TODO remove on next major release\n  children: ReactNode | ReactNodeArray;\n}\n\nconst calculateWidth = (rate) => {\n  return Math.floor((100 / 12) * rate) + '%';\n};\n\nconst useStyles = createComponentStyles(\n  {\n    formItem: {\n      alignItems: 'center'\n    },\n    label: {\n      paddingRight: '0.5em'\n    },\n    content: {\n      display: 'block'\n    }\n  },\n  { name: 'FormItem' }\n);\n\n/**\n * <code>import { FormItem } from '@ui5/webcomponents-react/lib/FormItem';</code>\n */\nconst FormItem: FC<FormItemProps> = forwardRef((props: FormItemProps, ref: Ref<HTMLDivElement>) => {\n  const { label, labelText, children, tooltip, style, className, slot } = props;\n\n  const currentRange = useContext(CurrentViewportRangeContext);\n\n  const classes = useStyles();\n\n  const memoizedStyles = useMemo(() => {\n    let labelWidth;\n    let labelTextAlign = 'flex-end';\n    let display = 'flex';\n    let elementWidth;\n\n    switch (currentRange) {\n      case 'Phone':\n        labelWidth = '100%';\n        elementWidth = '100%';\n        display = 'block';\n        labelTextAlign = 'flex-start';\n        break;\n      case 'Tablet':\n        labelWidth = calculateWidth(2);\n        elementWidth = calculateWidth(10);\n        break;\n      case 'Desktop':\n      case 'LargeDesktop':\n        labelWidth = calculateWidth(4);\n        elementWidth = calculateWidth(8);\n        break;\n    }\n\n    return {\n      topDivStyle: {\n        display,\n        ...style\n      },\n      labelStyle: {\n        width: labelWidth,\n        justifyContent: labelTextAlign\n      },\n      elementStyle: {\n        width: elementWidth\n      }\n    };\n  }, [children, currentRange, style]);\n\n  let classNames = `${classes.formItem}`;\n  if (className) {\n    classNames += ` ${className}`;\n  }\n\n  if (labelText) {\n    deprecationNotice(\n      'FormItem',\n      `prop 'labelText' is deprecated and will be removed in the next major release. Please use 'label' instead.`\n    );\n  }\n  const labelToRender = label ?? labelText;\n\n  return (\n    <div ref={ref} style={memoizedStyles.topDivStyle} className={classNames} title={tooltip} slot={slot}>\n      {typeof labelToRender === 'string' ? (\n        <Label style={memoizedStyles.labelStyle} className={classes.label}>\n          {labelToRender ? `${labelToRender}:` : ''}\n        </Label>\n      ) : (\n        cloneElement(labelToRender, {\n          style: { ...memoizedStyles.labelStyle, ...(labelToRender.props.style || {}) },\n          className: `${classes.label} ${labelToRender.props.className ?? ''}`,\n          children: labelToRender.props.children ? `${labelToRender.props.children}:` : ''\n        })\n      )}\n\n      <div style={memoizedStyles.elementStyle} className={classes.content}>\n        {children}\n      </div>\n    </div>\n  );\n});\n\nFormItem.displayName = 'FormItem';\n\nexport { FormItem };\n"]},"metadata":{},"sourceType":"module"}