{"ast":null,"code":"import { fetchJsonOnce, fetchTextOnce } from \"../util/FetchHelper.js\";\nimport { DEFAULT_THEME } from \"../generated/AssetParameters.js\";\nimport getFileExtension from \"../util/getFileExtension.js\";\nconst themeURLs = new Map();\nconst themeStyles = new Map();\nconst registeredPackages = new Set();\nconst registeredThemes = new Set();\n/**\n * Used to provide CSS Vars for a specific theme for a specific package.\n * The CSS Vars can be passed directly as a string (containing them), as an object with a \"_\" property(containing them in the \"_\" property), or as a URL.\n * This URL must point to a JSON file, containing a \"_\" property.\n *\n * Example usage:\n *  1) Pass the CSS Vars as a string directly.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \":root{--var1: red;}\");\n *  2) Pass the CSS Vars as an object directly\n *  registerThemeProperties(\"my-package\", \"my_theme\", {\"_\": \":root{--var1: red;}\"});\n *  3) Pass a URL to a CSS file, containing the CSS Vars. Will be fetched on demand, not upon registration.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \"http://url/to/my/theme.css\");\n *  4) Pass a URL to a JSON file, containing the CSS Vars in its \"_\" property. Will be fetched on demand, not upon registration.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \"http://url/to/my/theme.json\");\n *\n * @public\n * @param packageName - the NPM package for which CSS Vars are registered\n * @param themeName - the theme which the CSS Vars implement\n * @param style - can be one of four options: a string, an object with a \"_\" property, URL to a CSS file, or URL to a JSON file with a \"_\" property\n */\n\nconst registerThemeProperties = (packageName, themeName, style) => {\n  if (style._) {\n    // JSON object like ({\"_\": \":root\"})\n    themeStyles.set(`${packageName}_${themeName}`, style._);\n  } else if (style.includes(\":root\")) {\n    // pure string\n    themeStyles.set(`${packageName}_${themeName}`, style);\n  } else {\n    // url for fetching\n    themeURLs.set(`${packageName}_${themeName}`, style);\n  }\n\n  registeredPackages.add(packageName);\n  registeredThemes.add(themeName);\n};\n\nconst getThemeProperties = async (packageName, themeName) => {\n  const style = themeStyles.get(`${packageName}_${themeName}`);\n\n  if (style) {\n    return style;\n  }\n\n  if (!registeredThemes.has(themeName)) {\n    const regThemesStr = [...registeredThemes.values()].join(\", \");\n    console.warn(`You have requested a non-registered theme - falling back to ${DEFAULT_THEME}. Registered themes are: ${regThemesStr}`);\n    /* eslint-disable-line */\n\n    return themeStyles.get(`${packageName}_${DEFAULT_THEME}`);\n  }\n\n  const data = await fetchThemeProperties(packageName, themeName);\n  const themeProps = data._ || data;\n  themeStyles.set(`${packageName}_${themeName}`, themeProps);\n  return themeProps;\n};\n\nconst fetchThemeProperties = async (packageName, themeName) => {\n  const url = themeURLs.get(`${packageName}_${themeName}`);\n\n  if (!url) {\n    throw new Error(`You have to import the ${packageName}/dist/Assets.js module to switch to additional themes`);\n  }\n\n  return getFileExtension(url) === \".css\" ? fetchTextOnce(url) : fetchJsonOnce(url);\n};\n\nconst getRegisteredPackages = () => {\n  return registeredPackages;\n};\n\nconst isThemeRegistered = theme => {\n  return registeredThemes.has(theme);\n};\n\nexport { registerThemeProperties, getThemeProperties, getRegisteredPackages, isThemeRegistered };","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/@ui5/webcomponents-base/dist/asset-registries/Themes.js"],"names":["fetchJsonOnce","fetchTextOnce","DEFAULT_THEME","getFileExtension","themeURLs","Map","themeStyles","registeredPackages","Set","registeredThemes","registerThemeProperties","packageName","themeName","style","_","set","includes","add","getThemeProperties","get","has","regThemesStr","values","join","console","warn","data","fetchThemeProperties","themeProps","url","Error","getRegisteredPackages","isThemeRegistered","theme"],"mappings":"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","sourcesContent":["import { fetchJsonOnce, fetchTextOnce } from \"../util/FetchHelper.js\";\nimport { DEFAULT_THEME } from \"../generated/AssetParameters.js\";\nimport getFileExtension from \"../util/getFileExtension.js\";\n\nconst themeURLs = new Map();\nconst themeStyles = new Map();\nconst registeredPackages = new Set();\nconst registeredThemes = new Set();\n\n/**\n * Used to provide CSS Vars for a specific theme for a specific package.\n * The CSS Vars can be passed directly as a string (containing them), as an object with a \"_\" property(containing them in the \"_\" property), or as a URL.\n * This URL must point to a JSON file, containing a \"_\" property.\n *\n * Example usage:\n *  1) Pass the CSS Vars as a string directly.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \":root{--var1: red;}\");\n *  2) Pass the CSS Vars as an object directly\n *  registerThemeProperties(\"my-package\", \"my_theme\", {\"_\": \":root{--var1: red;}\"});\n *  3) Pass a URL to a CSS file, containing the CSS Vars. Will be fetched on demand, not upon registration.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \"http://url/to/my/theme.css\");\n *  4) Pass a URL to a JSON file, containing the CSS Vars in its \"_\" property. Will be fetched on demand, not upon registration.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \"http://url/to/my/theme.json\");\n *\n * @public\n * @param packageName - the NPM package for which CSS Vars are registered\n * @param themeName - the theme which the CSS Vars implement\n * @param style - can be one of four options: a string, an object with a \"_\" property, URL to a CSS file, or URL to a JSON file with a \"_\" property\n */\nconst registerThemeProperties = (packageName, themeName, style) => {\n\tif (style._) {\n\t\t// JSON object like ({\"_\": \":root\"})\n\t\tthemeStyles.set(`${packageName}_${themeName}`, style._);\n\t} else if (style.includes(\":root\")) {\n\t\t// pure string\n\t\tthemeStyles.set(`${packageName}_${themeName}`, style);\n\t} else {\n\t\t// url for fetching\n\t\tthemeURLs.set(`${packageName}_${themeName}`, style);\n\t}\n\tregisteredPackages.add(packageName);\n\tregisteredThemes.add(themeName);\n};\n\nconst getThemeProperties = async (packageName, themeName) => {\n\tconst style = themeStyles.get(`${packageName}_${themeName}`);\n\tif (style) {\n\t\treturn style;\n\t}\n\n\tif (!registeredThemes.has(themeName)) {\n\t\tconst regThemesStr = [...registeredThemes.values()].join(\", \");\n\t\tconsole.warn(`You have requested a non-registered theme - falling back to ${DEFAULT_THEME}. Registered themes are: ${regThemesStr}`); /* eslint-disable-line */\n\t\treturn themeStyles.get(`${packageName}_${DEFAULT_THEME}`);\n\t}\n\n\tconst data = await fetchThemeProperties(packageName, themeName);\n\tconst themeProps = data._ || data;\n\n\tthemeStyles.set(`${packageName}_${themeName}`, themeProps);\n\treturn themeProps;\n};\n\nconst fetchThemeProperties = async (packageName, themeName) => {\n\tconst url = themeURLs.get(`${packageName}_${themeName}`);\n\n\tif (!url) {\n\t\tthrow new Error(`You have to import the ${packageName}/dist/Assets.js module to switch to additional themes`);\n\t}\n\n\treturn getFileExtension(url) === \".css\" ? fetchTextOnce(url) : fetchJsonOnce(url);\n};\n\nconst getRegisteredPackages = () => {\n\treturn registeredPackages;\n};\n\nconst isThemeRegistered = theme => {\n\treturn registeredThemes.has(theme);\n};\n\nexport {\n\tregisterThemeProperties,\n\tgetThemeProperties,\n\tgetRegisteredPackages,\n\tisThemeRegistered,\n};\n"]},"metadata":{},"sourceType":"module"}