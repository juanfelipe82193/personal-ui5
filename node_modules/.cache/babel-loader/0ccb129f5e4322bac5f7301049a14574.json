{"ast":null,"code":"import _classCallCheck from '@babel/runtime/helpers/classCallCheck';\nimport _createClass from '@babel/runtime/helpers/createClass';\n/* eslint-disable no-console,no-unused-expressions */\n\nvar pad0 = function pad0(i, w) {\n  return \"000\".concat(String(i)).slice(-w);\n};\n\nvar LOG_LEVEL;\n\n(function (LOG_LEVEL) {\n  LOG_LEVEL[LOG_LEVEL[\"FATAL\"] = 0] = \"FATAL\";\n  LOG_LEVEL[LOG_LEVEL[\"ERROR\"] = 1] = \"ERROR\";\n  LOG_LEVEL[LOG_LEVEL[\"WARNING\"] = 2] = \"WARNING\";\n  LOG_LEVEL[LOG_LEVEL[\"INFO\"] = 3] = \"INFO\";\n  LOG_LEVEL[LOG_LEVEL[\"DEBUG\"] = 4] = \"DEBUG\";\n  LOG_LEVEL[LOG_LEVEL[\"TRACE\"] = 5] = \"TRACE\";\n})(LOG_LEVEL || (LOG_LEVEL = {}));\n\nvar DeviceLogger = /*#__PURE__*/function () {\n  function DeviceLogger() {\n    var defaultComponent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'DEVICE';\n\n    _classCallCheck(this, DeviceLogger);\n\n    this.defaultComponent = void 0;\n    this.sWindowName = window.top === window ? '' : \"[\".concat(window.location.pathname.split('/').slice(-1)[0], \"] \");\n    this.log(LOG_LEVEL.INFO, 'Device API logging initialized');\n    this.defaultComponent = defaultComponent;\n    return this;\n  }\n\n  _createClass(DeviceLogger, [{\n    key: \"for\",\n    value: function _for(defaultComponent) {\n      return new DeviceLogger(defaultComponent);\n    }\n  }, {\n    key: \"log\",\n    value: function log(iLevel, sMessage, sComponent) {\n      sComponent = sComponent || this.defaultComponent || '';\n      var oNow = new Date();\n      var oLogEntry = {\n        time: \"\".concat(pad0(oNow.getHours(), 2), \":\").concat(pad0(oNow.getMinutes(), 2), \":\").concat(pad0(oNow.getSeconds(), 2)),\n        date: \"\".concat(pad0(oNow.getFullYear(), 4), \"-\").concat(pad0(oNow.getMonth() + 1, 2), \"-\").concat(pad0(oNow.getDate(), 2)),\n        timestamp: oNow.getTime(),\n        level: iLevel,\n        message: sMessage || '',\n        component: sComponent || ''\n      };\n\n      if (window.console) {\n        var logText = \"\".concat(oLogEntry.date, \" \").concat(oLogEntry.time, \" \").concat(this.sWindowName).concat(oLogEntry.message, \" - \").concat(oLogEntry.component);\n\n        switch (iLevel) {\n          case LOG_LEVEL.FATAL:\n          case LOG_LEVEL.ERROR:\n            console.error(logText);\n            break;\n\n          case LOG_LEVEL.WARNING:\n            console.warn(logText);\n            break;\n\n          case LOG_LEVEL.INFO:\n            console.info ? console.info(logText) : console.log(logText);\n            break;\n          // info not available in iOS simulator\n\n          case LOG_LEVEL.DEBUG:\n            console.debug ? console.debug(logText) : console.log(logText);\n            break;\n          // debug not available in IE, fallback to log\n\n          case LOG_LEVEL.TRACE:\n            console.trace ? console.trace(logText) : console.log(logText);\n            break;\n          // trace not available in IE, fallback to log\n        }\n      }\n\n      return oLogEntry;\n    } //  Public API\n\n  }, {\n    key: \"fatal\",\n    value: function fatal(msg, component) {\n      return this.log(LOG_LEVEL.FATAL, msg, component);\n    }\n  }, {\n    key: \"error\",\n    value: function error(msg, component) {\n      return this.log(LOG_LEVEL.ERROR, msg, component);\n    }\n  }, {\n    key: \"warning\",\n    value: function warning(msg, component) {\n      return this.log(LOG_LEVEL.WARNING, msg, component);\n    }\n  }, {\n    key: \"info\",\n    value: function info(msg, component) {\n      return this.log(LOG_LEVEL.INFO, msg, component);\n    }\n  }, {\n    key: \"debug\",\n    value: function debug(msg, component) {\n      return this.log(LOG_LEVEL.DEBUG, msg, component);\n    }\n  }, {\n    key: \"trace\",\n    value: function trace(msg, component) {\n      return this.log(LOG_LEVEL.TRACE, msg, component);\n    }\n  }]);\n\n  return DeviceLogger;\n}();\n\nvar Logger = new DeviceLogger();\nexport { LOG_LEVEL, Logger };","map":{"version":3,"sources":["../src/utils/Logger.ts"],"names":["pad0","String","LOG_LEVEL","DeviceLogger","defaultComponent","sWindowName","window","iLevel","sMessage","sComponent","oNow","oLogEntry","time","date","timestamp","level","message","component","logText","console","msg","Logger"],"mappings":"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","sourcesContent":["/* eslint-disable no-console,no-unused-expressions */\n\nconst pad0 = (i: any, w: number) => `000${String(i)}`.slice(-w);\n\nexport enum LOG_LEVEL {\n  FATAL = 0,\n  ERROR = 1,\n  WARNING = 2,\n  INFO = 3,\n  DEBUG = 4,\n  TRACE = 5\n}\n\nclass DeviceLogger {\n  public defaultComponent: string;\n  public sWindowName = window.top === window ? '' : `[${window.location.pathname.split('/').slice(-1)[0]}] `;\n\n  constructor(defaultComponent = 'DEVICE') {\n    this.log(LOG_LEVEL.INFO, 'Device API logging initialized');\n    this.defaultComponent = defaultComponent;\n    return this;\n  }\n\n  public for(defaultComponent: string) {\n    return new DeviceLogger(defaultComponent);\n  }\n\n  public log(iLevel: LOG_LEVEL, sMessage: string, sComponent?: string) {\n    sComponent = sComponent || this.defaultComponent || '';\n    const oNow = new Date();\n    const oLogEntry = {\n      time: `${pad0(oNow.getHours(), 2)}:${pad0(oNow.getMinutes(), 2)}:${pad0(oNow.getSeconds(), 2)}`,\n      date: `${pad0(oNow.getFullYear(), 4)}-${pad0(oNow.getMonth() + 1, 2)}-${pad0(oNow.getDate(), 2)}`,\n      timestamp: oNow.getTime(),\n      level: iLevel,\n      message: sMessage || '',\n      component: sComponent || ''\n    };\n    if (window.console) {\n      const logText = `${oLogEntry.date} ${oLogEntry.time} ${this.sWindowName}${oLogEntry.message} - ${oLogEntry.component}`;\n      switch (iLevel) {\n        case LOG_LEVEL.FATAL:\n        case LOG_LEVEL.ERROR:\n          console.error(logText);\n          break;\n        case LOG_LEVEL.WARNING:\n          console.warn(logText);\n          break;\n        case LOG_LEVEL.INFO:\n          console.info ? console.info(logText) : console.log(logText);\n          break; // info not available in iOS simulator\n        case LOG_LEVEL.DEBUG:\n          console.debug ? console.debug(logText) : console.log(logText);\n          break; // debug not available in IE, fallback to log\n        case LOG_LEVEL.TRACE:\n          console.trace ? console.trace(logText) : console.log(logText);\n          break; // trace not available in IE, fallback to log\n      }\n    }\n    return oLogEntry;\n  }\n\n  //  Public API\n  public fatal(msg: string, component?: string) {\n    return this.log(LOG_LEVEL.FATAL, msg, component);\n  }\n\n  public error(msg: string, component?: string) {\n    return this.log(LOG_LEVEL.ERROR, msg, component);\n  }\n\n  public warning(msg: string, component?: string) {\n    return this.log(LOG_LEVEL.WARNING, msg, component);\n  }\n\n  public info(msg: string, component?: string) {\n    return this.log(LOG_LEVEL.INFO, msg, component);\n  }\n\n  public debug(msg: string, component?: string) {\n    return this.log(LOG_LEVEL.DEBUG, msg, component);\n  }\n\n  public trace(msg: string, component?: string) {\n    return this.log(LOG_LEVEL.TRACE, msg, component);\n  }\n}\n\nexport const Logger = new DeviceLogger();\n"]},"metadata":{},"sourceType":"module"}