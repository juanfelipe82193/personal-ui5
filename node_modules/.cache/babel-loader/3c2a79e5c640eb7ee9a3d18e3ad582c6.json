{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport var isCEPolyfill = typeof window !== 'undefined' && window.customElements != null && window.customElements.polyfillWrapFlushCallback !== undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\n\nexport var reparentNodes = function reparentNodes(container, start) {\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var before = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  while (start !== end) {\n    var n = start.nextSibling;\n    container.insertBefore(start, before);\n    start = n;\n  }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\n\nexport var removeNodes = function removeNodes(container, start) {\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  while (start !== end) {\n    var n = start.nextSibling;\n    container.removeChild(start);\n    start = n;\n  }\n};","map":{"version":3,"sources":["../src/lib/dom.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAsBA;;;AAGA,OAAO,IAAM,YAAY,GAAG,OAAO,MAAP,KAAkB,WAAlB,IACxB,MAAM,CAAC,cAAP,IAAyB,IADD,IAEvB,MAAM,CAAC,cAAP,CAA4C,yBAA5C,KACG,SAHD;AAKP;;;;;;AAKA,OAAO,IAAM,aAAa,GACtB,SADS,aACT,CAAC,SAAD,EACC,KADD,EAGmC;AAAA,MADlC,GACkC,uEADjB,IACiB;AAAA,MAAlC,MAAkC,uEAAd,IAAc;;AACjC,SAAO,KAAK,KAAK,GAAjB,EAAsB;AACpB,QAAM,CAAC,GAAG,KAAM,CAAC,WAAjB;AACA,IAAA,SAAS,CAAC,YAAV,CAAuB,KAAvB,EAA+B,MAA/B;AACA,IAAA,KAAK,GAAG,CAAR;AACD;AACF,CAVE;AAYP;;;;;AAIA,OAAO,IAAM,WAAW,GACpB,SADS,WACT,CAAC,SAAD,EAAkB,KAAlB,EAAmE;AAAA,MAA/B,GAA+B,uEAAd,IAAc;;AACjE,SAAO,KAAK,KAAK,GAAjB,EAAsB;AACpB,QAAM,CAAC,GAAG,KAAM,CAAC,WAAjB;AACA,IAAA,SAAS,CAAC,WAAV,CAAsB,KAAtB;AACA,IAAA,KAAK,GAAG,CAAR;AACD;AACF,CAPE","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * @module lit-html\n */\n\ninterface MaybePolyfilledCe extends CustomElementRegistry {\n  readonly polyfillWrapFlushCallback?: object;\n}\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    (window.customElements as MaybePolyfilledCe).polyfillWrapFlushCallback !==\n        undefined;\n\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes =\n    (container: Node,\n     start: Node|null,\n     end: Node|null = null,\n     before: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.insertBefore(start!, before);\n        start = n;\n      }\n    };\n\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes =\n    (container: Node, start: Node|null, end: Node|null = null): void => {\n      while (start !== end) {\n        const n = start!.nextSibling;\n        container.removeChild(start!);\n        start = n;\n      }\n    };\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}