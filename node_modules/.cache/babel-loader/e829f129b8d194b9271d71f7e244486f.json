{"ast":null,"code":"import DataType from \"./types/DataType.js\";\nimport isDescendantOf from \"./util/isDescendantOf.js\";\nimport { camelToKebabCase } from \"./util/StringHelper.js\";\n/**\n *\n * @class\n * @public\n */\n\nclass UI5ElementMetadata {\n  constructor(metadata) {\n    this.metadata = metadata;\n  }\n  /**\n   * Only intended for use by UI5Element.js\n   * @protected\n   */\n\n\n  static validatePropertyValue(value, propData) {\n    const isMultiple = propData.multiple;\n\n    if (isMultiple) {\n      return value.map(propValue => validateSingleProperty(propValue, propData));\n    }\n\n    return validateSingleProperty(value, propData);\n  }\n  /**\n   * Only intended for use by UI5Element.js\n   * @protected\n   */\n\n\n  static validateSlotValue(value, slotData) {\n    return validateSingleSlot(value, slotData);\n  }\n  /**\n   * Returns the tag of the UI5 Element\n   * @public\n   */\n\n\n  getTag() {\n    return this.metadata.tag;\n  }\n  /**\n   * Determines whether a property should have an attribute counterpart\n   * @public\n   * @param propName\n   * @returns {boolean}\n   */\n\n\n  hasAttribute(propName) {\n    const propData = this.getProperties()[propName];\n    return propData.type !== Object && !propData.noAttribute;\n  }\n  /**\n   * Returns an array with the properties of the UI5 Element (in camelCase)\n   * @public\n   * @returns {string[]}\n   */\n\n\n  getPropertiesList() {\n    return Object.keys(this.getProperties());\n  }\n  /**\n   * Returns an array with the attributes of the UI5 Element (in kebab-case)\n   * @public\n   * @returns {string[]}\n   */\n\n\n  getAttributesList() {\n    return this.getPropertiesList().filter(this.hasAttribute, this).map(camelToKebabCase);\n  }\n  /**\n   * Returns an object with key-value pairs of slots and their metadata definitions\n   * @public\n   */\n\n\n  getSlots() {\n    return this.metadata.slots || {};\n  }\n  /**\n   * Determines whether this UI5 Element has a default slot of type Node, therefore can slot text\n   * @returns {boolean}\n   */\n\n\n  canSlotText() {\n    const defaultSlot = this.getSlots().default;\n    return defaultSlot && defaultSlot.type === Node;\n  }\n  /**\n   * Determines whether this UI5 Element supports any slots\n   * @public\n   */\n\n\n  hasSlots() {\n    return !!Object.entries(this.getSlots()).length;\n  }\n  /**\n   * Determines whether this UI5 Element supports any slots with \"individualSlots: true\"\n   * @public\n   */\n\n\n  hasIndividualSlots() {\n    return this.slotsAreManaged() && Object.entries(this.getSlots()).some(([_slotName, slotData]) => slotData.individualSlots);\n  }\n  /**\n   * Determines whether this UI5 Element needs to invalidate if children are added/removed/changed\n   * @public\n   */\n\n\n  slotsAreManaged() {\n    return !!this.metadata.managedSlots;\n  }\n  /**\n   * Returns an object with key-value pairs of properties and their metadata definitions\n   * @public\n   */\n\n\n  getProperties() {\n    return this.metadata.properties || {};\n  }\n  /**\n   * Returns an object with key-value pairs of events and their metadata definitions\n   * @public\n   */\n\n\n  getEvents() {\n    return this.metadata.events || {};\n  }\n\n}\n\nconst validateSingleProperty = (value, propData) => {\n  const propertyType = propData.type;\n\n  if (propertyType === Boolean) {\n    return typeof value === \"boolean\" ? value : false;\n  }\n\n  if (propertyType === String) {\n    return typeof value === \"string\" || typeof value === \"undefined\" || value === null ? value : value.toString();\n  }\n\n  if (propertyType === Object) {\n    return typeof value === \"object\" ? value : propData.defaultValue;\n  }\n\n  if (isDescendantOf(propertyType, DataType)) {\n    return propertyType.isValid(value) ? value : propData.defaultValue;\n  }\n};\n\nconst validateSingleSlot = (value, slotData) => {\n  if (value === null) {\n    return value;\n  }\n\n  const getSlottedNodes = el => {\n    const isTag = el instanceof HTMLElement;\n    const isSlot = isTag && el.localName === \"slot\";\n\n    if (isSlot) {\n      return el.assignedNodes({\n        flatten: true\n      }).filter(item => item instanceof HTMLElement);\n    }\n\n    return [el];\n  };\n\n  const slottedNodes = getSlottedNodes(value);\n  slottedNodes.forEach(el => {\n    if (!(el instanceof slotData.type)) {\n      throw new Error(`${el} is not of type ${slotData.type}`);\n    }\n  });\n  return value;\n};\n\nexport default UI5ElementMetadata;","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/@ui5/webcomponents-base/dist/UI5ElementMetadata.js"],"names":["DataType","isDescendantOf","camelToKebabCase","UI5ElementMetadata","constructor","metadata","validatePropertyValue","value","propData","isMultiple","multiple","map","propValue","validateSingleProperty","validateSlotValue","slotData","validateSingleSlot","getTag","tag","hasAttribute","propName","getProperties","type","Object","noAttribute","getPropertiesList","keys","getAttributesList","filter","getSlots","slots","canSlotText","defaultSlot","default","Node","hasSlots","entries","length","hasIndividualSlots","slotsAreManaged","some","_slotName","individualSlots","managedSlots","properties","getEvents","events","propertyType","Boolean","String","toString","defaultValue","isValid","getSlottedNodes","el","isTag","HTMLElement","isSlot","localName","assignedNodes","flatten","item","slottedNodes","forEach","Error"],"mappings":"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","sourcesContent":["import DataType from \"./types/DataType.js\";\nimport isDescendantOf from \"./util/isDescendantOf.js\";\nimport { camelToKebabCase } from \"./util/StringHelper.js\";\n\n/**\n *\n * @class\n * @public\n */\nclass UI5ElementMetadata {\n\tconstructor(metadata) {\n\t\tthis.metadata = metadata;\n\t}\n\n\t/**\n\t * Only intended for use by UI5Element.js\n\t * @protected\n\t */\n\tstatic validatePropertyValue(value, propData) {\n\t\tconst isMultiple = propData.multiple;\n\t\tif (isMultiple) {\n\t\t\treturn value.map(propValue => validateSingleProperty(propValue, propData));\n\t\t}\n\t\treturn validateSingleProperty(value, propData);\n\t}\n\n\t/**\n\t * Only intended for use by UI5Element.js\n\t * @protected\n\t */\n\tstatic validateSlotValue(value, slotData) {\n\t\treturn validateSingleSlot(value, slotData);\n\t}\n\n\t/**\n\t * Returns the tag of the UI5 Element\n\t * @public\n\t */\n\tgetTag() {\n\t\treturn this.metadata.tag;\n\t}\n\n\t/**\n\t * Determines whether a property should have an attribute counterpart\n\t * @public\n\t * @param propName\n\t * @returns {boolean}\n\t */\n\thasAttribute(propName) {\n\t\tconst propData = this.getProperties()[propName];\n\t\treturn propData.type !== Object && !propData.noAttribute;\n\t}\n\n\t/**\n\t * Returns an array with the properties of the UI5 Element (in camelCase)\n\t * @public\n\t * @returns {string[]}\n\t */\n\tgetPropertiesList() {\n\t\treturn Object.keys(this.getProperties());\n\t}\n\n\t/**\n\t * Returns an array with the attributes of the UI5 Element (in kebab-case)\n\t * @public\n\t * @returns {string[]}\n\t */\n\tgetAttributesList() {\n\t\treturn this.getPropertiesList().filter(this.hasAttribute, this).map(camelToKebabCase);\n\t}\n\n\t/**\n\t * Returns an object with key-value pairs of slots and their metadata definitions\n\t * @public\n\t */\n\tgetSlots() {\n\t\treturn this.metadata.slots || {};\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element has a default slot of type Node, therefore can slot text\n\t * @returns {boolean}\n\t */\n\tcanSlotText() {\n\t\tconst defaultSlot = this.getSlots().default;\n\t\treturn defaultSlot && defaultSlot.type === Node;\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element supports any slots\n\t * @public\n\t */\n\thasSlots() {\n\t\treturn !!Object.entries(this.getSlots()).length;\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element supports any slots with \"individualSlots: true\"\n\t * @public\n\t */\n\thasIndividualSlots() {\n\t\treturn this.slotsAreManaged() && Object.entries(this.getSlots()).some(([_slotName, slotData]) => slotData.individualSlots);\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element needs to invalidate if children are added/removed/changed\n\t * @public\n\t */\n\tslotsAreManaged() {\n\t\treturn !!this.metadata.managedSlots;\n\t}\n\n\t/**\n\t * Returns an object with key-value pairs of properties and their metadata definitions\n\t * @public\n\t */\n\tgetProperties() {\n\t\treturn this.metadata.properties || {};\n\t}\n\n\t/**\n\t * Returns an object with key-value pairs of events and their metadata definitions\n\t * @public\n\t */\n\tgetEvents() {\n\t\treturn this.metadata.events || {};\n\t}\n}\n\nconst validateSingleProperty = (value, propData) => {\n\tconst propertyType = propData.type;\n\n\tif (propertyType === Boolean) {\n\t\treturn typeof value === \"boolean\" ? value : false;\n\t}\n\tif (propertyType === String) {\n\t\treturn (typeof value === \"string\" || typeof value === \"undefined\" || value === null) ? value : value.toString();\n\t}\n\tif (propertyType === Object) {\n\t\treturn typeof value === \"object\" ? value : propData.defaultValue;\n\t}\n\tif (isDescendantOf(propertyType, DataType)) {\n\t\treturn propertyType.isValid(value) ? value : propData.defaultValue;\n\t}\n};\n\nconst validateSingleSlot = (value, slotData) => {\n\tif (value === null) {\n\t\treturn value;\n\t}\n\n\tconst getSlottedNodes = el => {\n\t\tconst isTag = el instanceof HTMLElement;\n\t\tconst isSlot = isTag && el.localName === \"slot\";\n\n\t\tif (isSlot) {\n\t\t\treturn el.assignedNodes({ flatten: true }).filter(item => item instanceof HTMLElement);\n\t\t}\n\n\t\treturn [el];\n\t};\n\n\tconst slottedNodes = getSlottedNodes(value);\n\tslottedNodes.forEach(el => {\n\t\tif (!(el instanceof slotData.type)) {\n\t\t\tthrow new Error(`${el} is not of type ${slotData.type}`);\n\t\t}\n\t});\n\n\treturn value;\n};\n\nexport default UI5ElementMetadata;\n"]},"metadata":{},"sourceType":"module"}