{"ast":null,"code":"/**\n * Device and Feature Detection API: Provides information about the used browser / device and cross platform support for certain events\n * like media queries, orientation change or resizing.\n *\n * This API is independent from any other part of the UI5 framework. This allows it to be loaded beforehand, if it is needed, to create the UI5 bootstrap\n * dynamically depending on the capabilities of the browser or device.\n *\n * @namespace\n * @name Device\n */\nconst Device = {}; //* ******* OS Detection ********\n\n/**\n * Contains information about the operating system of the Device.\n * @name Device.os\n */\n\n/**\n * Enumeration containing the names of known operating systems.\n * @name Device.os.OS\n */\n\n/**\n * The name of the operating system.\n * @name Device.os.name\n * @type String\n */\n\n/**\n * The version of the operating system as <code>string</code>. Might be empty if no version can be determined.\n * @name Device.os.versionStr\n * @type String\n */\n\n/**\n * The version of the operating system as <code>float</code>. Might be <code>-1</code> if no version can be determined.\n * @name Device.os.version\n * @type float\n */\n\n/**\n * If this flag is set to <code>true</code>, a Windows operating system is used.\n * @name Device.os.windows\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, a Mac operating system is used.\n * @name Device.os.macintosh\n * @type boolean\n */\n\n/*\n * If this flag is set to <code>true</code>, an iOS operating system is used.\n * @name Device.os.ios\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, an Android operating system is used.\n * @name Device.os.android\n * @type boolean\n */\n\n/*\n * Windows operating system name.\n * @see Device.os.name\n * @name Device.os.OS.WINDOWS\n */\n\n/**\n * MAC operating system name.\n * @see Device.os.name\n * @name Device.os.OS.MACINTOSH\n */\n\n/**\n * iOS operating system name.\n * @see Device.os.name\n * @name Device.os.OS.IOS\n */\n\n/**\n * Android operating system name.\n * @see Device.os.name\n * @name Device.os.OS.ANDROID\n */\n\nconst OS = {\n  \"WINDOWS\": \"win\",\n  \"MACINTOSH\": \"mac\",\n  \"IOS\": \"iOS\",\n  \"ANDROID\": \"Android\"\n};\n\nconst _getMobileOS = () => {\n  const userAgent = navigator.userAgent;\n  let rPlatform, // regular expression for platform\n  aMatches; // iOS, Android\n\n  rPlatform = /\\(([a-zA-Z ]+);\\s(?:[U]?[;]?)([\\D]+)((?:[\\d._]*))(?:.*[)][^\\d]*)([\\d.]*)\\s/;\n  aMatches = userAgent.match(rPlatform);\n\n  if (aMatches) {\n    const rAppleDevices = /iPhone|iPad|iPod/;\n\n    if (aMatches[0].match(rAppleDevices)) {\n      aMatches[3] = aMatches[3].replace(/_/g, \".\");\n      return {\n        \"name\": OS.IOS,\n        \"versionStr\": aMatches[3]\n      };\n    }\n\n    if (aMatches[2].match(/Android/)) {\n      aMatches[2] = aMatches[2].replace(/\\s/g, \"\");\n      return {\n        \"name\": OS.ANDROID,\n        \"versionStr\": aMatches[3]\n      };\n    }\n  } // Firefox on Android\n\n\n  rPlatform = /\\((Android)[\\s]?([\\d][.\\d]*)?;.*Firefox\\/[\\d][.\\d]*/;\n  aMatches = userAgent.match(rPlatform);\n\n  if (aMatches) {\n    return {\n      \"name\": OS.ANDROID,\n      \"versionStr\": aMatches.length === 3 ? aMatches[2] : \"\"\n    };\n  }\n};\n\nconst _getDesktopOS = () => {\n  const sPlatform = navigator.platform;\n\n  if (sPlatform.indexOf(\"Win\") !== -1) {\n    const rVersion = /Windows NT (\\d+).(\\d)/i; // userAgent since windows 10: Windows NT 10[...]\n\n    const uaResult = navigator.userAgent.match(rVersion);\n    return {\n      \"name\": OS.WINDOWS,\n      \"versionStr\": uaResult[1]\n    };\n  }\n\n  if (sPlatform.indexOf(\"Mac\") !== -1) {\n    return {\n      \"name\": OS.MACINTOSH,\n      \"versionStr\": \"\"\n    };\n  }\n\n  return null;\n};\n\nconst _getOS = () => {\n  return _getMobileOS() || _getDesktopOS();\n};\n\nconst _setOS = () => {\n  if (Device.os) {\n    return;\n  }\n\n  Device.os = _getOS() || {};\n  Device.os.OS = OS;\n  Device.os.version = Device.os.versionStr ? parseFloat(Device.os.versionStr) : -1;\n\n  if (Device.os.name) {\n    Object.keys(OS).forEach(name => {\n      if (OS[name] === Device.os.name) {\n        Device.os[name.toLowerCase()] = true;\n      }\n    });\n  }\n};\n\nconst getOS = () => {\n  if (!Device.os) {\n    _setOS();\n  }\n\n  return Device.os;\n};\n\nconst isAndroid = () => {\n  if (!Device.os) {\n    _setOS();\n  }\n\n  return !!Device.os.android;\n}; //* ******* Browser Detection ********\n\n/**\n * Contains information about the used browser.\n * @name Device.browser\n */\n\n/**\n * Enumeration containing the names of known browsers.\n * @name Device.browser.BROWSER\n *\n * The name of the browser.\n * @name Device.browser.name\n * @type String\n */\n\n/**\n * The version of the browser as <code>string</code>. Might be empty if no version can be determined.\n * @name Device.browser.versionStr\n * @type String\n */\n\n/**\n * The version of the browser as <code>float</code>. Might be <code>-1</code> if no version can be determined.\n * @name Device.browser.version\n * @type float\n */\n\n/**\n * If this flag is set to <code>true</code>, the mobile variant of the browser is used or\n * a tablet or phone device is detected. This information might not be available for all browsers.\n * @name Device.browser.mobile\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the Microsoft Internet Explorer browser is used.\n * @name Device.browser.internet_explorer\n * @type boolean\n * @deprecated since 1.20, use {@link Device.browser.msie} instead.\n */\n\n/**\n * If this flag is set to <code>true</code>, the Microsoft Internet Explorer browser is used.\n * @name Device.browser.msie\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the Microsoft Edge browser is used.\n * @name Device.browser.edge\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the Mozilla Firefox browser is used.\n * @name Device.browser.firefox\n */\n\n/**\n * If this flag is set to <code>true</code>, the Google Chrome browser is used.\n * @name Device.browser.chrome\n * @type boolean\n *\n * If this flag is set to <code>true</code>, the Apple Safari browser is used.\n *\n * <b>Note:</b>\n * This flag is also <code>true</code> when the standalone (fullscreen) mode or webview is used on iOS devices.\n * Please also note the flags {@link Device.browser.fullscreen} and {@link Device.browser.webview}.\n *\n * @name Device.browser.safari\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, a browser featuring a Webkit engine is used.\n *\n * <b>Note:</b>\n * This flag is also <code>true</code> when the used browser was based on the Webkit engine, but\n * uses another rendering engine in the meantime. For example the Chrome browser started from version 28 and above\n * uses the Blink rendering engine.\n *\n * @name Device.browser.webkit\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the Safari browser runs in standalone fullscreen mode on iOS.\n *\n * <b>Note:</b> This flag is only available if the Safari browser was detected. Furthermore, if this mode is detected,\n * technically not a standard Safari is used. There might be slight differences in behavior and detection, e.g.\n * the availability of {@link Device.browser.version}.\n *\n * @name Device.browser.fullscreen\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the Safari browser runs in webview mode on iOS.\n *\n * <b>Note:</b> This flag is only available if the Safari browser was detected. Furthermore, if this mode is detected,\n * technically not a standard Safari is used. There might be slight differences in behavior and detection, e.g.\n * the availability of {@link Device.browser.version}.\n *\n * @name Device.browser.webview\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the Phantom JS browser is used.\n * @name Device.browser.phantomJS\n * @type boolean\n */\n\n/**\n * The version of the used Webkit engine, if available.\n * @name Device.browser.webkitVersion\n * @type String\n */\n\n/**\n * If this flag is set to <code>true</code>, a browser featuring a Mozilla engine is used.\n * @name Device.browser.mozilla\n * @type boolean\n */\n\n/**\n * Internet Explorer browser name.\n * @name Device.browser.BROWSER.INTERNET_EXPLORER\n */\n\n/**\n * Edge browser name.\n * @name Device.browser.BROWSER.EDGE\n */\n\n/**\n * Firefox browser name.\n * @name Device.browser.BROWSER.FIREFOX\n */\n\n/**\n * Chrome browser name.\n * @name Device.browser.BROWSER.CHROME\n */\n\n/**\n * Safari browser name.\n * @name Device.browser.BROWSER.SAFARI\n */\n\n/**\n * Android stock browser name.\n * @name Device.browser.BROWSER.ANDROID\n */\n\n\nconst BROWSER = {\n  \"INTERNET_EXPLORER\": \"ie\",\n  \"EDGE\": \"ed\",\n  \"FIREFOX\": \"ff\",\n  \"CHROME\": \"cr\",\n  \"SAFARI\": \"sf\",\n  \"ANDROID\": \"an\"\n};\n/*!\n* Taken from jQuery JavaScript Library v1.7.1\n* http://jquery.com/\n*\n* Copyright 2011, John Resig\n* Dual licensed under the MIT or GPL Version 2 licenses.\n* http://jquery.org/license\n*\n* Includes Sizzle.js\n* http://sizzlejs.com/\n* Copyright 2011, The Dojo Foundation\n* Released under the MIT, BSD, and GPL Licenses.\n*\n* Date: Mon Nov 21 21:11:03 2011 -0500\n*/\n\nconst _calcBrowser = () => {\n  const sUserAgent = navigator.userAgent.toLowerCase();\n  const rwebkit = /(webkit)[ /]([\\w.]+)/;\n  const rmsie = /(msie) ([\\w.]+)/;\n  const rmsie11 = /(trident)\\/[\\w.]+;.*rv:([\\w.]+)/;\n  const redge = /(edge)[ /]([\\w.]+)/;\n  const rmozilla = /(mozilla)(?:.*? rv:([\\w.]+))?/; // WinPhone IE11 and MS Edge userAgents contain \"WebKit\" and \"Mozilla\" and therefore must be checked first\n\n  const browserMatch = redge.exec(sUserAgent) || rmsie11.exec(sUserAgent) || rwebkit.exec(sUserAgent) || rmsie.exec(sUserAgent) || sUserAgent.indexOf(\"compatible\") < 0 && rmozilla.exec(sUserAgent) || [];\n  const oRes = {\n    browser: browserMatch[1] || \"\",\n    version: browserMatch[2] || \"0\"\n  };\n  oRes[oRes.browser] = true;\n  return oRes;\n};\n\nconst _getBrowser = () => {\n  const oBrowser = _calcBrowser();\n\n  const sUserAgent = navigator.userAgent;\n  const oNavigator = window.navigator; // jQuery checks for user agent strings. We differentiate between browsers\n\n  let oExpMobile;\n  let oResult;\n  let fVersion; // Mozilla\n\n  if (oBrowser.mozilla) {\n    oExpMobile = /Mobile/;\n\n    if (sUserAgent.match(/Firefox\\/(\\d+\\.\\d+)/)) {\n      fVersion = parseFloat(RegExp.$1);\n      oResult = {\n        name: BROWSER.FIREFOX,\n        versionStr: `${fVersion}`,\n        version: fVersion,\n        mozilla: true,\n        mobile: oExpMobile.test(sUserAgent)\n      };\n    } else {\n      // unknown mozilla browser\n      oResult = {\n        mobile: oExpMobile.test(sUserAgent),\n        mozilla: true,\n        version: -1\n      };\n    }\n  } else if (oBrowser.webkit) {\n    // webkit version is needed for calculation if the mobile android device is a tablet (calculation of other mobile devices work without)\n    const regExpWebkitVersion = sUserAgent.toLowerCase().match(/webkit[/]([\\d.]+)/);\n    let webkitVersion;\n\n    if (regExpWebkitVersion) {\n      webkitVersion = regExpWebkitVersion[1];\n    }\n\n    oExpMobile = /Mobile/;\n    const aChromeMatch = sUserAgent.match(/(Chrome|CriOS)\\/(\\d+\\.\\d+).\\d+/);\n    const aFirefoxMatch = sUserAgent.match(/FxiOS\\/(\\d+\\.\\d+)/);\n    const aAndroidMatch = sUserAgent.match(/Android .+ Version\\/(\\d+\\.\\d+)/);\n\n    if (aChromeMatch || aFirefoxMatch || aAndroidMatch) {\n      let sName, sVersion, bMobile;\n\n      if (aChromeMatch) {\n        sName = BROWSER.CHROME;\n        bMobile = oExpMobile.test(sUserAgent);\n        sVersion = parseFloat(aChromeMatch[2]);\n      } else if (aFirefoxMatch) {\n        sName = BROWSER.FIREFOX;\n        bMobile = true;\n        sVersion = parseFloat(aFirefoxMatch[1]);\n      } else if (aAndroidMatch) {\n        sName = BROWSER.ANDROID;\n        bMobile = oExpMobile.test(sUserAgent);\n        sVersion = parseFloat(aAndroidMatch[1]);\n      }\n\n      oResult = {\n        name: sName,\n        mobile: bMobile,\n        versionStr: `${sVersion}`,\n        version: sVersion,\n        webkit: true,\n        webkitVersion\n      };\n    } else {\n      // Safari might have an issue with sUserAgent.match(...); thus changing\n      const oExp = /(Version|PhantomJS)\\/(\\d+\\.\\d+).*Safari/;\n      const bStandalone = oNavigator.standalone;\n\n      if (oExp.test(sUserAgent)) {\n        const aParts = oExp.exec(sUserAgent);\n        fVersion = parseFloat(aParts[2]);\n        oResult = {\n          name: BROWSER.SAFARI,\n          versionStr: `${fVersion}`,\n          fullscreen: false,\n          webview: false,\n          version: fVersion,\n          mobile: oExpMobile.test(sUserAgent),\n          webkit: true,\n          webkitVersion,\n          phantomJS: aParts[1] === \"PhantomJS\"\n        };\n      } else if (/iPhone|iPad|iPod/.test(sUserAgent) && !/CriOS/.test(sUserAgent) && !/FxiOS/.test(sUserAgent) && (bStandalone === true || bStandalone === false)) {\n        // WebView or Standalone mode on iOS\n        oResult = {\n          name: BROWSER.SAFARI,\n          version: -1,\n          fullscreen: bStandalone,\n          webview: !bStandalone,\n          mobile: oExpMobile.test(sUserAgent),\n          webkit: true,\n          webkitVersion\n        };\n      } else {\n        // other webkit based browser\n        oResult = {\n          mobile: oExpMobile.test(sUserAgent),\n          webkit: true,\n          webkitVersion,\n          version: -1\n        };\n      }\n    }\n  } else if (oBrowser.msie || oBrowser.trident) {\n    fVersion = parseFloat(oBrowser.version);\n    oResult = {\n      name: BROWSER.INTERNET_EXPLORER,\n      versionStr: `${fVersion}`,\n      version: fVersion,\n      msie: true,\n      mobile: false\n    };\n  } else if (oBrowser.edge) {\n    fVersion = parseFloat(oBrowser.version);\n    oResult = {\n      name: BROWSER.EDGE,\n      versionStr: `${fVersion}`,\n      version: fVersion,\n      edge: true\n    };\n  } else {\n    oResult = {\n      name: \"\",\n      versionStr: \"\",\n      version: -1,\n      mobile: false\n    };\n  }\n\n  return oResult;\n};\n\nconst _setBrowser = () => {\n  Device.browser = _getBrowser();\n  Device.browser.BROWSER = BROWSER;\n\n  if (Device.browser.name) {\n    Object.keys(BROWSER).forEach(b => {\n      if (BROWSER[b] === Device.browser.name) {\n        Device.browser[b.toLowerCase()] = true;\n      }\n    });\n  }\n};\n\nconst getBrowser = () => {\n  if (!Device.browser) {\n    _setBrowser();\n  }\n\n  return Device.browser;\n};\n\nconst isIE = () => {\n  if (!Device.browser) {\n    _setBrowser();\n  }\n\n  return !!Device.browser.msie;\n};\n\nconst isEdge = () => {\n  if (!Device.browser) {\n    _setBrowser();\n  }\n\n  return !!Device.browser.edge;\n};\n\nconst isChrome = () => {\n  if (!Device.browser) {\n    _setBrowser();\n  }\n\n  return !!Device.browser.chrome;\n};\n\nconst isFF = () => {\n  if (!Device.browser) {\n    _setBrowser();\n  }\n\n  return !!Device.browser.firefox;\n};\n\nconst isSafari = () => {\n  if (!Device.browser) {\n    _setBrowser();\n  }\n\n  return !!Device.browser.safari;\n}; //* ******* Support Detection ********\n\n\nconst _setSupport = () => {\n  if (Device.support) {\n    return;\n  }\n\n  if (!Device.browser) {\n    _setBrowser();\n  }\n\n  Device.support = {};\n  Device.support.touch = !!(\"ontouchstart\" in window || navigator.maxTouchPoints > 0 || window.DocumentTouch && document instanceof window.DocumentTouch);\n};\n\nconst supportTouch = () => {\n  if (!Device.support) {\n    _setSupport();\n  }\n\n  return !!Device.support.touch;\n}; //* ******* System Detection ********\n\n/**\n * Provides a basic categorization of the used device based on various indicators.\n *\n * <b>Note:</b> Depending on the capabilities of the device it is also possible that multiple flags are set to <code>true</code>.\n *\n * @namespace\n * @name Device.system\n */\n\n/**\n * If this flag is set to <code>true</code>, the device is recognized as a tablet.\n *\n * <b>Note:</b> This flag is also true for some browsers on desktop devices running on Windows 8 or higher.\n * Also see the documentation for {@link Device.system.combi} devices.\n * You can use the following logic to ensure that the current device is a tablet device:\n *\n * <pre>\n * if(Device.system.tablet && !Device.system.desktop){\n *\t...tablet related commands...\n * }\n * </pre>\n *\n * @name Device.system.tablet\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the device is recognized as a phone.\n *\n * @name Device.system.phone\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the device is recognized as a desktop system.\n *\n * @name Device.system.desktop\n * @type boolean\n */\n\n/**\n * Indicates if the device is recognized as a combination of a desktop system and tablet.\n *\n * <b>Note:</b> This property is mainly for Microsoft Windows 8 (and following) devices where the mouse and touch event may be supported\n * natively by the browser being used. This property is set to <code>true</code> only when both mouse and touch event are natively supported.\n *\n * @name Device.system.combi\n * @type boolean\n */\n\n/**\n * @name Device.system.SYSTEMTYPE\n * Enumeration containing the names of known types of the devices.\n */\n\n\nconst SYSTEMTYPE = {\n  \"TABLET\": \"tablet\",\n  \"PHONE\": \"phone\",\n  \"DESKTOP\": \"desktop\",\n  \"COMBI\": \"combi\"\n};\n\nconst _isTablet = () => {\n  const sUserAgent = navigator.userAgent;\n\n  if (Device.os.name === Device.os.OS.IOS) {\n    return /ipad/i.test(sUserAgent);\n  } // in real mobile device\n\n\n  if (supportTouch()) {\n    if (Device.os.windows && Device.os.version >= 8) {\n      return true;\n    }\n\n    if (Device.browser.chrome && Device.os.android && Device.os.version >= 4.4) {\n      // From Android version 4.4, WebView also uses Chrome as Kernel.\n      // We can use the user agent pattern defined in Chrome to do phone/tablet detection\n      // According to the information here: https://developer.chrome.com/multidevice/user-agent#chrome_for_android_user_agent,\n      //  the existence of \"Mobile\" indicates it's a phone. But because the crosswalk framework which is used in Fiori Client\n      //  inserts another \"Mobile\" to the user agent for both tablet and phone, we need to check whether \"Mobile Safari/<Webkit Rev>\" exists.\n      return !/Mobile Safari\\/[.0-9]+/.test(sUserAgent);\n    }\n\n    let densityFactor = window.devicePixelRatio ? window.devicePixelRatio : 1; // may be undefined in Windows Phone devices\n    // On Android sometimes window.screen.width returns the logical CSS pixels, sometimes the physical device pixels;\n    // Tests on multiple devices suggest this depends on the Webkit version.\n    // The Webkit patch which changed the behavior was done here: https://bugs.webkit.org/show_bug.cgi?id=106460\n    // Chrome 27 with Webkit 537.36 returns the logical pixels,\n    // Chrome 18 with Webkit 535.19 returns the physical pixels.\n    // The BlackBerry 10 browser with Webkit 537.10+ returns the physical pixels.\n    // So it appears like somewhere above Webkit 537.10 we do not hve to divide by the devicePixelRatio anymore.\n\n    if (Device.os.android && Device.browser.webkit && parseFloat(Device.browser.webkitVersion) > 537.10) {\n      densityFactor = 1;\n    } // this is how android distinguishes between tablet and phone\n    // http://android-developers.blogspot.de/2011/07/new-tools-for-managing-screen-sizes.html\n\n\n    const bTablet = Math.min(window.screen.width / densityFactor, window.screen.height / densityFactor) >= 600; // special workaround for Nexus 7 where the window.screen.width is 600px or 601px in portrait mode (=> tablet)\n    // but window.screen.height 552px in landscape mode (=> phone), because the browser UI takes some space on top.\n    // So the detected device type depends on the orientation :-(\n    // actually this is a Chrome bug, as \"width\"/\"height\" should return the entire screen's dimensions and\n    // \"availWidth\"/\"availHeight\" should return the size available after subtracting the browser UI\n\n    /*\n    \t\tif (isLandscape() &&\n    \t\t\t(window.screen.height === 552 || window.screen.height === 553) // old/new Nexus 7\n    \t\t\t&&\n    \t\t\t(/Nexus 7/i.test(sUserAgent))) {\n    \t\t\tbTablet = true;\n    \t\t}\n    \t\t*/\n\n    return bTablet;\n  } // This simple android phone detection can be used here because this is the mobile emulation mode in desktop browser\n\n\n  const bAndroidPhone = /(?=android)(?=.*mobile)/i.test(sUserAgent); // in desktop browser, it's detected as tablet when\n  // 1. Windows 8 device with a touch screen where \"Touch\" is contained in the userAgent\n  // 2. Android emulation and it's not an Android phone\n\n  return Device.browser.msie && sUserAgent.indexOf(\"Touch\") !== -1 || Device.os.android && !bAndroidPhone;\n};\n\nconst _getSystem = () => {\n  const bTabletDetected = _isTablet();\n\n  const isWin8Upwards = Device.os.windows && Device.os.version >= 8;\n  const oSystem = {};\n  oSystem.tablet = !!((Device.support.touch || isWin8Upwards) && bTabletDetected);\n  oSystem.phone = !!((Device.os.windows_phone || Device.support.touch) && !bTabletDetected);\n  oSystem.desktop = !!(!oSystem.tablet && !oSystem.phone || isWin8Upwards);\n  oSystem.combi = oSystem.desktop && oSystem.tablet;\n  oSystem.SYSTEMTYPE = SYSTEMTYPE;\n  return oSystem;\n};\n\nconst _setSystem = () => {\n  _setSupport();\n\n  _setOS();\n\n  Device.system = {};\n  Device.system = _getSystem();\n\n  if (Device.system.tablet || Device.system.phone) {\n    Device.browser.mobile = true;\n  }\n};\n\nconst getSystem = () => {\n  if (!Device.system) {\n    _setSystem();\n  }\n\n  return Device.system;\n};\n\nconst isDesktop = () => {\n  if (!Device.system) {\n    _setSystem();\n  }\n\n  return Device.system.desktop;\n};\n\nconst isTablet = () => {\n  if (!Device.system) {\n    _setSystem();\n  }\n\n  return Device.system.tablet;\n};\n\nconst isPhone = () => {\n  if (!Device.system) {\n    _setSystem();\n  }\n\n  return Device.system.phone;\n};\n\nconst isMobile = () => {\n  if (!Device.system) {\n    _setSystem();\n  }\n\n  return Device.browser.mobile;\n};\n\nexport { isIE, isEdge, isChrome, isFF, isSafari, isMobile, isDesktop, isTablet, isPhone, isAndroid, getOS, getSystem, getBrowser, supportTouch };","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/@ui5/webcomponents-base/dist/Device.js"],"names":["Device","OS","_getMobileOS","userAgent","navigator","rPlatform","aMatches","match","rAppleDevices","replace","IOS","ANDROID","length","_getDesktopOS","sPlatform","platform","indexOf","rVersion","uaResult","WINDOWS","MACINTOSH","_getOS","_setOS","os","version","versionStr","parseFloat","name","Object","keys","forEach","toLowerCase","getOS","isAndroid","android","BROWSER","_calcBrowser","sUserAgent","rwebkit","rmsie","rmsie11","redge","rmozilla","browserMatch","exec","oRes","browser","_getBrowser","oBrowser","oNavigator","window","oExpMobile","oResult","fVersion","mozilla","RegExp","$1","FIREFOX","mobile","test","webkit","regExpWebkitVersion","webkitVersion","aChromeMatch","aFirefoxMatch","aAndroidMatch","sName","sVersion","bMobile","CHROME","oExp","bStandalone","standalone","aParts","SAFARI","fullscreen","webview","phantomJS","msie","trident","INTERNET_EXPLORER","edge","EDGE","_setBrowser","b","getBrowser","isIE","isEdge","isChrome","chrome","isFF","firefox","isSafari","safari","_setSupport","support","touch","maxTouchPoints","DocumentTouch","document","supportTouch","SYSTEMTYPE","_isTablet","windows","densityFactor","devicePixelRatio","bTablet","Math","min","screen","width","height","bAndroidPhone","_getSystem","bTabletDetected","isWin8Upwards","oSystem","tablet","phone","windows_phone","desktop","combi","_setSystem","system","getSystem","isDesktop","isTablet","isPhone","isMobile"],"mappings":"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","sourcesContent":["/**\n * Device and Feature Detection API: Provides information about the used browser / device and cross platform support for certain events\n * like media queries, orientation change or resizing.\n *\n * This API is independent from any other part of the UI5 framework. This allows it to be loaded beforehand, if it is needed, to create the UI5 bootstrap\n * dynamically depending on the capabilities of the browser or device.\n *\n * @namespace\n * @name Device\n */\n\nconst Device = {};\n\n//* ******* OS Detection ********\n\n/**\n * Contains information about the operating system of the Device.\n * @name Device.os\n */\n\n/**\n * Enumeration containing the names of known operating systems.\n * @name Device.os.OS\n */\n\n/**\n * The name of the operating system.\n * @name Device.os.name\n * @type String\n */\n\n/**\n * The version of the operating system as <code>string</code>. Might be empty if no version can be determined.\n * @name Device.os.versionStr\n * @type String\n */\n\n/**\n * The version of the operating system as <code>float</code>. Might be <code>-1</code> if no version can be determined.\n * @name Device.os.version\n * @type float\n */\n\n/**\n * If this flag is set to <code>true</code>, a Windows operating system is used.\n * @name Device.os.windows\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, a Mac operating system is used.\n * @name Device.os.macintosh\n * @type boolean\n */\n\n/*\n * If this flag is set to <code>true</code>, an iOS operating system is used.\n * @name Device.os.ios\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, an Android operating system is used.\n * @name Device.os.android\n * @type boolean\n */\n\n/*\n * Windows operating system name.\n * @see Device.os.name\n * @name Device.os.OS.WINDOWS\n */\n\n/**\n * MAC operating system name.\n * @see Device.os.name\n * @name Device.os.OS.MACINTOSH\n */\n\n/**\n * iOS operating system name.\n * @see Device.os.name\n * @name Device.os.OS.IOS\n */\n\n/**\n * Android operating system name.\n * @see Device.os.name\n * @name Device.os.OS.ANDROID\n */\n\nconst OS = {\n\t\"WINDOWS\": \"win\",\n\t\"MACINTOSH\": \"mac\",\n\t\"IOS\": \"iOS\",\n\t\"ANDROID\": \"Android\",\n};\n\nconst _getMobileOS = () => {\n\tconst userAgent = navigator.userAgent;\n\n\tlet rPlatform, // regular expression for platform\n\t\taMatches;\n\n\t// iOS, Android\n\trPlatform = /\\(([a-zA-Z ]+);\\s(?:[U]?[;]?)([\\D]+)((?:[\\d._]*))(?:.*[)][^\\d]*)([\\d.]*)\\s/;\n\taMatches = userAgent.match(rPlatform);\n\n\tif (aMatches) {\n\t\tconst rAppleDevices = /iPhone|iPad|iPod/;\n\n\t\tif (aMatches[0].match(rAppleDevices)) {\n\t\t\taMatches[3] = aMatches[3].replace(/_/g, \".\");\n\n\t\t\treturn ({\n\t\t\t\t\"name\": OS.IOS,\n\t\t\t\t\"versionStr\": aMatches[3],\n\t\t\t});\n\t\t}\n\n\t\tif (aMatches[2].match(/Android/)) {\n\t\t\taMatches[2] = aMatches[2].replace(/\\s/g, \"\");\n\t\t\treturn ({\n\t\t\t\t\"name\": OS.ANDROID,\n\t\t\t\t\"versionStr\": aMatches[3],\n\t\t\t});\n\t\t}\n\t}\n\n\t// Firefox on Android\n\trPlatform = /\\((Android)[\\s]?([\\d][.\\d]*)?;.*Firefox\\/[\\d][.\\d]*/;\n\taMatches = userAgent.match(rPlatform);\n\tif (aMatches) {\n\t\treturn ({\n\t\t\t\"name\": OS.ANDROID,\n\t\t\t\"versionStr\": aMatches.length === 3 ? aMatches[2] : \"\",\n\t\t});\n\t}\n};\n\nconst _getDesktopOS = () => {\n\tconst sPlatform = navigator.platform;\n\tif (sPlatform.indexOf(\"Win\") !== -1) {\n\t\tconst rVersion = /Windows NT (\\d+).(\\d)/i; // userAgent since windows 10: Windows NT 10[...]\n\t\tconst uaResult = navigator.userAgent.match(rVersion);\n\n\t\treturn {\n\t\t\t\"name\": OS.WINDOWS,\n\t\t\t\"versionStr\": uaResult[1],\n\t\t};\n\t}\n\n\tif (sPlatform.indexOf(\"Mac\") !== -1) {\n\t\treturn {\n\t\t\t\"name\": OS.MACINTOSH,\n\t\t\t\"versionStr\": \"\",\n\t\t};\n\t}\n\n\treturn null;\n};\n\nconst _getOS = () => {\n\treturn _getMobileOS() || _getDesktopOS();\n};\n\nconst _setOS = () => {\n\tif (Device.os) {\n\t\treturn;\n\t}\n\n\tDevice.os = _getOS() || {};\n\tDevice.os.OS = OS;\n\tDevice.os.version = Device.os.versionStr ? parseFloat(Device.os.versionStr) : -1;\n\n\tif (Device.os.name) {\n\t\tObject.keys(OS).forEach(name => {\n\t\t\tif (OS[name] === Device.os.name) {\n\t\t\t\tDevice.os[name.toLowerCase()] = true;\n\t\t\t}\n\t\t});\n\t}\n};\n\nconst getOS = () => {\n\tif (!Device.os) {\n\t\t_setOS();\n\t}\n\n\treturn Device.os;\n};\n\nconst isAndroid = () => {\n\tif (!Device.os) {\n\t\t_setOS();\n\t}\n\n\treturn !!Device.os.android;\n};\n\n//* ******* Browser Detection ********\n\n/**\n * Contains information about the used browser.\n * @name Device.browser\n */\n\n/**\n * Enumeration containing the names of known browsers.\n * @name Device.browser.BROWSER\n *\n * The name of the browser.\n * @name Device.browser.name\n * @type String\n */\n\n/**\n * The version of the browser as <code>string</code>. Might be empty if no version can be determined.\n * @name Device.browser.versionStr\n * @type String\n */\n\n/**\n * The version of the browser as <code>float</code>. Might be <code>-1</code> if no version can be determined.\n * @name Device.browser.version\n * @type float\n */\n\n/**\n * If this flag is set to <code>true</code>, the mobile variant of the browser is used or\n * a tablet or phone device is detected. This information might not be available for all browsers.\n * @name Device.browser.mobile\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the Microsoft Internet Explorer browser is used.\n * @name Device.browser.internet_explorer\n * @type boolean\n * @deprecated since 1.20, use {@link Device.browser.msie} instead.\n */\n\n/**\n * If this flag is set to <code>true</code>, the Microsoft Internet Explorer browser is used.\n * @name Device.browser.msie\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the Microsoft Edge browser is used.\n * @name Device.browser.edge\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the Mozilla Firefox browser is used.\n * @name Device.browser.firefox\n */\n\n/**\n * If this flag is set to <code>true</code>, the Google Chrome browser is used.\n * @name Device.browser.chrome\n * @type boolean\n *\n * If this flag is set to <code>true</code>, the Apple Safari browser is used.\n *\n * <b>Note:</b>\n * This flag is also <code>true</code> when the standalone (fullscreen) mode or webview is used on iOS devices.\n * Please also note the flags {@link Device.browser.fullscreen} and {@link Device.browser.webview}.\n *\n * @name Device.browser.safari\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, a browser featuring a Webkit engine is used.\n *\n * <b>Note:</b>\n * This flag is also <code>true</code> when the used browser was based on the Webkit engine, but\n * uses another rendering engine in the meantime. For example the Chrome browser started from version 28 and above\n * uses the Blink rendering engine.\n *\n * @name Device.browser.webkit\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the Safari browser runs in standalone fullscreen mode on iOS.\n *\n * <b>Note:</b> This flag is only available if the Safari browser was detected. Furthermore, if this mode is detected,\n * technically not a standard Safari is used. There might be slight differences in behavior and detection, e.g.\n * the availability of {@link Device.browser.version}.\n *\n * @name Device.browser.fullscreen\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the Safari browser runs in webview mode on iOS.\n *\n * <b>Note:</b> This flag is only available if the Safari browser was detected. Furthermore, if this mode is detected,\n * technically not a standard Safari is used. There might be slight differences in behavior and detection, e.g.\n * the availability of {@link Device.browser.version}.\n *\n * @name Device.browser.webview\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the Phantom JS browser is used.\n * @name Device.browser.phantomJS\n * @type boolean\n */\n\n/**\n * The version of the used Webkit engine, if available.\n * @name Device.browser.webkitVersion\n * @type String\n */\n\n/**\n * If this flag is set to <code>true</code>, a browser featuring a Mozilla engine is used.\n * @name Device.browser.mozilla\n * @type boolean\n */\n\n/**\n * Internet Explorer browser name.\n * @name Device.browser.BROWSER.INTERNET_EXPLORER\n */\n\n/**\n * Edge browser name.\n * @name Device.browser.BROWSER.EDGE\n */\n\n/**\n * Firefox browser name.\n * @name Device.browser.BROWSER.FIREFOX\n */\n\n/**\n * Chrome browser name.\n * @name Device.browser.BROWSER.CHROME\n */\n\n/**\n * Safari browser name.\n * @name Device.browser.BROWSER.SAFARI\n */\n\n/**\n * Android stock browser name.\n * @name Device.browser.BROWSER.ANDROID\n */\n\nconst BROWSER = {\n\t\"INTERNET_EXPLORER\": \"ie\",\n\t\"EDGE\": \"ed\",\n\t\"FIREFOX\": \"ff\",\n\t\"CHROME\": \"cr\",\n\t\"SAFARI\": \"sf\",\n\t\"ANDROID\": \"an\",\n};\n\n/*!\n* Taken from jQuery JavaScript Library v1.7.1\n* http://jquery.com/\n*\n* Copyright 2011, John Resig\n* Dual licensed under the MIT or GPL Version 2 licenses.\n* http://jquery.org/license\n*\n* Includes Sizzle.js\n* http://sizzlejs.com/\n* Copyright 2011, The Dojo Foundation\n* Released under the MIT, BSD, and GPL Licenses.\n*\n* Date: Mon Nov 21 21:11:03 2011 -0500\n*/\nconst _calcBrowser = () => {\n\tconst sUserAgent = navigator.userAgent.toLowerCase();\n\n\tconst rwebkit = /(webkit)[ /]([\\w.]+)/;\n\tconst rmsie = /(msie) ([\\w.]+)/;\n\tconst rmsie11 = /(trident)\\/[\\w.]+;.*rv:([\\w.]+)/;\n\tconst redge = /(edge)[ /]([\\w.]+)/;\n\tconst rmozilla = /(mozilla)(?:.*? rv:([\\w.]+))?/;\n\n\t// WinPhone IE11 and MS Edge userAgents contain \"WebKit\" and \"Mozilla\" and therefore must be checked first\n\tconst browserMatch = redge.exec(sUserAgent)\n\t\t|| rmsie11.exec(sUserAgent)\n\t\t|| rwebkit.exec(sUserAgent)\n\t\t|| rmsie.exec(sUserAgent)\n\t\t|| (sUserAgent.indexOf(\"compatible\") < 0 && rmozilla.exec(sUserAgent)) || [];\n\n\tconst oRes = {\n\t\tbrowser: browserMatch[1] || \"\",\n\t\tversion: browserMatch[2] || \"0\",\n\t};\n\toRes[oRes.browser] = true;\n\treturn oRes;\n};\n\nconst _getBrowser = () => {\n\tconst oBrowser = _calcBrowser();\n\tconst sUserAgent = navigator.userAgent;\n\tconst oNavigator = window.navigator;\n\n\t// jQuery checks for user agent strings. We differentiate between browsers\n\tlet oExpMobile;\n\tlet oResult;\n\tlet fVersion;\n\n\t// Mozilla\n\tif (oBrowser.mozilla) {\n\t\toExpMobile = /Mobile/;\n\t\tif (sUserAgent.match(/Firefox\\/(\\d+\\.\\d+)/)) {\n\t\t\tfVersion = parseFloat(RegExp.$1);\n\t\t\toResult = {\n\t\t\t\tname: BROWSER.FIREFOX,\n\t\t\t\tversionStr: `${fVersion}`,\n\t\t\t\tversion: fVersion,\n\t\t\t\tmozilla: true,\n\t\t\t\tmobile: oExpMobile.test(sUserAgent),\n\t\t\t};\n\t\t} else {\n\t\t\t// unknown mozilla browser\n\t\t\toResult = {\n\t\t\t\tmobile: oExpMobile.test(sUserAgent),\n\t\t\t\tmozilla: true,\n\t\t\t\tversion: -1,\n\t\t\t};\n\t\t}\n\t} else if (oBrowser.webkit) {\n\t\t// webkit version is needed for calculation if the mobile android device is a tablet (calculation of other mobile devices work without)\n\t\tconst regExpWebkitVersion = sUserAgent.toLowerCase().match(/webkit[/]([\\d.]+)/);\n\t\tlet webkitVersion;\n\t\tif (regExpWebkitVersion) {\n\t\t\twebkitVersion = regExpWebkitVersion[1];\n\t\t}\n\t\toExpMobile = /Mobile/;\n\t\tconst aChromeMatch = sUserAgent.match(/(Chrome|CriOS)\\/(\\d+\\.\\d+).\\d+/);\n\t\tconst aFirefoxMatch = sUserAgent.match(/FxiOS\\/(\\d+\\.\\d+)/);\n\t\tconst aAndroidMatch = sUserAgent.match(/Android .+ Version\\/(\\d+\\.\\d+)/);\n\n\t\tif (aChromeMatch || aFirefoxMatch || aAndroidMatch) {\n\t\t\tlet sName,\n\t\t\t\tsVersion,\n\t\t\t\tbMobile;\n\n\t\t\tif (aChromeMatch) {\n\t\t\t\tsName = BROWSER.CHROME;\n\t\t\t\tbMobile = oExpMobile.test(sUserAgent);\n\t\t\t\tsVersion = parseFloat(aChromeMatch[2]);\n\t\t\t} else if (aFirefoxMatch) {\n\t\t\t\tsName = BROWSER.FIREFOX;\n\t\t\t\tbMobile = true;\n\t\t\t\tsVersion = parseFloat(aFirefoxMatch[1]);\n\t\t\t} else if (aAndroidMatch) {\n\t\t\t\tsName = BROWSER.ANDROID;\n\t\t\t\tbMobile = oExpMobile.test(sUserAgent);\n\t\t\t\tsVersion = parseFloat(aAndroidMatch[1]);\n\t\t\t}\n\n\t\t\toResult = {\n\t\t\t\tname: sName,\n\t\t\t\tmobile: bMobile,\n\t\t\t\tversionStr: `${sVersion}`,\n\t\t\t\tversion: sVersion,\n\t\t\t\twebkit: true,\n\t\t\t\twebkitVersion,\n\t\t\t};\n\t\t} else { // Safari might have an issue with sUserAgent.match(...); thus changing\n\t\t\tconst oExp = /(Version|PhantomJS)\\/(\\d+\\.\\d+).*Safari/;\n\t\t\tconst bStandalone = oNavigator.standalone;\n\t\t\tif (oExp.test(sUserAgent)) {\n\t\t\t\tconst aParts = oExp.exec(sUserAgent);\n\t\t\t\tfVersion = parseFloat(aParts[2]);\n\t\t\t\toResult = {\n\t\t\t\t\tname: BROWSER.SAFARI,\n\t\t\t\t\tversionStr: `${fVersion}`,\n\t\t\t\t\tfullscreen: false,\n\t\t\t\t\twebview: false,\n\t\t\t\t\tversion: fVersion,\n\t\t\t\t\tmobile: oExpMobile.test(sUserAgent),\n\t\t\t\t\twebkit: true,\n\t\t\t\t\twebkitVersion,\n\t\t\t\t\tphantomJS: aParts[1] === \"PhantomJS\",\n\t\t\t\t};\n\t\t\t} else if (/iPhone|iPad|iPod/.test(sUserAgent) && !(/CriOS/.test(sUserAgent)) && !(/FxiOS/.test(sUserAgent)) && (bStandalone === true || bStandalone === false)) {\n\t\t\t\t// WebView or Standalone mode on iOS\n\t\t\t\toResult = {\n\t\t\t\t\tname: BROWSER.SAFARI,\n\t\t\t\t\tversion: -1,\n\t\t\t\t\tfullscreen: bStandalone,\n\t\t\t\t\twebview: !bStandalone,\n\t\t\t\t\tmobile: oExpMobile.test(sUserAgent),\n\t\t\t\t\twebkit: true,\n\t\t\t\t\twebkitVersion,\n\t\t\t\t};\n\t\t\t} else { // other webkit based browser\n\t\t\t\toResult = {\n\t\t\t\t\tmobile: oExpMobile.test(sUserAgent),\n\t\t\t\t\twebkit: true,\n\t\t\t\t\twebkitVersion,\n\t\t\t\t\tversion: -1,\n\t\t\t\t};\n\t\t\t}\n\t\t}\n\t} else if (oBrowser.msie || oBrowser.trident) {\n\t\tfVersion = parseFloat(oBrowser.version);\n\n\t\toResult = {\n\t\t\tname: BROWSER.INTERNET_EXPLORER,\n\t\t\tversionStr: `${fVersion}`,\n\t\t\tversion: fVersion,\n\t\t\tmsie: true,\n\t\t\tmobile: false,\n\t\t};\n\t} else if (oBrowser.edge) {\n\t\tfVersion = parseFloat(oBrowser.version);\n\t\toResult = {\n\t\t\tname: BROWSER.EDGE,\n\t\t\tversionStr: `${fVersion}`,\n\t\t\tversion: fVersion,\n\t\t\tedge: true,\n\t\t};\n\t} else {\n\t\toResult = {\n\t\t\tname: \"\",\n\t\t\tversionStr: \"\",\n\t\t\tversion: -1,\n\t\t\tmobile: false,\n\t\t};\n\t}\n\n\treturn oResult;\n};\n\nconst _setBrowser = () => {\n\tDevice.browser = _getBrowser();\n\tDevice.browser.BROWSER = BROWSER;\n\n\tif (Device.browser.name) {\n\t\tObject.keys(BROWSER).forEach(b => {\n\t\t\tif (BROWSER[b] === Device.browser.name) {\n\t\t\t\tDevice.browser[b.toLowerCase()] = true;\n\t\t\t}\n\t\t});\n\t}\n};\n\nconst getBrowser = () => {\n\tif (!Device.browser) {\n\t\t_setBrowser();\n\t}\n\treturn Device.browser;\n};\n\nconst isIE = () => {\n\tif (!Device.browser) {\n\t\t_setBrowser();\n\t}\n\treturn !!Device.browser.msie;\n};\n\nconst isEdge = () => {\n\tif (!Device.browser) {\n\t\t_setBrowser();\n\t}\n\treturn !!Device.browser.edge;\n};\n\nconst isChrome = () => {\n\tif (!Device.browser) {\n\t\t_setBrowser();\n\t}\n\treturn !!Device.browser.chrome;\n};\n\nconst isFF = () => {\n\tif (!Device.browser) {\n\t\t_setBrowser();\n\t}\n\treturn !!Device.browser.firefox;\n};\n\nconst isSafari = () => {\n\tif (!Device.browser) {\n\t\t_setBrowser();\n\t}\n\treturn !!Device.browser.safari;\n};\n\n//* ******* Support Detection ********\n\nconst _setSupport = () => {\n\tif (Device.support) {\n\t\treturn;\n\t}\n\n\tif (!Device.browser) {\n\t\t_setBrowser();\n\t}\n\n\tDevice.support = {};\n\tDevice.support.touch = !!((\"ontouchstart\" in window) || (navigator.maxTouchPoints > 0) || (window.DocumentTouch && document instanceof window.DocumentTouch));\n};\n\nconst supportTouch = () => {\n\tif (!Device.support) {\n\t\t_setSupport();\n\t}\n\n\treturn !!Device.support.touch;\n};\n\n//* ******* System Detection ********\n\n/**\n * Provides a basic categorization of the used device based on various indicators.\n *\n * <b>Note:</b> Depending on the capabilities of the device it is also possible that multiple flags are set to <code>true</code>.\n *\n * @namespace\n * @name Device.system\n */\n\n/**\n * If this flag is set to <code>true</code>, the device is recognized as a tablet.\n *\n * <b>Note:</b> This flag is also true for some browsers on desktop devices running on Windows 8 or higher.\n * Also see the documentation for {@link Device.system.combi} devices.\n * You can use the following logic to ensure that the current device is a tablet device:\n *\n * <pre>\n * if(Device.system.tablet && !Device.system.desktop){\n *\t...tablet related commands...\n * }\n * </pre>\n *\n * @name Device.system.tablet\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the device is recognized as a phone.\n *\n * @name Device.system.phone\n * @type boolean\n */\n\n/**\n * If this flag is set to <code>true</code>, the device is recognized as a desktop system.\n *\n * @name Device.system.desktop\n * @type boolean\n */\n\n/**\n * Indicates if the device is recognized as a combination of a desktop system and tablet.\n *\n * <b>Note:</b> This property is mainly for Microsoft Windows 8 (and following) devices where the mouse and touch event may be supported\n * natively by the browser being used. This property is set to <code>true</code> only when both mouse and touch event are natively supported.\n *\n * @name Device.system.combi\n * @type boolean\n */\n\n/**\n * @name Device.system.SYSTEMTYPE\n * Enumeration containing the names of known types of the devices.\n */\n\nconst SYSTEMTYPE = {\n\t\"TABLET\": \"tablet\",\n\t\"PHONE\": \"phone\",\n\t\"DESKTOP\": \"desktop\",\n\t\"COMBI\": \"combi\",\n};\n\nconst _isTablet = () => {\n\tconst sUserAgent = navigator.userAgent;\n\tif (Device.os.name === Device.os.OS.IOS) {\n\t\treturn /ipad/i.test(sUserAgent);\n\t}\n\t// in real mobile device\n\tif (supportTouch()) {\n\t\tif (Device.os.windows && Device.os.version >= 8) {\n\t\t\treturn true;\n\t\t}\n\n\t\tif (Device.browser.chrome && Device.os.android && Device.os.version >= 4.4) {\n\t\t\t// From Android version 4.4, WebView also uses Chrome as Kernel.\n\t\t\t// We can use the user agent pattern defined in Chrome to do phone/tablet detection\n\t\t\t// According to the information here: https://developer.chrome.com/multidevice/user-agent#chrome_for_android_user_agent,\n\t\t\t//  the existence of \"Mobile\" indicates it's a phone. But because the crosswalk framework which is used in Fiori Client\n\t\t\t//  inserts another \"Mobile\" to the user agent for both tablet and phone, we need to check whether \"Mobile Safari/<Webkit Rev>\" exists.\n\t\t\treturn !/Mobile Safari\\/[.0-9]+/.test(sUserAgent);\n\t\t}\n\t\tlet densityFactor = window.devicePixelRatio ? window.devicePixelRatio : 1; // may be undefined in Windows Phone devices\n\t\t// On Android sometimes window.screen.width returns the logical CSS pixels, sometimes the physical device pixels;\n\t\t// Tests on multiple devices suggest this depends on the Webkit version.\n\t\t// The Webkit patch which changed the behavior was done here: https://bugs.webkit.org/show_bug.cgi?id=106460\n\t\t// Chrome 27 with Webkit 537.36 returns the logical pixels,\n\t\t// Chrome 18 with Webkit 535.19 returns the physical pixels.\n\t\t// The BlackBerry 10 browser with Webkit 537.10+ returns the physical pixels.\n\t\t// So it appears like somewhere above Webkit 537.10 we do not hve to divide by the devicePixelRatio anymore.\n\t\tif (Device.os.android && Device.browser.webkit && (parseFloat(Device.browser.webkitVersion) > 537.10)) {\n\t\t\tdensityFactor = 1;\n\t\t}\n\n\t\t// this is how android distinguishes between tablet and phone\n\t\t// http://android-developers.blogspot.de/2011/07/new-tools-for-managing-screen-sizes.html\n\t\tconst bTablet = (Math.min(window.screen.width / densityFactor, window.screen.height / densityFactor) >= 600);\n\n\t\t// special workaround for Nexus 7 where the window.screen.width is 600px or 601px in portrait mode (=> tablet)\n\t\t// but window.screen.height 552px in landscape mode (=> phone), because the browser UI takes some space on top.\n\t\t// So the detected device type depends on the orientation :-(\n\t\t// actually this is a Chrome bug, as \"width\"/\"height\" should return the entire screen's dimensions and\n\t\t// \"availWidth\"/\"availHeight\" should return the size available after subtracting the browser UI\n\n\t\t/*\n\t\t\t\tif (isLandscape() &&\n\t\t\t\t\t(window.screen.height === 552 || window.screen.height === 553) // old/new Nexus 7\n\t\t\t\t\t&&\n\t\t\t\t\t(/Nexus 7/i.test(sUserAgent))) {\n\t\t\t\t\tbTablet = true;\n\t\t\t\t}\n\t\t\t\t*/\n\n\t\treturn bTablet;\n\t}\n\t// This simple android phone detection can be used here because this is the mobile emulation mode in desktop browser\n\tconst bAndroidPhone = (/(?=android)(?=.*mobile)/i.test(sUserAgent));\n\t// in desktop browser, it's detected as tablet when\n\t// 1. Windows 8 device with a touch screen where \"Touch\" is contained in the userAgent\n\t// 2. Android emulation and it's not an Android phone\n\treturn (Device.browser.msie && sUserAgent.indexOf(\"Touch\") !== -1) || (Device.os.android && !bAndroidPhone);\n};\n\nconst _getSystem = () => {\n\tconst bTabletDetected = _isTablet();\n\tconst isWin8Upwards = Device.os.windows && Device.os.version >= 8;\n\n\tconst oSystem = {};\n\toSystem.tablet = !!((Device.support.touch || isWin8Upwards) && bTabletDetected);\n\toSystem.phone = !!((Device.os.windows_phone || (Device.support.touch)) && !bTabletDetected);\n\toSystem.desktop = !!((!oSystem.tablet && !oSystem.phone) || isWin8Upwards);\n\toSystem.combi = oSystem.desktop && oSystem.tablet;\n\toSystem.SYSTEMTYPE = SYSTEMTYPE;\n\n\treturn oSystem;\n};\n\nconst _setSystem = () => {\n\t_setSupport();\n\t_setOS();\n\n\tDevice.system = {};\n\tDevice.system = _getSystem();\n\tif (Device.system.tablet || Device.system.phone) {\n\t\tDevice.browser.mobile = true;\n\t}\n};\n\nconst getSystem = () => {\n\tif (!Device.system) {\n\t\t_setSystem();\n\t}\n\n\treturn Device.system;\n};\n\nconst isDesktop = () => {\n\tif (!Device.system) {\n\t\t_setSystem();\n\t}\n\n\treturn Device.system.desktop;\n};\n\nconst isTablet = () => {\n\tif (!Device.system) {\n\t\t_setSystem();\n\t}\n\n\treturn Device.system.tablet;\n};\n\nconst isPhone = () => {\n\tif (!Device.system) {\n\t\t_setSystem();\n\t}\n\n\treturn Device.system.phone;\n};\n\nconst isMobile = () => {\n\tif (!Device.system) {\n\t\t_setSystem();\n\t}\n\n\treturn Device.browser.mobile;\n};\n\nexport {\n\tisIE,\n\tisEdge,\n\tisChrome,\n\tisFF,\n\tisSafari,\n\tisMobile,\n\tisDesktop,\n\tisTablet,\n\tisPhone,\n\tisAndroid,\n\tgetOS,\n\tgetSystem,\n\tgetBrowser,\n\tsupportTouch,\n};\n"]},"metadata":{},"sourceType":"module"}