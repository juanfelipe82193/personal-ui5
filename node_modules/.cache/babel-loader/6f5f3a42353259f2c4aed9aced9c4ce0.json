{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';\nimport { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';\nimport { useViewportRange } from '@ui5/webcomponents-react-base/lib/useViewportRange';\nimport { CurrentViewportRangeContext } from '@ui5/webcomponents-react/lib/CurrentViewportRangeContext';\nimport { FormGroup } from '@ui5/webcomponents-react/lib/FormGroup';\nimport { Grid } from '@ui5/webcomponents-react/lib/Grid';\nimport { Title } from '@ui5/webcomponents-react/lib/Title';\nimport { TitleLevel } from '@ui5/webcomponents-react/lib/TitleLevel';\nimport React, { forwardRef, useMemo } from 'react';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nvar styles = {\n  formTitle: {\n    borderBottom: \"1px solid \".concat(ThemingParameters.sapGroup_TitleBorderColor),\n    marginBottom: '2rem'\n  }\n};\nvar useStyles = createComponentStyles(styles, {\n  name: 'Form'\n});\n/**\n * <code>import { Form } from '@ui5/webcomponents-react/lib/Form';</code>\n */\n\nvar Form = forwardRef(function (props, ref) {\n  var title = props.title,\n      children = props.children,\n      className = props.className,\n      slot = props.slot,\n      style = props.style,\n      tooltip = props.tooltip;\n  var classes = useStyles();\n  var currentRange = useViewportRange('StdExt');\n\n  var _useMemo = useMemo(function () {\n    var formGroups;\n    var updatedTitle = title; // check if ungrouped FormItems exist amongst the Form's children and put them into an artificial FormGroup\n\n    if (Array.isArray(children)) {\n      var ungroupedItems = [];\n      formGroups = [];\n      children.forEach(function (child) {\n        if (child.type.displayName === 'FormItem') {\n          ungroupedItems.push(child);\n        } else if (child.type.displayName === 'FormGroup') {\n          formGroups.push(child);\n        }\n      });\n\n      if (ungroupedItems.length > 0) {\n        formGroups.push( /*#__PURE__*/React.createElement(FormGroup, null, ungroupedItems));\n      }\n    } else {\n      // check if a sole Form's group has a Title and take it as Form Title if one does not exist\n      var childProps = children.props;\n\n      if ((!title || title.length === 0) && childProps.title && childProps.title.length > 0) {\n        updatedTitle = childProps.title;\n        formGroups = React.cloneElement(children, {\n          title: null\n        });\n      } else {\n        formGroups = children;\n      }\n    }\n\n    return [formGroups, updatedTitle];\n  }, [children]),\n      _useMemo2 = _slicedToArray(_useMemo, 2),\n      formGroups = _useMemo2[0],\n      updatedTitle = _useMemo2[1];\n\n  var passThroughProps = usePassThroughHtmlProps(props);\n  return /*#__PURE__*/React.createElement(CurrentViewportRangeContext.Provider, {\n    value: currentRange\n  }, updatedTitle && /*#__PURE__*/React.createElement(Title, {\n    level: TitleLevel.H3,\n    className: classes.formTitle\n  }, updatedTitle), /*#__PURE__*/React.createElement(Grid, _extends({\n    ref: ref,\n    defaultSpan: 'XL6 L12 M12 S12',\n    className: className,\n    slot: slot,\n    style: style,\n    tooltip: tooltip\n  }, passThroughProps), formGroups));\n});\nForm.displayName = 'Form';\nexport { Form };","map":{"version":3,"sources":["../src/components/Form/Form.jss.ts","../src/components/Form/index.tsx"],"names":["styles","formTitle","borderBottom","ThemingParameters","marginBottom","useStyles","createComponentStyles","name","Form","forwardRef","title","children","className","slot","style","tooltip","props","classes","currentRange","useViewportRange","formGroups","updatedTitle","useMemo","Array","ungroupedItems","child","childProps","passThroughProps","usePassThroughHtmlProps","TitleLevel"],"mappings":"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","sourcesContent":["import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\n\nconst styles = {\n  formTitle: {\n    borderBottom: `1px solid ${ThemingParameters.sapGroup_TitleBorderColor}`,\n    marginBottom: '2rem'\n  }\n};\n\nexport { styles };\n","import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';\nimport { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';\nimport { useViewportRange } from '@ui5/webcomponents-react-base/lib/useViewportRange';\nimport { CurrentViewportRangeContext } from '@ui5/webcomponents-react/lib/CurrentViewportRangeContext';\nimport { FormGroup } from '@ui5/webcomponents-react/lib/FormGroup';\nimport { Grid } from '@ui5/webcomponents-react/lib/Grid';\nimport { Title } from '@ui5/webcomponents-react/lib/Title';\nimport { TitleLevel } from '@ui5/webcomponents-react/lib/TitleLevel';\nimport React, { FC, forwardRef, ReactElement, Ref, useMemo } from 'react';\nimport { CommonProps } from '../../interfaces/CommonProps';\nimport { styles } from './Form.jss';\n\nexport interface FormPropTypes extends CommonProps {\n  /**\n   * Components that are placed into Form.\n   */\n  children: ReactElement<unknown> | Array<ReactElement<unknown>>;\n  /**\n   * Form title\n   */\n  title?: string;\n}\n\nconst useStyles = createComponentStyles(styles, { name: 'Form' });\n\n/**\n * <code>import { Form } from '@ui5/webcomponents-react/lib/Form';</code>\n */\nconst Form: FC<FormPropTypes> = forwardRef((props: FormPropTypes, ref: Ref<HTMLDivElement>) => {\n  const { title, children, className, slot, style, tooltip } = props;\n\n  const classes = useStyles();\n  const currentRange = useViewportRange('StdExt');\n\n  const [formGroups, updatedTitle] = useMemo(() => {\n    let formGroups: any;\n    let updatedTitle: string = title;\n\n    // check if ungrouped FormItems exist amongst the Form's children and put them into an artificial FormGroup\n    if (Array.isArray(children)) {\n      const ungroupedItems = [];\n      formGroups = [];\n      children.forEach((child: any) => {\n        if (child.type.displayName === 'FormItem') {\n          ungroupedItems.push(child);\n        } else if (child.type.displayName === 'FormGroup') {\n          formGroups.push(child as ReactElement);\n        }\n      });\n\n      if (ungroupedItems.length > 0) {\n        formGroups.push(<FormGroup>{ungroupedItems}</FormGroup>);\n      }\n    } else {\n      // check if a sole Form's group has a Title and take it as Form Title if one does not exist\n      const childProps = (children as ReactElement).props;\n      if ((!title || title.length === 0) && childProps.title && childProps.title.length > 0) {\n        updatedTitle = childProps.title;\n        formGroups = React.cloneElement(children as ReactElement, { title: null });\n      } else {\n        formGroups = children;\n      }\n    }\n\n    return [formGroups, updatedTitle];\n  }, [children]);\n\n  const passThroughProps = usePassThroughHtmlProps(props);\n\n  return (\n    <CurrentViewportRangeContext.Provider value={currentRange}>\n      {updatedTitle && (\n        <Title level={TitleLevel.H3} className={classes.formTitle}>\n          {updatedTitle}\n        </Title>\n      )}\n      <Grid\n        ref={ref}\n        defaultSpan={'XL6 L12 M12 S12'}\n        className={className}\n        slot={slot}\n        style={style}\n        tooltip={tooltip}\n        {...passThroughProps}\n      >\n        {formGroups}\n      </Grid>\n    </CurrentViewportRangeContext.Provider>\n  );\n});\n\nForm.displayName = 'Form';\n\nexport { Form };\n"]},"metadata":{},"sourceType":"module"}