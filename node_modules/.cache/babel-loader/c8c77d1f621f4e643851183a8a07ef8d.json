{"ast":null,"code":"import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nimport { getTextWidth, truncateLongLabel } from '@ui5/webcomponents-react-charts/lib/Utils';\nimport React from 'react';\nvar defaultMaxYAxisWidth = 200;\n\nvar YAxisTicks = function YAxisTicks(props) {\n  var x = props.x,\n      y = props.y,\n      payload = props.payload,\n      config = props.config;\n  var formattedValue = config.formatter(payload.value);\n  var textToDisplay = formattedValue;\n\n  if (getTextWidth(formattedValue) > defaultMaxYAxisWidth) {\n    for (var i = \"\".concat(formattedValue).length; i > 0; i--) {\n      textToDisplay = truncateLongLabel(formattedValue, i);\n\n      if (getTextWidth(textToDisplay) <= defaultMaxYAxisWidth) {\n        break;\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(\".concat(x, \",\").concat(y + 3, \")\")\n  }, /*#__PURE__*/React.createElement(\"text\", {\n    fill: ThemingParameters.sapContent_LabelColor,\n    textAnchor: \"end\"\n  }, textToDisplay));\n};\n\nexport { YAxisTicks };","map":{"version":3,"sources":["../../src/internal/defaults.ts","../../src/internal/YAxisTicks.tsx"],"names":["defaultMaxYAxisWidth","YAxisTicks","x","y","payload","config","props","formattedValue","textToDisplay","getTextWidth","i","truncateLongLabel","ThemingParameters"],"mappings":";;;AAEO,IAAMA,oBAAoB,GAA1B,GAAA;;ICWMC,UAA+B,GAAG,SAAlCA,UAAkC,CAAA,KAAA,EAA4B;AAAA,MACjEC,CADiE,GACvCI,KADuC,CAAA,CAAA;AAAA,MAC9DH,CAD8D,GACvCG,KADuC,CAAA,CAAA;AAAA,MAC3DF,OAD2D,GACvCE,KADuC,CAAA,OAAA;AAAA,MAClDD,MADkD,GACvCC,KADuC,CAAA,MAAA;AAGzE,MAAMC,cAAc,GAAGF,MAAM,CAANA,SAAAA,CAAiBD,OAAO,CAA/C,KAAuBC,CAAvB;AACA,MAAIG,aAAa,GAAjB,cAAA;;AACA,MAAIC,YAAY,CAAZA,cAAY,CAAZA,GAAJ,oBAAA,EAAyD;AACvD,SAAK,IAAIC,CAAC,GAAG,GAAA,MAAA,CAAA,cAAA,EAAb,MAAA,EAAyCA,CAAC,GAA1C,CAAA,EAAgDA,CAAhD,EAAA,EAAqD;AACnDF,MAAAA,aAAa,GAAGG,iBAAiB,CAAA,cAAA,EAAjCH,CAAiC,CAAjCA;;AACA,UAAIC,YAAY,CAAZA,aAAY,CAAZA,IAAJ,oBAAA,EAAyD;AACvD;AACD;AACF;AACF;;AAED,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,GAAA,EAAA;AAAG,IAAA,SAAS,EAAA,aAAA,MAAA,CAAA,CAAA,EAAA,GAAA,EAAA,MAAA,CAAoBN,CAAC,GAArB,CAAA,EAAA,GAAA;AAAZ,GAAA,EAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;AAAM,IAAA,IAAI,EAAES,iBAAiB,CAA7B,qBAAA;AAAqD,IAAA,UAAU,EAAC;AAAhE,GAAA,EAFJ,aAEI,CADF,CADF;AAOD,C","sourcesContent":["export const defaultFormatter = (d) => d;\n\nexport const defaultMaxYAxisWidth = 200;\n","import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nimport { getTextWidth, truncateLongLabel } from '@ui5/webcomponents-react-charts/lib/Utils';\nimport React, { FC } from 'react';\nimport { IChartMeasure } from '../interfaces/IChartMeasure';\nimport { defaultMaxYAxisWidth } from './defaults';\n\ninterface YAxisTicksProps {\n  x?: number;\n  y?: number;\n  payload?: any;\n  config: IChartMeasure;\n}\n\nexport const YAxisTicks: FC<YAxisTicksProps> = (props: YAxisTicksProps) => {\n  const { x, y, payload, config } = props;\n\n  const formattedValue = config.formatter(payload.value);\n  let textToDisplay = formattedValue;\n  if (getTextWidth(formattedValue) > defaultMaxYAxisWidth) {\n    for (let i = `${formattedValue}`.length; i > 0; i--) {\n      textToDisplay = truncateLongLabel(formattedValue, i);\n      if (getTextWidth(textToDisplay) <= defaultMaxYAxisWidth) {\n        break;\n      }\n    }\n  }\n\n  return (\n    <g transform={`translate(${x},${y + 3})`}>\n      <text fill={ThemingParameters.sapContent_LabelColor} textAnchor=\"end\">\n        {textToDisplay}\n      </text>\n    </g>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}