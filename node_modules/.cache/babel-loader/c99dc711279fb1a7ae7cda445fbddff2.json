{"ast":null,"code":"import { fetchJsonOnce } from \"../util/FetchHelper.js\";\nimport { getFeature } from \"../FeaturesRegistry.js\";\nimport { DEFAULT_LOCALE, SUPPORTED_LOCALES } from \"../generated/AssetParameters.js\";\nconst resources = new Map();\nconst cldrData = {};\nconst cldrUrls = {}; // externally configurable mapping function for resolving (localeId -> URL)\n// default implementation - ui5 CDN\n\nlet cldrMappingFn = locale => `https://ui5.sap.com/1.60.2/resources/sap/ui/core/cldr/${locale}.json`;\n\nconst M_ISO639_OLD_TO_NEW = {\n  \"iw\": \"he\",\n  \"ji\": \"yi\",\n  \"in\": \"id\",\n  \"sh\": \"sr\"\n};\n\nconst calcLocale = (language, region, script) => {\n  // normalize language and handle special cases\n  language = language && M_ISO639_OLD_TO_NEW[language] || language; // Special case 1: in an SAP context, the inclusive language code \"no\" always means Norwegian Bokmal (\"nb\")\n\n  if (language === \"no\") {\n    language = \"nb\";\n  } // Special case 2: for Chinese, derive a default region from the script (this behavior is inherited from Java)\n\n\n  if (language === \"zh\" && !region) {\n    if (script === \"Hans\") {\n      region = \"CN\";\n    } else if (script === \"Hant\") {\n      region = \"TW\";\n    }\n  } // try language + region\n\n\n  let localeId = `${language}_${region}`;\n\n  if (!SUPPORTED_LOCALES.includes(localeId)) {\n    // fallback to language only\n    localeId = language;\n  }\n\n  if (!SUPPORTED_LOCALES.includes(localeId)) {\n    // fallback to english\n    localeId = DEFAULT_LOCALE;\n  }\n\n  return localeId;\n};\n\nconst resolveMissingMappings = () => {\n  if (!cldrMappingFn) {\n    return;\n  }\n\n  const missingLocales = SUPPORTED_LOCALES.filter(locale => !cldrData[locale] && !cldrUrls[locale]);\n  missingLocales.forEach(locale => {\n    cldrUrls[locale] = cldrMappingFn(locale);\n  });\n};\n\nconst registerModuleContent = (moduleName, content) => {\n  resources.set(moduleName, content);\n};\n\nconst getModuleContent = moduleName => {\n  const moduleContent = resources.get(moduleName);\n\n  if (moduleContent) {\n    return moduleContent;\n  }\n\n  const missingModule = moduleName.match(/sap\\/ui\\/core\\/cldr\\/(\\w+)\\.json/);\n\n  if (missingModule) {\n    throw new Error(`CLDR data for locale ${missingModule[1]} is not loaded!`);\n  }\n\n  throw new Error(`Unknown module ${moduleName}`);\n};\n\nconst fetchCldr = async (language, region, script) => {\n  resolveMissingMappings();\n  const localeId = calcLocale(language, region, script);\n  let cldrObj = cldrData[localeId];\n  const url = cldrUrls[localeId];\n  const OpenUI5Support = getFeature(\"OpenUI5Support\");\n\n  if (!cldrObj && OpenUI5Support) {\n    cldrObj = OpenUI5Support.getLocaleDataObject();\n  }\n\n  if (cldrObj) {\n    // inlined from build or fetched independently\n    registerModuleContent(`sap/ui/core/cldr/${localeId}.json`, cldrObj);\n  } else if (url) {\n    // fetch it\n    const cldrContent = await fetchJsonOnce(url);\n    registerModuleContent(`sap/ui/core/cldr/${localeId}.json`, cldrContent);\n  }\n};\n\nconst registerCldr = (locale, url) => {\n  cldrUrls[locale] = url;\n};\n\nconst setCldrData = (locale, data) => {\n  cldrData[locale] = data;\n};\n\nconst getCldrData = locale => {\n  return cldrData[locale];\n};\n\nconst _registerMappingFunction = mappingFn => {\n  cldrMappingFn = mappingFn;\n};\n\nexport { fetchCldr, registerCldr, setCldrData, getCldrData, getModuleContent, _registerMappingFunction };","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/@ui5/webcomponents-base/dist/asset-registries/LocaleData.js"],"names":["fetchJsonOnce","getFeature","DEFAULT_LOCALE","SUPPORTED_LOCALES","resources","Map","cldrData","cldrUrls","cldrMappingFn","locale","M_ISO639_OLD_TO_NEW","calcLocale","language","region","script","localeId","includes","resolveMissingMappings","missingLocales","filter","forEach","registerModuleContent","moduleName","content","set","getModuleContent","moduleContent","get","missingModule","match","Error","fetchCldr","cldrObj","url","OpenUI5Support","getLocaleDataObject","cldrContent","registerCldr","setCldrData","data","getCldrData","_registerMappingFunction","mappingFn"],"mappings":"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","sourcesContent":["import { fetchJsonOnce } from \"../util/FetchHelper.js\";\nimport { getFeature } from \"../FeaturesRegistry.js\";\nimport { DEFAULT_LOCALE, SUPPORTED_LOCALES } from \"../generated/AssetParameters.js\";\n\nconst resources = new Map();\nconst cldrData = {};\nconst cldrUrls = {};\n\n// externally configurable mapping function for resolving (localeId -> URL)\n// default implementation - ui5 CDN\nlet cldrMappingFn = locale => `https://ui5.sap.com/1.60.2/resources/sap/ui/core/cldr/${locale}.json`;\n\nconst M_ISO639_OLD_TO_NEW = {\n\t\"iw\": \"he\",\n\t\"ji\": \"yi\",\n\t\"in\": \"id\",\n\t\"sh\": \"sr\",\n};\n\nconst calcLocale = (language, region, script) => {\n\t// normalize language and handle special cases\n\tlanguage = (language && M_ISO639_OLD_TO_NEW[language]) || language;\n\t// Special case 1: in an SAP context, the inclusive language code \"no\" always means Norwegian Bokmal (\"nb\")\n\tif (language === \"no\") {\n\t\tlanguage = \"nb\";\n\t}\n\t// Special case 2: for Chinese, derive a default region from the script (this behavior is inherited from Java)\n\tif (language === \"zh\" && !region) {\n\t\tif (script === \"Hans\") {\n\t\t\tregion = \"CN\";\n\t\t} else if (script === \"Hant\") {\n\t\t\tregion = \"TW\";\n\t\t}\n\t}\n\n\t// try language + region\n\tlet localeId = `${language}_${region}`;\n\tif (!SUPPORTED_LOCALES.includes(localeId)) {\n\t\t// fallback to language only\n\t\tlocaleId = language;\n\t}\n\tif (!SUPPORTED_LOCALES.includes(localeId)) {\n\t\t// fallback to english\n\t\tlocaleId = DEFAULT_LOCALE;\n\t}\n\n\treturn localeId;\n};\n\n\nconst resolveMissingMappings = () => {\n\tif (!cldrMappingFn) {\n\t\treturn;\n\t}\n\n\tconst missingLocales = SUPPORTED_LOCALES.filter(locale => !cldrData[locale] && !cldrUrls[locale]);\n\tmissingLocales.forEach(locale => {\n\t\tcldrUrls[locale] = cldrMappingFn(locale);\n\t});\n};\n\nconst registerModuleContent = (moduleName, content) => {\n\tresources.set(moduleName, content);\n};\n\nconst getModuleContent = moduleName => {\n\tconst moduleContent = resources.get(moduleName);\n\tif (moduleContent) {\n\t\treturn moduleContent;\n\t}\n\n\tconst missingModule = moduleName.match(/sap\\/ui\\/core\\/cldr\\/(\\w+)\\.json/);\n\tif (missingModule) {\n\t\tthrow new Error(`CLDR data for locale ${missingModule[1]} is not loaded!`);\n\t}\n\n\tthrow new Error(`Unknown module ${moduleName}`);\n};\n\nconst fetchCldr = async (language, region, script) => {\n\tresolveMissingMappings();\n\tconst localeId = calcLocale(language, region, script);\n\n\tlet cldrObj = cldrData[localeId];\n\tconst url = cldrUrls[localeId];\n\n\tconst OpenUI5Support = getFeature(\"OpenUI5Support\");\n\tif (!cldrObj && OpenUI5Support) {\n\t\tcldrObj = OpenUI5Support.getLocaleDataObject();\n\t}\n\n\tif (cldrObj) {\n\t\t// inlined from build or fetched independently\n\t\tregisterModuleContent(`sap/ui/core/cldr/${localeId}.json`, cldrObj);\n\t} else if (url) {\n\t\t// fetch it\n\t\tconst cldrContent = await fetchJsonOnce(url);\n\t\tregisterModuleContent(`sap/ui/core/cldr/${localeId}.json`, cldrContent);\n\t}\n};\n\nconst registerCldr = (locale, url) => {\n\tcldrUrls[locale] = url;\n};\n\nconst setCldrData = (locale, data) => {\n\tcldrData[locale] = data;\n};\n\nconst getCldrData = locale => {\n\treturn cldrData[locale];\n};\n\nconst _registerMappingFunction = mappingFn => {\n\tcldrMappingFn = mappingFn;\n};\n\nexport {\n\tfetchCldr,\n\tregisterCldr,\n\tsetCldrData,\n\tgetCldrData,\n\tgetModuleContent,\n\t_registerMappingFunction,\n};\n"]},"metadata":{},"sourceType":"module"}