{"ast":null,"code":"import getLocale from \"../locale/getLocale.js\";\nimport { fetchJsonOnce } from \"../util/FetchHelper.js\";\nimport normalizeLocale from \"../locale/normalizeLocale.js\";\nimport nextFallbackLocale from \"../locale/nextFallbackLocale.js\";\nimport { DEFAULT_LANGUAGE } from \"../generated/AssetParameters.js\";\nconst bundleData = new Map();\nconst bundleURLs = new Map();\n/**\n * Sets a map with texts and ID the are related to.\n * @param {string} packageName package ID that the i18n bundle will be related to\n * @param {Object} data an object with string locales as keys and text translataions as values\n * @public\n */\n\nconst setI18nBundleData = (packageName, data) => {\n  bundleData.set(packageName, data);\n};\n\nconst getI18nBundleData = packageName => {\n  return bundleData.get(packageName);\n};\n/**\n * Registers a map of locale/url information, to be used by the <code>fetchI18nBundle</code> method.\n * @param {string} packageName package ID that the i18n bundle will be related to\n * @param {Object} bundle an object with string locales as keys and the URLs of where the corresponding locale can be fetched from, f.e {\"en\": \"path/en.json\", ...}\n * @public\n */\n\n\nconst registerI18nBundle = (packageName, bundle) => {\n  bundleURLs.set(packageName, bundle);\n};\n/**\n * This method preforms the asynchronous task of fetching the actual text resources. It will fetch\n * each text resource over the network once (even for multiple calls to the same method).\n * It should be fully finished before the i18nBundle class is created in the webcomponents.\n * This method uses the bundle URLs that are populated by the <code>registerI18nBundle</code> method.\n * To simplify the usage, the synchronization of both methods happens internally for the same <code>bundleId</code>\n * @param {packageName} packageName the NPM package name\n * @public\n */\n\n\nconst fetchI18nBundle = async packageName => {\n  const bundlesForPackage = bundleURLs.get(packageName);\n\n  if (!bundlesForPackage) {\n    console.warn(`Message bundle assets are not configured. Falling back to English texts.`,\n    /* eslint-disable-line */\n    ` You need to import ${packageName}/dist/Assets.js with a build tool that supports JSON imports.`);\n    /* eslint-disable-line */\n\n    return;\n  }\n\n  const language = getLocale().getLanguage();\n  let localeId = normalizeLocale(language);\n\n  while (!bundlesForPackage[localeId]) {\n    localeId = nextFallbackLocale(localeId);\n  }\n\n  if (localeId === DEFAULT_LANGUAGE) {\n    return;\n  }\n\n  const bundleURL = bundlesForPackage[localeId];\n\n  if (typeof bundleURL === \"object\") {\n    // inlined from build\n    setI18nBundleData(packageName, bundleURL);\n    return;\n  }\n\n  const data = await fetchJsonOnce(bundleURL);\n  setI18nBundleData(packageName, data);\n};\n\nexport { fetchI18nBundle, registerI18nBundle, setI18nBundleData, getI18nBundleData };","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/@ui5/webcomponents-base/dist/asset-registries/i18n.js"],"names":["getLocale","fetchJsonOnce","normalizeLocale","nextFallbackLocale","DEFAULT_LANGUAGE","bundleData","Map","bundleURLs","setI18nBundleData","packageName","data","set","getI18nBundleData","get","registerI18nBundle","bundle","fetchI18nBundle","bundlesForPackage","console","warn","language","getLanguage","localeId","bundleURL"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,SAASC,aAAT,QAA8B,wBAA9B;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AAEA,MAAMC,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AACA,MAAMC,UAAU,GAAG,IAAID,GAAJ,EAAnB;AAEA;;;;;;;AAMA,MAAME,iBAAiB,GAAG,CAACC,WAAD,EAAcC,IAAd,KAAuB;AAChDL,EAAAA,UAAU,CAACM,GAAX,CAAeF,WAAf,EAA4BC,IAA5B;AACA,CAFD;;AAIA,MAAME,iBAAiB,GAAGH,WAAW,IAAI;AACxC,SAAOJ,UAAU,CAACQ,GAAX,CAAeJ,WAAf,CAAP;AACA,CAFD;AAIA;;;;;;;;AAMA,MAAMK,kBAAkB,GAAG,CAACL,WAAD,EAAcM,MAAd,KAAyB;AACnDR,EAAAA,UAAU,CAACI,GAAX,CAAeF,WAAf,EAA4BM,MAA5B;AACA,CAFD;AAIA;;;;;;;;;;;AASA,MAAMC,eAAe,GAAG,MAAMP,WAAN,IAAqB;AAC5C,QAAMQ,iBAAiB,GAAGV,UAAU,CAACM,GAAX,CAAeJ,WAAf,CAA1B;;AAEA,MAAI,CAACQ,iBAAL,EAAwB;AACvBC,IAAAA,OAAO,CAACC,IAAR,CAAc,0EAAd;AAAyF;AACxF,2BAAsBV,WAAY,+DADnC;AACoG;;AACpG;AACA;;AAED,QAAMW,QAAQ,GAAGpB,SAAS,GAAGqB,WAAZ,EAAjB;AAEA,MAAIC,QAAQ,GAAGpB,eAAe,CAACkB,QAAD,CAA9B;;AACA,SAAO,CAACH,iBAAiB,CAACK,QAAD,CAAzB,EAAqC;AACpCA,IAAAA,QAAQ,GAAGnB,kBAAkB,CAACmB,QAAD,CAA7B;AACA;;AAED,MAAIA,QAAQ,KAAKlB,gBAAjB,EAAmC;AAClC;AACA;;AAED,QAAMmB,SAAS,GAAGN,iBAAiB,CAACK,QAAD,CAAnC;;AAEA,MAAI,OAAOC,SAAP,KAAqB,QAAzB,EAAmC;AAAE;AACpCf,IAAAA,iBAAiB,CAACC,WAAD,EAAcc,SAAd,CAAjB;AACA;AACA;;AAED,QAAMb,IAAI,GAAG,MAAMT,aAAa,CAACsB,SAAD,CAAhC;AACAf,EAAAA,iBAAiB,CAACC,WAAD,EAAcC,IAAd,CAAjB;AACA,CA7BD;;AA+BA,SACCM,eADD,EAECF,kBAFD,EAGCN,iBAHD,EAICI,iBAJD","sourcesContent":["import getLocale from \"../locale/getLocale.js\";\nimport { fetchJsonOnce } from \"../util/FetchHelper.js\";\nimport normalizeLocale from \"../locale/normalizeLocale.js\";\nimport nextFallbackLocale from \"../locale/nextFallbackLocale.js\";\nimport { DEFAULT_LANGUAGE } from \"../generated/AssetParameters.js\";\n\nconst bundleData = new Map();\nconst bundleURLs = new Map();\n\n/**\n * Sets a map with texts and ID the are related to.\n * @param {string} packageName package ID that the i18n bundle will be related to\n * @param {Object} data an object with string locales as keys and text translataions as values\n * @public\n */\nconst setI18nBundleData = (packageName, data) => {\n\tbundleData.set(packageName, data);\n};\n\nconst getI18nBundleData = packageName => {\n\treturn bundleData.get(packageName);\n};\n\n/**\n * Registers a map of locale/url information, to be used by the <code>fetchI18nBundle</code> method.\n * @param {string} packageName package ID that the i18n bundle will be related to\n * @param {Object} bundle an object with string locales as keys and the URLs of where the corresponding locale can be fetched from, f.e {\"en\": \"path/en.json\", ...}\n * @public\n */\nconst registerI18nBundle = (packageName, bundle) => {\n\tbundleURLs.set(packageName, bundle);\n};\n\n/**\n * This method preforms the asynchronous task of fetching the actual text resources. It will fetch\n * each text resource over the network once (even for multiple calls to the same method).\n * It should be fully finished before the i18nBundle class is created in the webcomponents.\n * This method uses the bundle URLs that are populated by the <code>registerI18nBundle</code> method.\n * To simplify the usage, the synchronization of both methods happens internally for the same <code>bundleId</code>\n * @param {packageName} packageName the NPM package name\n * @public\n */\nconst fetchI18nBundle = async packageName => {\n\tconst bundlesForPackage = bundleURLs.get(packageName);\n\n\tif (!bundlesForPackage) {\n\t\tconsole.warn(`Message bundle assets are not configured. Falling back to English texts.`, /* eslint-disable-line */\n\t\t` You need to import ${packageName}/dist/Assets.js with a build tool that supports JSON imports.`); /* eslint-disable-line */\n\t\treturn;\n\t}\n\n\tconst language = getLocale().getLanguage();\n\n\tlet localeId = normalizeLocale(language);\n\twhile (!bundlesForPackage[localeId]) {\n\t\tlocaleId = nextFallbackLocale(localeId);\n\t}\n\n\tif (localeId === DEFAULT_LANGUAGE) {\n\t\treturn;\n\t}\n\n\tconst bundleURL = bundlesForPackage[localeId];\n\n\tif (typeof bundleURL === \"object\") { // inlined from build\n\t\tsetI18nBundleData(packageName, bundleURL);\n\t\treturn;\n\t}\n\n\tconst data = await fetchJsonOnce(bundleURL);\n\tsetI18nBundleData(packageName, data);\n};\n\nexport {\n\tfetchI18nBundle,\n\tregisterI18nBundle,\n\tsetI18nBundleData,\n\tgetI18nBundleData,\n};\n"]},"metadata":{},"sourceType":"module"}