{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nimport { getTextWidth } from '@ui5/webcomponents-react-charts/lib/Utils';\nimport React, { createElement } from 'react';\nimport { Label } from 'recharts';\n\nvar ChartDataLabel = function ChartDataLabel(props) {\n  var _props$value;\n\n  var config = props.config,\n      chartType = props.chartType,\n      viewBox = props.viewBox;\n\n  if (config.hideDataLabel) {\n    return null;\n  }\n\n  if (config.DataLabel) {\n    return createElement(config.DataLabel, props);\n  }\n\n  var formattedLabel = config.formatter((_props$value = props.value) !== null && _props$value !== void 0 ? _props$value : props.children);\n\n  if (chartType === 'bar' || chartType === 'column') {\n    if (viewBox.width < getTextWidth(formattedLabel)) {\n      return null;\n    }\n\n    if (viewBox.height < 12) {\n      return null;\n    }\n  }\n\n  var fill = ThemingParameters.sapContent_ContrastTextColor;\n\n  if (['area', 'line', 'radar'].includes(chartType)) {\n    fill = ThemingParameters.sapTextColor; // label is displayed outside of the colored element\n  }\n\n  return /*#__PURE__*/React.createElement(Label, _extends({\n    fill: fill,\n    viewBox: viewBox\n  }, props, {\n    content: undefined,\n    value: formattedLabel\n  }));\n};\n\nexport { ChartDataLabel };","map":{"version":3,"sources":["../../src/internal/ChartDataLabel.tsx"],"names":["ChartDataLabel","config","chartType","viewBox","props","createElement","formattedLabel","getTextWidth","fill","ThemingParameters"],"mappings":";;;;;;IAeaA,cAAwC,GAAG,SAA3CA,cAA2C,CAAA,KAAA,EAAiC;AAAA,MAAA,YAAA;;AAAA,MAC/EC,MAD+E,GAChDG,KADgD,CAAA,MAAA;AAAA,MACvEF,SADuE,GAChDE,KADgD,CAAA,SAAA;AAAA,MAC5DD,OAD4D,GAChDC,KADgD,CAAA,OAAA;;AAGvF,MAAIH,MAAM,CAAV,aAAA,EAA0B;AACxB,WAAA,IAAA;AACD;;AAED,MAAIA,MAAM,CAAV,SAAA,EAAsB;AACpB,WAAOI,aAAa,CAACJ,MAAM,CAAP,SAAA,EAApB,KAAoB,CAApB;AACD;;AAED,MAAMK,cAAc,GAAGL,MAAM,CAANA,SAAAA,CAAAA,CAAAA,YAAAA,GAAiBG,KAAK,CAAtBH,KAAAA,MAAAA,IAAAA,IAAAA,YAAAA,KAAAA,KAAAA,CAAAA,GAAAA,YAAAA,GAAgCG,KAAK,CAA5D,QAAuBH,CAAvB;;AACA,MAAIC,SAAS,KAATA,KAAAA,IAAuBA,SAAS,KAApC,QAAA,EAAmD;AACjD,QAAIC,OAAO,CAAPA,KAAAA,GAAgBI,YAAY,CAAhC,cAAgC,CAAhC,EAAkD;AAChD,aAAA,IAAA;AACD;;AACD,QAAIJ,OAAO,CAAPA,MAAAA,GAAJ,EAAA,EAAyB;AACvB,aAAA,IAAA;AACD;AACF;;AAED,MAAIK,IAAI,GAAGC,iBAAiB,CAA5B,4BAAA;;AACA,MAAI,CAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAA,QAAA,CAAJ,SAAI,CAAJ,EAAmD;AACjDD,IAAAA,IAAI,GAAGC,iBAAiB,CADyB,YACjDD,CADiD,CAAA;AAElD;;AAED,SAAA,aAAO,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA,QAAA,CAAA;AAAO,IAAA,IAAI,EAAX,IAAA;AAAmB,IAAA,OAAO,EAAEL;AAA5B,GAAA,EAAA,KAAA,EAAA;AAAyD,IAAA,OAAO,EAAhE,SAAA;AAA6E,IAAA,KAAK,EAAEG;AAApF,GAAA,CAAA,CAAP;AACD,C","sourcesContent":["import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';\nimport { getTextWidth } from '@ui5/webcomponents-react-charts/lib/Utils';\nimport React, { FC, createElement } from 'react';\nimport { IChartMeasure } from '../interfaces/IChartMeasure';\nimport { Label } from 'recharts';\n\ninterface CustomDataLabelProps {\n  config: IChartMeasure;\n  viewBox?: any;\n  chartType: 'bar' | 'column' | 'line' | 'radar' | 'pie' | 'area';\n  position?: string;\n  value?: any;\n  children?: any;\n}\n\nexport const ChartDataLabel: FC<CustomDataLabelProps> = (props: CustomDataLabelProps) => {\n  const { config, chartType, viewBox } = props;\n\n  if (config.hideDataLabel) {\n    return null;\n  }\n\n  if (config.DataLabel) {\n    return createElement(config.DataLabel, props);\n  }\n\n  const formattedLabel = config.formatter(props.value ?? props.children);\n  if (chartType === 'bar' || chartType === 'column') {\n    if (viewBox.width < getTextWidth(formattedLabel)) {\n      return null;\n    }\n    if (viewBox.height < 12) {\n      return null;\n    }\n  }\n\n  let fill = ThemingParameters.sapContent_ContrastTextColor;\n  if (['area', 'line', 'radar'].includes(chartType)) {\n    fill = ThemingParameters.sapTextColor; // label is displayed outside of the colored element\n  }\n\n  return <Label fill={fill} viewBox={viewBox} {...(props as any)} content={undefined} value={formattedLabel} />;\n};\n"]},"metadata":{},"sourceType":"module"}