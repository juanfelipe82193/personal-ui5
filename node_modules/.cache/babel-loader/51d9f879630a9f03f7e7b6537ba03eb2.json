{"ast":null,"code":"import detectNavigatorLanguage from \"../util/detectNavigatorLanguage.js\";\nimport { getLanguage as getConfigLanguage } from \"../config/Language.js\";\nimport Locale from \"./Locale.js\";\n\nvar convertToLocaleOrNull = function convertToLocaleOrNull(lang) {\n  try {\n    if (lang && typeof lang === \"string\") {\n      return new Locale(lang);\n    }\n  } catch (e) {// ignore\n  }\n};\n/**\n * Returns the locale based on the parameter or configured language Configuration#getLanguage\n * If no language has been configured - a new locale based on browser language is returned\n */\n\n\nvar getLocale = function getLocale(lang) {\n  if (lang) {\n    return convertToLocaleOrNull(lang);\n  }\n\n  if (getConfigLanguage()) {\n    return new Locale(getConfigLanguage());\n  }\n\n  return convertToLocaleOrNull(detectNavigatorLanguage());\n};\n\nexport default getLocale;","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/@ui5/webcomponents-base/dist/locale/getLocale.js"],"names":["detectNavigatorLanguage","getLanguage","getConfigLanguage","Locale","convertToLocaleOrNull","lang","e","getLocale"],"mappings":"AAAA,OAAOA,uBAAP,MAAoC,oCAApC;AACA,SAASC,WAAW,IAAIC,iBAAxB,QAAiD,uBAAjD;AACA,OAAOC,MAAP,MAAmB,aAAnB;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAC,IAAI,EAAI;AACrC,MAAI;AACH,QAAIA,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;AACrC,aAAO,IAAIF,MAAJ,CAAWE,IAAX,CAAP;AACA;AACD,GAJD,CAIE,OAAOC,CAAP,EAAU,CACX;AACA;AACD,CARD;AAUA;;;;;;AAIA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAF,IAAI,EAAI;AACzB,MAAIA,IAAJ,EAAU;AACT,WAAOD,qBAAqB,CAACC,IAAD,CAA5B;AACA;;AAED,MAAIH,iBAAiB,EAArB,EAAyB;AACxB,WAAO,IAAIC,MAAJ,CAAWD,iBAAiB,EAA5B,CAAP;AACA;;AAED,SAAOE,qBAAqB,CAACJ,uBAAuB,EAAxB,CAA5B;AACA,CAVD;;AAYA,eAAeO,SAAf","sourcesContent":["import detectNavigatorLanguage from \"../util/detectNavigatorLanguage.js\";\nimport { getLanguage as getConfigLanguage } from \"../config/Language.js\";\nimport Locale from \"./Locale.js\";\n\nconst convertToLocaleOrNull = lang => {\n\ttry {\n\t\tif (lang && typeof lang === \"string\") {\n\t\t\treturn new Locale(lang);\n\t\t}\n\t} catch (e) {\n\t\t// ignore\n\t}\n};\n\n/**\n * Returns the locale based on the parameter or configured language Configuration#getLanguage\n * If no language has been configured - a new locale based on browser language is returned\n */\nconst getLocale = lang => {\n\tif (lang) {\n\t\treturn convertToLocaleOrNull(lang);\n\t}\n\n\tif (getConfigLanguage()) {\n\t\treturn new Locale(getConfigLanguage());\n\t}\n\n\treturn convertToLocaleOrNull(detectNavigatorLanguage());\n};\n\nexport default getLocale;\n"]},"metadata":{},"sourceType":"module"}