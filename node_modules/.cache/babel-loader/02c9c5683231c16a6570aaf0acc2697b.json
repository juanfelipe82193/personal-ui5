{"ast":null,"code":"import { isClickInRect } from \"./PopupUtils.js\";\nimport { getOpenedPopups, addOpenedPopup, removeOpenedPopup } from \"./OpenedPopupsRegistry.js\";\nlet updateInterval = null;\nconst intervalTimeout = 300;\nconst openedRegistry = [];\n\nconst repositionPopovers = event => {\n  openedRegistry.forEach(popover => {\n    popover.reposition();\n  });\n};\n\nconst attachGlobalScrollHandler = () => {\n  document.body.addEventListener(\"scroll\", repositionPopovers, true);\n};\n\nconst detachGlobalScrollHandler = () => {\n  document.body.removeEventListener(\"scroll\", repositionPopovers, true);\n};\n\nconst runUpdateInterval = () => {\n  updateInterval = setInterval(() => {\n    repositionPopovers();\n  }, intervalTimeout);\n};\n\nconst stopUpdateInterval = () => {\n  clearInterval(updateInterval);\n};\n\nconst attachGlobalClickHandler = () => {\n  document.addEventListener(\"mousedown\", clickHandler);\n};\n\nconst detachGlobalClickHandler = () => {\n  document.removeEventListener(\"mousedown\", clickHandler);\n};\n\nconst clickHandler = event => {\n  const openedPopovers = openedRegistry;\n  const openedPopups = getOpenedPopups();\n\n  if (openedPopups.length === 0 || !openedPopups[openedPopups.length - 1].openBy) {\n    return;\n  } // loop all open popovers\n\n\n  for (let i = openedPopovers.length - 1; i !== -1; i--) {\n    const popover = openedPopovers[i]; // if popover is modal, opener is clicked or there is one more popover above, skip closing\n\n    if (popover.modal || popover.isOpenerClicked(event)) {\n      return;\n    }\n\n    if (isClickInRect(event, popover.getBoundingClientRect())) {\n      break;\n    }\n\n    popover.close();\n  }\n};\n\nconst attachScrollHandler = popover => {\n  popover && popover.shadowRoot.addEventListener(\"scroll\", repositionPopovers, true);\n};\n\nconst detachScrollHandler = popover => {\n  popover && popover.shadowRoot.removeEventListener(\"scroll\", repositionPopovers);\n};\n\nconst addOpenedPopover = instance => {\n  addOpenedPopup(instance);\n  openedRegistry.push(instance);\n  attachScrollHandler(instance);\n\n  if (openedRegistry.length === 1) {\n    attachGlobalScrollHandler();\n    attachGlobalClickHandler();\n    runUpdateInterval();\n  }\n};\n\nconst removeOpenedPopover = instance => {\n  let count = 0;\n\n  for (let i = openedRegistry.indexOf(instance); i < openedRegistry.length; i++) {\n    openedRegistry[i].close(false, true);\n    removeOpenedPopup(openedRegistry[i]);\n    detachScrollHandler(openedRegistry[i]);\n    count++;\n  } // remove top popovers from registry\n\n\n  Array(count).fill().forEach(() => {\n    openedRegistry.pop();\n  });\n\n  if (!openedRegistry.length) {\n    detachGlobalScrollHandler();\n    detachGlobalClickHandler();\n    stopUpdateInterval();\n  }\n};\n\nconst getRegistry = () => {\n  return openedRegistry;\n};\n\nexport { addOpenedPopover, removeOpenedPopover, getRegistry };","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/@ui5/webcomponents/dist/popup-utils/PopoverRegistry.js"],"names":["isClickInRect","getOpenedPopups","addOpenedPopup","removeOpenedPopup","updateInterval","intervalTimeout","openedRegistry","repositionPopovers","event","forEach","popover","reposition","attachGlobalScrollHandler","document","body","addEventListener","detachGlobalScrollHandler","removeEventListener","runUpdateInterval","setInterval","stopUpdateInterval","clearInterval","attachGlobalClickHandler","clickHandler","detachGlobalClickHandler","openedPopovers","openedPopups","length","openBy","i","modal","isOpenerClicked","getBoundingClientRect","close","attachScrollHandler","shadowRoot","detachScrollHandler","addOpenedPopover","instance","push","removeOpenedPopover","count","indexOf","Array","fill","pop","getRegistry"],"mappings":"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","sourcesContent":["import { isClickInRect } from \"./PopupUtils.js\";\nimport { getOpenedPopups, addOpenedPopup, removeOpenedPopup } from \"./OpenedPopupsRegistry.js\";\n\nlet updateInterval = null;\nconst intervalTimeout = 300;\nconst openedRegistry = [];\n\nconst repositionPopovers = event => {\n\topenedRegistry.forEach(popover => {\n\t\tpopover.reposition();\n\t});\n};\n\nconst attachGlobalScrollHandler = () => {\n\tdocument.body.addEventListener(\"scroll\", repositionPopovers, true);\n};\n\nconst detachGlobalScrollHandler = () => {\n\tdocument.body.removeEventListener(\"scroll\", repositionPopovers, true);\n};\n\nconst runUpdateInterval = () => {\n\tupdateInterval = setInterval(() => {\n\t\trepositionPopovers();\n\t}, intervalTimeout);\n};\n\nconst stopUpdateInterval = () => {\n\tclearInterval(updateInterval);\n};\n\nconst attachGlobalClickHandler = () => {\n\tdocument.addEventListener(\"mousedown\", clickHandler);\n};\n\nconst detachGlobalClickHandler = () => {\n\tdocument.removeEventListener(\"mousedown\", clickHandler);\n};\n\nconst clickHandler = event => {\n\tconst openedPopovers = openedRegistry;\n\tconst openedPopups = getOpenedPopups();\n\n\tif (openedPopups.length === 0 || !(openedPopups[openedPopups.length - 1].openBy)) {\n\t\treturn;\n\t}\n\n\t// loop all open popovers\n\tfor (let i = (openedPopovers.length - 1); i !== -1; i--) {\n\t\tconst popover = openedPopovers[i];\n\n\t\t// if popover is modal, opener is clicked or there is one more popover above, skip closing\n\t\tif (popover.modal || popover.isOpenerClicked(event)) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (isClickInRect(event, popover.getBoundingClientRect())) {\n\t\t\tbreak;\n\t\t}\n\n\t\tpopover.close();\n\t}\n};\n\nconst attachScrollHandler = popover => {\n\tpopover && popover.shadowRoot.addEventListener(\"scroll\", repositionPopovers, true);\n};\n\nconst detachScrollHandler = popover => {\n\tpopover && popover.shadowRoot.removeEventListener(\"scroll\", repositionPopovers);\n};\n\nconst addOpenedPopover = instance => {\n\taddOpenedPopup(instance);\n\topenedRegistry.push(instance);\n\n\tattachScrollHandler(instance);\n\n\tif (openedRegistry.length === 1) {\n\t\tattachGlobalScrollHandler();\n\t\tattachGlobalClickHandler();\n\t\trunUpdateInterval();\n\t}\n};\n\nconst removeOpenedPopover = instance => {\n\tlet count = 0;\n\n\n\tfor (let i = openedRegistry.indexOf(instance); i < openedRegistry.length; i++) {\n\t\topenedRegistry[i].close(false, true);\n\t\tremoveOpenedPopup(openedRegistry[i]);\n\t\tdetachScrollHandler(openedRegistry[i]);\n\t\tcount++;\n\t}\n\n\t// remove top popovers from registry\n\tArray(count).fill().forEach(() => { openedRegistry.pop(); });\n\n\tif (!openedRegistry.length) {\n\t\tdetachGlobalScrollHandler();\n\t\tdetachGlobalClickHandler();\n\t\tstopUpdateInterval();\n\t}\n};\n\nconst getRegistry = () => {\n\treturn openedRegistry;\n};\n\nexport { addOpenedPopover, removeOpenedPopover, getRegistry };\n"]},"metadata":{},"sourceType":"module"}