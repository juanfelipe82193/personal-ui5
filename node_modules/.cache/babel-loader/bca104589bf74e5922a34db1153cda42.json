{"ast":null,"code":"const registry = new Map();\nconst iconCollectionPromises = new Map();\nconst ICON_NOT_FOUND = \"ICON_NOT_FOUND\";\nconst DEFAULT_COLLECTION = \"SAP-icons\";\n\nconst calcKey = (name, collection) => {\n  // silently support ui5-compatible URIs\n  if (name.startsWith(\"sap-icon://\")) {\n    name = name.replace(\"sap-icon://\", \"\");\n    [name, collection] = name.split(\"/\").reverse();\n  }\n\n  collection = collection || DEFAULT_COLLECTION;\n  return `${collection}:${name}`;\n};\n\nconst registerIcon = (name, {\n  pathData,\n  accData,\n  collection\n} = {}) => {\n  const key = calcKey(name, collection);\n  registry.set(key, {\n    pathData,\n    accData\n  });\n};\n\nconst getIconDataSync = (name, collection = DEFAULT_COLLECTION) => {\n  const key = calcKey(name, collection);\n  return registry.get(key);\n};\n\nconst getIconData = async (name, collection = DEFAULT_COLLECTION) => {\n  const key = calcKey(name, collection);\n\n  if (!iconCollectionPromises.has(collection)) {\n    iconCollectionPromises.set(collection, Promise.resolve(ICON_NOT_FOUND));\n  }\n\n  const iconData = await iconCollectionPromises.get(collection);\n\n  if (iconData === ICON_NOT_FOUND) {\n    return iconData;\n  }\n\n  return registry.get(key);\n};\n\nconst getRegisteredNames = async () => {\n  if (iconCollectionPromises.has(DEFAULT_COLLECTION)) {\n    await iconCollectionPromises.get(DEFAULT_COLLECTION);\n  }\n\n  return Array.from(registry.keys()).map(k => k.split(\":\")[1]);\n};\n\nconst registerCollectionPromise = (collection, promise) => {\n  iconCollectionPromises.set(collection, promise);\n};\n\nexport { getIconData, getIconDataSync, registerIcon, getRegisteredNames, registerCollectionPromise };","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/@ui5/webcomponents-base/dist/SVGIconRegistry.js"],"names":["registry","Map","iconCollectionPromises","ICON_NOT_FOUND","DEFAULT_COLLECTION","calcKey","name","collection","startsWith","replace","split","reverse","registerIcon","pathData","accData","key","set","getIconDataSync","get","getIconData","has","Promise","resolve","iconData","getRegisteredNames","Array","from","keys","map","k","registerCollectionPromise","promise"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,IAAIC,GAAJ,EAAjB;AACA,MAAMC,sBAAsB,GAAG,IAAID,GAAJ,EAA/B;AAEA,MAAME,cAAc,GAAG,gBAAvB;AACA,MAAMC,kBAAkB,GAAG,WAA3B;;AAEA,MAAMC,OAAO,GAAG,CAACC,IAAD,EAAOC,UAAP,KAAsB;AACrC;AACA,MAAID,IAAI,CAACE,UAAL,CAAgB,aAAhB,CAAJ,EAAoC;AACnCF,IAAAA,IAAI,GAAGA,IAAI,CAACG,OAAL,CAAa,aAAb,EAA4B,EAA5B,CAAP;AACA,KAACH,IAAD,EAAOC,UAAP,IAAqBD,IAAI,CAACI,KAAL,CAAW,GAAX,EAAgBC,OAAhB,EAArB;AACA;;AACDJ,EAAAA,UAAU,GAAGA,UAAU,IAAIH,kBAA3B;AACA,SAAQ,GAAEG,UAAW,IAAGD,IAAK,EAA7B;AACA,CARD;;AAUA,MAAMM,YAAY,GAAG,CAACN,IAAD,EAAO;AAAEO,EAAAA,QAAF;AAAYC,EAAAA,OAAZ;AAAqBP,EAAAA;AAArB,IAAoC,EAA3C,KAAkD;AACtE,QAAMQ,GAAG,GAAGV,OAAO,CAACC,IAAD,EAAOC,UAAP,CAAnB;AACAP,EAAAA,QAAQ,CAACgB,GAAT,CAAaD,GAAb,EAAkB;AAAEF,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAAlB;AACA,CAHD;;AAKA,MAAMG,eAAe,GAAG,CAACX,IAAD,EAAOC,UAAU,GAAGH,kBAApB,KAA2C;AAClE,QAAMW,GAAG,GAAGV,OAAO,CAACC,IAAD,EAAOC,UAAP,CAAnB;AACA,SAAOP,QAAQ,CAACkB,GAAT,CAAaH,GAAb,CAAP;AACA,CAHD;;AAKA,MAAMI,WAAW,GAAG,OAAOb,IAAP,EAAaC,UAAU,GAAGH,kBAA1B,KAAiD;AACpE,QAAMW,GAAG,GAAGV,OAAO,CAACC,IAAD,EAAOC,UAAP,CAAnB;;AAEA,MAAI,CAACL,sBAAsB,CAACkB,GAAvB,CAA2Bb,UAA3B,CAAL,EAA6C;AAC5CL,IAAAA,sBAAsB,CAACc,GAAvB,CAA2BT,UAA3B,EAAuCc,OAAO,CAACC,OAAR,CAAgBnB,cAAhB,CAAvC;AACA;;AAED,QAAMoB,QAAQ,GAAG,MAAMrB,sBAAsB,CAACgB,GAAvB,CAA2BX,UAA3B,CAAvB;;AAEA,MAAIgB,QAAQ,KAAKpB,cAAjB,EAAiC;AAChC,WAAOoB,QAAP;AACA;;AAED,SAAOvB,QAAQ,CAACkB,GAAT,CAAaH,GAAb,CAAP;AACA,CAdD;;AAgBA,MAAMS,kBAAkB,GAAG,YAAY;AACtC,MAAItB,sBAAsB,CAACkB,GAAvB,CAA2BhB,kBAA3B,CAAJ,EAAoD;AACnD,UAAMF,sBAAsB,CAACgB,GAAvB,CAA2Bd,kBAA3B,CAAN;AACA;;AACD,SAAOqB,KAAK,CAACC,IAAN,CAAW1B,QAAQ,CAAC2B,IAAT,EAAX,EAA4BC,GAA5B,CAAgCC,CAAC,IAAIA,CAAC,CAACnB,KAAF,CAAQ,GAAR,EAAa,CAAb,CAArC,CAAP;AACA,CALD;;AAOA,MAAMoB,yBAAyB,GAAG,CAACvB,UAAD,EAAawB,OAAb,KAAyB;AAC1D7B,EAAAA,sBAAsB,CAACc,GAAvB,CAA2BT,UAA3B,EAAuCwB,OAAvC;AACA,CAFD;;AAIA,SACCZ,WADD,EAECF,eAFD,EAGCL,YAHD,EAICY,kBAJD,EAKCM,yBALD","sourcesContent":["const registry = new Map();\nconst iconCollectionPromises = new Map();\n\nconst ICON_NOT_FOUND = \"ICON_NOT_FOUND\";\nconst DEFAULT_COLLECTION = \"SAP-icons\";\n\nconst calcKey = (name, collection) => {\n\t// silently support ui5-compatible URIs\n\tif (name.startsWith(\"sap-icon://\")) {\n\t\tname = name.replace(\"sap-icon://\", \"\");\n\t\t[name, collection] = name.split(\"/\").reverse();\n\t}\n\tcollection = collection || DEFAULT_COLLECTION;\n\treturn `${collection}:${name}`;\n};\n\nconst registerIcon = (name, { pathData, accData, collection } = {}) => {\n\tconst key = calcKey(name, collection);\n\tregistry.set(key, { pathData, accData });\n};\n\nconst getIconDataSync = (name, collection = DEFAULT_COLLECTION) => {\n\tconst key = calcKey(name, collection);\n\treturn registry.get(key);\n};\n\nconst getIconData = async (name, collection = DEFAULT_COLLECTION) => {\n\tconst key = calcKey(name, collection);\n\n\tif (!iconCollectionPromises.has(collection)) {\n\t\ticonCollectionPromises.set(collection, Promise.resolve(ICON_NOT_FOUND));\n\t}\n\n\tconst iconData = await iconCollectionPromises.get(collection);\n\n\tif (iconData === ICON_NOT_FOUND) {\n\t\treturn iconData;\n\t}\n\n\treturn registry.get(key);\n};\n\nconst getRegisteredNames = async () => {\n\tif (iconCollectionPromises.has(DEFAULT_COLLECTION)) {\n\t\tawait iconCollectionPromises.get(DEFAULT_COLLECTION);\n\t}\n\treturn Array.from(registry.keys()).map(k => k.split(\":\")[1]);\n};\n\nconst registerCollectionPromise = (collection, promise) => {\n\ticonCollectionPromises.set(collection, promise);\n};\n\nexport {\n\tgetIconData,\n\tgetIconDataSync,\n\tregisterIcon,\n\tgetRegisteredNames,\n\tregisterCollectionPromise,\n};\n"]},"metadata":{},"sourceType":"module"}