{"ast":null,"code":"import ResizeHandler from \"@ui5/webcomponents-base/dist/delegate/ResizeHandler.js\";\nimport getLocale from \"@ui5/webcomponents-base/dist/locale/getLocale.js\";\nimport LocaleData from \"@ui5/webcomponents-localization/dist/LocaleData.js\";\nimport CalendarDate from \"@ui5/webcomponents-localization/dist/dates/CalendarDate.js\";\nimport \"@ui5/webcomponents-icons/dist/icons/date-time.js\";\nimport Button from \"./Button.js\";\nimport ToggleButton from \"./ToggleButton.js\";\nimport SegmentedButton from \"./SegmentedButton.js\";\nimport Calendar from \"./Calendar.js\";\nimport DatePicker from \"./DatePicker.js\";\nimport WheelSlider from \"./WheelSlider.js\"; // time functions\n\nimport { getHours, getMinutes, getSeconds, getHoursConfigByFormat, getTimeControlsByFormat } from \"./timepicker-utils/TimeSlider.js\"; // i18n texts\n\nimport { TIMEPICKER_HOURS_LABEL, TIMEPICKER_MINUTES_LABEL, TIMEPICKER_SECONDS_LABEL, TIMEPICKER_PERIODS_LABEL, TIMEPICKER_SUBMIT_BUTTON, TIMEPICKER_CANCEL_BUTTON, DATETIME_PICKER_DATE_BUTTON, DATETIME_PICKER_TIME_BUTTON } from \"./generated/i18n/i18n-defaults.js\"; // Template\n\nimport DateTimePickerPopoverTemplate from \"./generated/templates/DateTimePickerPopoverTemplate.lit.js\"; // Styles\n\nimport DateTimePickerPopoverCss from \"./generated/themes/DateTimePickerPopover.css.js\";\nconst PHONE_MODE_BREAKPOINT = 640; // px\n\n/**\n * @public\n */\n\nconst metadata = {\n  tag: \"ui5-datetime-picker\",\n  properties:\n  /** @lends sap.ui.webcomponents.main.DateTimePicker.prototype */\n  {\n    /**\n     * Defines the visibility of the time view in <code>phoneMode</code>.\n     * For more information, see the <code>phoneMode</code> property.\n     *\n     * <br><br>\n     * <b>Note:</b> The date view would be displayed by default.\n     * @type {boolean}\n     * @defaultvalue false\n     * @private\n     */\n    _showTimeView: {\n      type: Boolean,\n      noAttribute: true\n    },\n\n    /**\n     * Defines if the <code>DateTimePicker</code> should be displayed in phone mode.\n     * The phone mode turns on when the component is used on small screens or phone devices.\n     * In phone mode the user can see either the calendar view, or the time view\n     * and can switch between the views via toggle buttons.\n     * @type {boolean}\n     * @defaultvalue false\n     * @private\n     */\n    _phoneMode: {\n      type: Boolean\n    },\n\n    /**\n     * Defines the state the hours slider - expanded by default.\n     * @type {boolean}\n     * @defaultvalue false\n     * @private\n     */\n    _hoursCollapsed: {\n      type: Boolean\n    }\n  }\n};\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The <code>DateTimePicker</code> component alows users to select both date (day, month and year) and time (hours, minutes and seconds)\n * and for the purpose it consists of input field and Date/Time picker.\n *\n * <h3>Usage</h3>\n *\n * Use the <code>DateTimePicker</code> if you need a combined date and time input component.\n * Don't use it if you want to use either date, or time value.\n * In this case, use the <code>DatePicker</code> or the <code>TimePicker</code> components instead.\n * <br><br>\n * The user can set date/time by:\n * <ul>\n * <li>using the calendar and the time selectors</li>\n * <li>typing in the input field</li>\n * </ul>\n *\n * Programatically, to set date/time for the <code>DateTimePicker</code>, use the <code>value</code> property\n * <br><br>\n * As most of the input based components, the <code>DateTimePicker</code> supports properties,\n * such as: <code>disabled</code>, <code>readonly</code>, <code>valueState</code> and  <code>placeholder</code>.\n *\n * <h3>Formatting</h3>\n *\n * The value entered by typing into the input field must fit to the used date/time format.\n * <br><br>\n * Supported format options are pattern-based on Unicode LDML Date Format notation.\n * For more information, see <ui5-link target=\"_blank\" href=\"https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\" class=\"api-table-content-cell-link\">UTS #35: Unicode Locale Data Markup Language</ui5-link>.\n * <br><br>\n * <b>Example:</b> the following format <code>dd/MM/yyyy, hh:mm:ss aa</code>\n * corresponds the <code>13/04/2020, 03:16:16 AM</code> value.\n * <br>\n * The small 'h' defines \"12\" hours format and the \"aa\" symbols - \"AM/PM\" time periods.\n *\n * <br><br>\n * <b>Example:</b> the following format <code>dd/MM/yyyy, HH:mm:ss</code>\n * corresponds the <code>13/04/2020, 15:16:16</code> value.\n * <br>\n * The capital 'H' indicates \"24\" hours format.\n *\n * <br><br>\n * <b>Note:</b> If the <code>formatPattern</code> does NOT include time,\n * the <code>DateTimePicker</code> will fallback to the default time format according to the locale.\n *\n * <br><br>\n * <b>Note:</b> If no placeholder is set to the <code>DateTimePicker</code>,\n * the current <code>formatPattern</code> is displayed as a placeholder.\n * If another placeholder is needed, it must be set or in case no placeholder is needed - it can be set to an empty string.\n *\n * <br><br>\n * <b>Note:</b> If the user input does NOT match the <code>formatPattern</code>,\n * the <code>DateTimePicker</code> makes an attempt to parse it based on the\n * locale settings.\n *\n * <h3>Responsive behavior</h3>\n *\n * The <code>DateTimePicker</code> is responsive and fully adapts to all devices.\n * For larger screens, such as tablet or desktop, it is displayed as a popover, while\n * on phone devices, it is displayed full screen.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import @ui5/webcomponents/dist/DateTimePicker.js\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.DateTimePicker\n * @extends DatePicker\n * @tagname ui5-datetime-picker\n * @since 1.0.0-rc.7\n * @public\n */\n\nclass DateTimePicker extends DatePicker {\n  static get metadata() {\n    return metadata;\n  }\n\n  static get staticAreaTemplate() {\n    return DateTimePickerPopoverTemplate;\n  }\n\n  static get staticAreaStyles() {\n    return [DateTimePickerPopoverCss, ...super.staticAreaStyles];\n  }\n\n  static async onDefine() {\n    await Promise.all([DatePicker.define(), Calendar.define(), Button.define(), ToggleButton.define(), SegmentedButton.define(), WheelSlider.define()]);\n  }\n\n  constructor() {\n    super();\n    this._calendarPreview = null; // preview of the calendar selection\n\n    this._hoursConfig = {\n      // hours configuration (12/24 hour format)\n      minHour: 0,\n      maxHour: 0,\n      isTwelveHoursFormat: false\n    };\n    const superFn = this._respPopoverConfig.afterClose;\n\n    this._respPopoverConfig.afterClose = () => {\n      superFn();\n      this._showTimeView = false;\n      this._calendarPreview = null;\n    };\n\n    this._handleResizeBound = this._handleResize.bind(this);\n  }\n  /**\n   * LIFECYCLE METHODS\n   */\n\n\n  onBeforeRendering() {\n    super.onBeforeRendering();\n    this.updateHoursFormatConfig();\n  }\n\n  onEnterDOM() {\n    ResizeHandler.register(document.body, this._handleResizeBound);\n  }\n\n  onExitDOM() {\n    ResizeHandler.deregister(document.body, this._handleResizeBound);\n  }\n  /**\n   * PUBLIC METHODS\n   */\n\n  /**\n   * Opens the picker.\n   *\n   * @param {object} options A JSON object with additional configuration.<br>\n   * <code>{ focusInput: true }</code> By default, the focus goes in the picker after opening it.\n   * Specify this option to focus the input field.\n   * @public\n   */\n\n\n  async openPicker(options) {\n    await super.openPicker(options);\n    await this.setSlidersValue();\n    this.expandHoursSlider();\n    this.storePreviousValue();\n  }\n  /**\n   * Closes the picker.\n   * @public\n   */\n\n\n  closePicker() {\n    return super.closePicker(); // in order to be displayed in the DateTimePicker API reference\n  }\n  /**\n   * Checks if a value is valid against the current date/time format.\n   *\n   * @param {string} value A value to be tested against the current date/time format\n   * @public\n   */\n\n\n  isValid(value = \"\") {\n    return super.isValid(value); // in order to be displayed in the DateTimePicker API reference\n  }\n  /**\n   * Read-only getters\n   */\n\n\n  get classes() {\n    return {\n      picker: {\n        \"ui5-dt-picker-content--phone\": this.phone\n      },\n      dateTimeView: {\n        \"ui5-dt-cal--hidden\": this.phone && this.showTimeView,\n        \"ui5-dt-time--hidden\": this.phone && this.showDateView\n      }\n    };\n  }\n\n  get _formatPattern() {\n    return this.normalizePattern(this.formatPattern);\n  }\n\n  get _calTimestamp() {\n    return this._calendarPreview ? this._calendarPreview.timestamp : this._calendar.timestamp;\n  }\n\n  get _calDates() {\n    return this._calendarPreview ? this._calendarPreview.selectedDates : this._calendar.selectedDates;\n  }\n\n  get secondsArray() {\n    return getSeconds();\n  }\n\n  get minutesArray() {\n    return getMinutes();\n  }\n\n  get hoursArray() {\n    return getHours(this._hoursConfig);\n  }\n\n  get periodsArray() {\n    return this.getFormat().aDayPeriods.map(x => x.toUpperCase());\n  }\n\n  get openIconName() {\n    return \"date-time\";\n  }\n\n  get hoursLabel() {\n    return this.i18nBundle.getText(TIMEPICKER_HOURS_LABEL);\n  }\n\n  get minutesLabel() {\n    return this.i18nBundle.getText(TIMEPICKER_MINUTES_LABEL);\n  }\n\n  get secondsLabel() {\n    return this.i18nBundle.getText(TIMEPICKER_SECONDS_LABEL);\n  }\n\n  get periodLabel() {\n    return this.i18nBundle.getText(TIMEPICKER_PERIODS_LABEL);\n  }\n\n  get btnOKLabel() {\n    return this.i18nBundle.getText(TIMEPICKER_SUBMIT_BUTTON);\n  }\n\n  get btnCancelLabel() {\n    return this.i18nBundle.getText(TIMEPICKER_CANCEL_BUTTON);\n  }\n\n  get btnDateLabel() {\n    return this.i18nBundle.getText(DATETIME_PICKER_DATE_BUTTON);\n  }\n\n  get btnTimeLabel() {\n    return this.i18nBundle.getText(DATETIME_PICKER_TIME_BUTTON);\n  }\n\n  get showFooter() {\n    return true;\n  }\n\n  get showDateView() {\n    return this.phone ? !this._showTimeView : true;\n  }\n\n  get showTimeView() {\n    return this.phone ? this._showTimeView : true;\n  }\n\n  get phone() {\n    return super.phone || this._phoneMode;\n  }\n\n  get shouldBuildHoursSlider() {\n    return this.isTimeControlContained()[0];\n  }\n\n  get shouldBuildMinutesSlider() {\n    return this.isTimeControlContained()[1];\n  }\n\n  get shouldBuildSecondsSlider() {\n    return this.isTimeControlContained()[2];\n  }\n\n  get shouldBuildPeriodsSlider() {\n    return this.isTimeControlContained()[3];\n  }\n\n  get _hoursExpanded() {\n    return !this._hoursCollapsed;\n  }\n  /**\n   * Defines whether the dialog on mobile should have header\n   * @private\n   */\n\n\n  get _shouldHideHeader() {\n    return true;\n  }\n  /**\n   * EVENT HANDLERS\n   */\n\n  /**\n  * @override\n  * Overwrite the method to update the time sliders.\n  */\n\n\n  _handleInputLiveChange() {\n    super._handleInputLiveChange();\n\n    this.setSlidersValue();\n  }\n  /**\n   * @override\n   */\n\n\n  _handleCalendarChange(event) {\n    const newValue = event.detail.dates && event.detail.dates[0];\n\n    super._handleCalendarSelectedDatesChange(event, newValue);\n\n    this.storeCalendarSelection();\n  }\n  /**\n   * @override\n   * Overwrite the method to avoid updating the <code>value</code> when the user clicks on the calendar.\n   *\n   * <b>Note:</b> the <code>DateTimePicker</code> should change and update the value\n   * after user presses the <code>submit</code> button.\n   */\n\n\n  _updateValueCalendarSelectedDatesChange() {}\n  /**\n   * Handles document resize to switch between <code>phoneMode</code> and normal appearance.\n   */\n\n\n  async _handleResize() {\n    const documentWidth = document.body.offsetWidth;\n    const toPhoneMode = documentWidth <= PHONE_MODE_BREAKPOINT;\n    const modeChange = toPhoneMode && !this._phoneMode || !toPhoneMode && this._phoneMode; // XOR not allowed by lint\n\n    if (modeChange) {\n      this._phoneMode = toPhoneMode;\n      this.setSlidersValue();\n    }\n  }\n  /**\n   * Handles clicking on the <code>submit</code> button, within the picker`s footer.\n   */\n\n\n  async _submitClick() {\n    const selectedDate = await this.getCurrentDateTime();\n    this.value = this.getFormat().format(selectedDate);\n    const valid = this.isValid(this.value);\n\n    if (this.value !== this.previousValue) {\n      this.fireEvent(\"change\", {\n        value: this.value,\n        valid\n      });\n      this.fireEvent(\"value-changed\", {\n        value: this.value,\n        valid\n      });\n    }\n\n    this.closePicker();\n  }\n  /**\n   * Handles clicking on the <code>cancel</code> button, within the picker`s footer,\n   * that would disregard the user selection.\n   */\n\n\n  async _cancelClick() {\n    this.value = this.previousValue;\n    this.closePicker();\n  }\n  /**\n   * Handles the date/time switch available in <code>phoneMode</code> to switch\n   * between the date and time views.\n   * @param {Event} event\n   */\n\n\n  async _dateTimeSwitchChange(event) {\n    this._showTimeView = event.target.getAttribute(\"key\") === \"Time\";\n\n    if (this._showTimeView) {\n      this.expandHoursSlider();\n    }\n  }\n  /**\n   * Handles clicking on \"minutes\", \"seconds\" and \"periods\" sliders.\n   * <b>Note:</b> not bound for \"hours\" click\n   * @param {Event} event\n   */\n\n\n  _sliderClick() {\n    this.collapseHoursSlider();\n  }\n  /**\n   * PRIVATE METHODS\n   */\n\n  /**\n  * Stores a preview of the calendar selection to restore it\n  * when the user switches between the time and date view.\n  * <br><br>\n  * <b>Note:</b> this is needed, because the <code>value</code> is not immediately updated on user interaction,\n  * but only after the user presses the <code>sumbit</code> button.\n  */\n\n\n  storeCalendarSelection() {\n    this._calendarPreview = {\n      timestamp: this._calendar.timestamp,\n      dates: this._calendar.selectedDates\n    };\n  }\n  /**\n   * Stores the <code>value</code> when the picker opens to compare with the <code>value</code>,\n   * selected by any user interaction and fire the <code>change</code> event, if they differ.\n   */\n\n\n  storePreviousValue() {\n    this.previousValue = this.value;\n  }\n  /**\n   * Normalizes the current <code>formatPattern</code>.\n   *\n   * Fallbacks to the default <code>formatPattern</code> according to the locale when:\n   * - no format is set at all\n   * - the format does not include hours\n   *\n   * @param {string} pattern The current <code>formatPattern</code>\n   * @returns {string}\n   */\n\n\n  normalizePattern(pattern) {\n    const hasHours = !!pattern.match(/H/i);\n    const fallback = !pattern || !hasHours;\n    return fallback ? LocaleData.getInstance(getLocale()).getCombinedDateTimePattern(\"medium\", \"medium\", this._primaryCalendarType) : pattern;\n  }\n  /**\n   * Expands the \"hours\" time slider.\n   */\n\n\n  expandHoursSlider() {\n    this._hoursCollapsed = false;\n  }\n  /**\n   * Collapses the \"hours\" time slider.\n   */\n\n\n  collapseHoursSlider() {\n    this._hoursCollapsed = true;\n  }\n\n  async getHoursSlider() {\n    return (await this.getPicker()).querySelector(\".ui5-dt-hours-wheel\");\n  }\n\n  async getMinutesSlider() {\n    return (await this.getPicker()).querySelector(\".ui5-dt-minutes-wheel\");\n  }\n\n  async getSecondsSlider() {\n    return (await this.getPicker()).querySelector(\".ui5-dt-seconds-wheel\");\n  }\n\n  async getPeriodsSlider() {\n    return (await this.getPicker()).querySelector(\".ui5-dt-periods-wheel\");\n  }\n\n  async getPicker() {\n    const staticAreaItem = await this.getStaticAreaItemDomRef();\n    return staticAreaItem.querySelector(\"ui5-responsive-popover\");\n  }\n\n  async getCurrentDateTime() {\n    // the time set in the timepicker\n    const selectedTime = new Date();\n    const timeValues = await this.getTimePickerValues();\n    selectedTime.setHours(timeValues.hours);\n    selectedTime.setMinutes(timeValues.minutes);\n    selectedTime.setSeconds(timeValues.seconds); // the date set in the calendar\n\n    const currentCalendarValue = this.getFormat().format(new Date(CalendarDate.fromTimestamp(this._calTimestamp * 1000, this._primaryCalendarType).valueOf()), true); // merge both the date and time\n\n    const selectedDate = this.getFormat().parse(currentCalendarValue) || selectedTime;\n    selectedDate.setHours(selectedTime.getHours());\n    selectedDate.setMinutes(selectedTime.getMinutes());\n    selectedDate.setSeconds(selectedTime.getSeconds());\n    return selectedDate;\n  }\n\n  async getTimePickerValues() {\n    const secondsSlider = await this.getSecondsSlider();\n    const minutesSlider = await this.getMinutesSlider();\n    const hoursSlider = await this.getHoursSlider();\n    const periodsSlider = await this.getPeriodsSlider();\n    let hours = hoursSlider ? hoursSlider.value : this._hoursConfig.minHour.toString();\n    const minutes = minutesSlider ? minutesSlider.value : \"0\";\n    const seconds = secondsSlider ? secondsSlider.value : \"0\";\n    const period = periodsSlider ? periodsSlider.value : this.periodsArray[0];\n\n    if (period === this.periodsArray[0]) {\n      // AM\n      hours = hours === \"12\" ? 0 : hours;\n    }\n\n    if (period === this.periodsArray[1]) {\n      // PM\n      hours = hours === \"12\" ? hours : hours * 1 + 12;\n    }\n\n    return {\n      hours,\n      minutes,\n      seconds,\n      period\n    };\n  }\n  /**\n   * Sets hours, minutes, seconds and period according to the current <code>value</code>\n   * or the current time if the <code>value</code> is not set.\n   */\n\n\n  async setSlidersValue() {\n    const currentDate = this.value ? this.getFormat().parse(this.value) : new Date();\n\n    if (currentDate) {\n      await this.setHours(currentDate.getHours());\n      await this.setMinutes(currentDate.getMinutes());\n      await this.setSeconds(currentDate.getSeconds());\n      await this.setPeriod(currentDate.getHours());\n    }\n  }\n\n  async setHours(value) {\n    let tempValue = \"\";\n    const hoursSlider = await this.getHoursSlider();\n    const config = this._hoursConfig;\n\n    if (hoursSlider) {\n      if (config.isTwelveHoursFormat && value > config.maxHour) {\n        tempValue = value - 12;\n      } else if (config.isTwelveHoursFormat && value < config.minHour) {\n        tempValue = value + 12;\n      } else {\n        tempValue = value;\n      }\n\n      hoursSlider.value = this.normalizeDigit(tempValue);\n    }\n  }\n\n  async setMinutes(value) {\n    const minutesSlider = await this.getMinutesSlider();\n\n    if (minutesSlider) {\n      minutesSlider.value = this.normalizeDigit(value);\n    }\n  }\n\n  async setSeconds(value) {\n    const secondsSlider = await this.getSecondsSlider();\n\n    if (secondsSlider) {\n      secondsSlider.value = this.normalizeDigit(value);\n    }\n  }\n\n  async setPeriod(hours) {\n    const config = this._hoursConfig;\n    const periodsSlider = await this.getPeriodsSlider();\n\n    if (!periodsSlider) {\n      return;\n    }\n\n    if (config.isTwelveHoursFormat) {\n      if (config.minHour === 1) {\n        periodsSlider.value = hours >= config.maxHour ? this.periodsArray[1] : this.periodsArray[0];\n      } else {\n        periodsSlider.value = hours > config.maxHour || hours === config.minHour ? this.periodsArray[1] : this.periodsArray[0];\n      }\n    }\n  }\n\n  normalizeDigit(value) {\n    const valueAsString = value.toString();\n    return valueAsString.length === 1 ? `0${value}` : valueAsString;\n  }\n\n  isTimeControlContained() {\n    const format = this.getFormat().aFormatArray;\n    return getTimeControlsByFormat(format, this._hoursConfig);\n  }\n\n  updateHoursFormatConfig() {\n    const formatArray = this.getFormat().aFormatArray;\n\n    if (formatArray.length < 7) {\n      return; // does not contain time data\n    }\n\n    const config = getHoursConfigByFormat(formatArray[6].type);\n    this._hoursConfig.minHour = config.minHour;\n    this._hoursConfig.maxHour = config.maxHour;\n    this._hoursConfig.isTwelveHoursFormat = config.isTwelveHoursFormat;\n  }\n\n}\n\nDateTimePicker.define();\nexport default DateTimePicker;","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/@ui5/webcomponents/dist/DateTimePicker.js"],"names":["ResizeHandler","getLocale","LocaleData","CalendarDate","Button","ToggleButton","SegmentedButton","Calendar","DatePicker","WheelSlider","getHours","getMinutes","getSeconds","getHoursConfigByFormat","getTimeControlsByFormat","TIMEPICKER_HOURS_LABEL","TIMEPICKER_MINUTES_LABEL","TIMEPICKER_SECONDS_LABEL","TIMEPICKER_PERIODS_LABEL","TIMEPICKER_SUBMIT_BUTTON","TIMEPICKER_CANCEL_BUTTON","DATETIME_PICKER_DATE_BUTTON","DATETIME_PICKER_TIME_BUTTON","DateTimePickerPopoverTemplate","DateTimePickerPopoverCss","PHONE_MODE_BREAKPOINT","metadata","tag","properties","_showTimeView","type","Boolean","noAttribute","_phoneMode","_hoursCollapsed","DateTimePicker","staticAreaTemplate","staticAreaStyles","onDefine","Promise","all","define","constructor","_calendarPreview","_hoursConfig","minHour","maxHour","isTwelveHoursFormat","superFn","_respPopoverConfig","afterClose","_handleResizeBound","_handleResize","bind","onBeforeRendering","updateHoursFormatConfig","onEnterDOM","register","document","body","onExitDOM","deregister","openPicker","options","setSlidersValue","expandHoursSlider","storePreviousValue","closePicker","isValid","value","classes","picker","phone","dateTimeView","showTimeView","showDateView","_formatPattern","normalizePattern","formatPattern","_calTimestamp","timestamp","_calendar","_calDates","selectedDates","secondsArray","minutesArray","hoursArray","periodsArray","getFormat","aDayPeriods","map","x","toUpperCase","openIconName","hoursLabel","i18nBundle","getText","minutesLabel","secondsLabel","periodLabel","btnOKLabel","btnCancelLabel","btnDateLabel","btnTimeLabel","showFooter","shouldBuildHoursSlider","isTimeControlContained","shouldBuildMinutesSlider","shouldBuildSecondsSlider","shouldBuildPeriodsSlider","_hoursExpanded","_shouldHideHeader","_handleInputLiveChange","_handleCalendarChange","event","newValue","detail","dates","_handleCalendarSelectedDatesChange","storeCalendarSelection","_updateValueCalendarSelectedDatesChange","documentWidth","offsetWidth","toPhoneMode","modeChange","_submitClick","selectedDate","getCurrentDateTime","format","valid","previousValue","fireEvent","_cancelClick","_dateTimeSwitchChange","target","getAttribute","_sliderClick","collapseHoursSlider","pattern","hasHours","match","fallback","getInstance","getCombinedDateTimePattern","_primaryCalendarType","getHoursSlider","getPicker","querySelector","getMinutesSlider","getSecondsSlider","getPeriodsSlider","staticAreaItem","getStaticAreaItemDomRef","selectedTime","Date","timeValues","getTimePickerValues","setHours","hours","setMinutes","minutes","setSeconds","seconds","currentCalendarValue","fromTimestamp","valueOf","parse","secondsSlider","minutesSlider","hoursSlider","periodsSlider","toString","period","currentDate","setPeriod","tempValue","config","normalizeDigit","valueAsString","length","aFormatArray","formatArray"],"mappings":"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","sourcesContent":["import ResizeHandler from \"@ui5/webcomponents-base/dist/delegate/ResizeHandler.js\";\nimport getLocale from \"@ui5/webcomponents-base/dist/locale/getLocale.js\";\nimport LocaleData from \"@ui5/webcomponents-localization/dist/LocaleData.js\";\nimport CalendarDate from \"@ui5/webcomponents-localization/dist/dates/CalendarDate.js\";\nimport \"@ui5/webcomponents-icons/dist/icons/date-time.js\";\nimport Button from \"./Button.js\";\nimport ToggleButton from \"./ToggleButton.js\";\nimport SegmentedButton from \"./SegmentedButton.js\";\nimport Calendar from \"./Calendar.js\";\nimport DatePicker from \"./DatePicker.js\";\nimport WheelSlider from \"./WheelSlider.js\";\n\n// time functions\nimport {\n\tgetHours,\n\tgetMinutes,\n\tgetSeconds,\n\tgetHoursConfigByFormat,\n\tgetTimeControlsByFormat,\n} from \"./timepicker-utils/TimeSlider.js\";\n\n// i18n texts\nimport {\n\tTIMEPICKER_HOURS_LABEL,\n\tTIMEPICKER_MINUTES_LABEL,\n\tTIMEPICKER_SECONDS_LABEL,\n\tTIMEPICKER_PERIODS_LABEL,\n\tTIMEPICKER_SUBMIT_BUTTON,\n\tTIMEPICKER_CANCEL_BUTTON,\n\tDATETIME_PICKER_DATE_BUTTON,\n\tDATETIME_PICKER_TIME_BUTTON,\n} from \"./generated/i18n/i18n-defaults.js\";\n\n// Template\nimport DateTimePickerPopoverTemplate from \"./generated/templates/DateTimePickerPopoverTemplate.lit.js\";\n\n// Styles\nimport DateTimePickerPopoverCss from \"./generated/themes/DateTimePickerPopover.css.js\";\n\nconst PHONE_MODE_BREAKPOINT = 640; // px\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-datetime-picker\",\n\tproperties: /** @lends sap.ui.webcomponents.main.DateTimePicker.prototype */ {\n\n\t\t/**\n\t\t * Defines the visibility of the time view in <code>phoneMode</code>.\n\t\t * For more information, see the <code>phoneMode</code> property.\n\t\t *\n\t\t * <br><br>\n\t\t * <b>Note:</b> The date view would be displayed by default.\n\t\t * @type {boolean}\n\t\t * @defaultvalue false\n\t\t * @private\n\t\t */\n\t\t_showTimeView: {\n\t\t\ttype: Boolean,\n\t\t\tnoAttribute: true,\n\t\t},\n\n\t\t/**\n\t\t * Defines if the <code>DateTimePicker</code> should be displayed in phone mode.\n\t\t * The phone mode turns on when the component is used on small screens or phone devices.\n\t\t * In phone mode the user can see either the calendar view, or the time view\n\t\t * and can switch between the views via toggle buttons.\n\t\t * @type {boolean}\n\t\t * @defaultvalue false\n\t\t * @private\n\t\t */\n\t\t_phoneMode: {\n\t\t\ttype: Boolean,\n\t\t},\n\n\t\t/**\n\t\t * Defines the state the hours slider - expanded by default.\n\t\t * @type {boolean}\n\t\t * @defaultvalue false\n\t\t * @private\n\t\t */\n\t\t_hoursCollapsed: {\n\t\t\ttype: Boolean,\n\t\t},\n\t},\n};\n\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The <code>DateTimePicker</code> component alows users to select both date (day, month and year) and time (hours, minutes and seconds)\n * and for the purpose it consists of input field and Date/Time picker.\n *\n * <h3>Usage</h3>\n *\n * Use the <code>DateTimePicker</code> if you need a combined date and time input component.\n * Don't use it if you want to use either date, or time value.\n * In this case, use the <code>DatePicker</code> or the <code>TimePicker</code> components instead.\n * <br><br>\n * The user can set date/time by:\n * <ul>\n * <li>using the calendar and the time selectors</li>\n * <li>typing in the input field</li>\n * </ul>\n *\n * Programatically, to set date/time for the <code>DateTimePicker</code>, use the <code>value</code> property\n * <br><br>\n * As most of the input based components, the <code>DateTimePicker</code> supports properties,\n * such as: <code>disabled</code>, <code>readonly</code>, <code>valueState</code> and  <code>placeholder</code>.\n *\n * <h3>Formatting</h3>\n *\n * The value entered by typing into the input field must fit to the used date/time format.\n * <br><br>\n * Supported format options are pattern-based on Unicode LDML Date Format notation.\n * For more information, see <ui5-link target=\"_blank\" href=\"https://unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table\" class=\"api-table-content-cell-link\">UTS #35: Unicode Locale Data Markup Language</ui5-link>.\n * <br><br>\n * <b>Example:</b> the following format <code>dd/MM/yyyy, hh:mm:ss aa</code>\n * corresponds the <code>13/04/2020, 03:16:16 AM</code> value.\n * <br>\n * The small 'h' defines \"12\" hours format and the \"aa\" symbols - \"AM/PM\" time periods.\n *\n * <br><br>\n * <b>Example:</b> the following format <code>dd/MM/yyyy, HH:mm:ss</code>\n * corresponds the <code>13/04/2020, 15:16:16</code> value.\n * <br>\n * The capital 'H' indicates \"24\" hours format.\n *\n * <br><br>\n * <b>Note:</b> If the <code>formatPattern</code> does NOT include time,\n * the <code>DateTimePicker</code> will fallback to the default time format according to the locale.\n *\n * <br><br>\n * <b>Note:</b> If no placeholder is set to the <code>DateTimePicker</code>,\n * the current <code>formatPattern</code> is displayed as a placeholder.\n * If another placeholder is needed, it must be set or in case no placeholder is needed - it can be set to an empty string.\n *\n * <br><br>\n * <b>Note:</b> If the user input does NOT match the <code>formatPattern</code>,\n * the <code>DateTimePicker</code> makes an attempt to parse it based on the\n * locale settings.\n *\n * <h3>Responsive behavior</h3>\n *\n * The <code>DateTimePicker</code> is responsive and fully adapts to all devices.\n * For larger screens, such as tablet or desktop, it is displayed as a popover, while\n * on phone devices, it is displayed full screen.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import @ui5/webcomponents/dist/DateTimePicker.js\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.DateTimePicker\n * @extends DatePicker\n * @tagname ui5-datetime-picker\n * @since 1.0.0-rc.7\n * @public\n */\nclass DateTimePicker extends DatePicker {\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get staticAreaTemplate() {\n\t\treturn DateTimePickerPopoverTemplate;\n\t}\n\n\tstatic get staticAreaStyles() {\n\t\treturn [DateTimePickerPopoverCss, ...super.staticAreaStyles];\n\t}\n\n\tstatic async onDefine() {\n\t\tawait Promise.all([\n\t\t\tDatePicker.define(),\n\t\t\tCalendar.define(),\n\t\t\tButton.define(),\n\t\t\tToggleButton.define(),\n\t\t\tSegmentedButton.define(),\n\t\t\tWheelSlider.define(),\n\t\t]);\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._calendarPreview = null; // preview of the calendar selection\n\n\t\tthis._hoursConfig = { // hours configuration (12/24 hour format)\n\t\t\tminHour: 0,\n\t\t\tmaxHour: 0,\n\t\t\tisTwelveHoursFormat: false,\n\t\t};\n\n\t\tconst superFn = this._respPopoverConfig.afterClose;\n\t\tthis._respPopoverConfig.afterClose = () => {\n\t\t\tsuperFn();\n\t\t\tthis._showTimeView = false;\n\t\t\tthis._calendarPreview = null;\n\t\t};\n\n\t\tthis._handleResizeBound = this._handleResize.bind(this);\n\t}\n\n\t/**\n\t * LIFECYCLE METHODS\n\t */\n\n\tonBeforeRendering() {\n\t\tsuper.onBeforeRendering();\n\t\tthis.updateHoursFormatConfig();\n\t}\n\n\tonEnterDOM() {\n\t\tResizeHandler.register(document.body, this._handleResizeBound);\n\t}\n\n\tonExitDOM() {\n\t\tResizeHandler.deregister(document.body, this._handleResizeBound);\n\t}\n\n\t/**\n\t * PUBLIC METHODS\n\t */\n\n\t/**\n\t * Opens the picker.\n\t *\n\t * @param {object} options A JSON object with additional configuration.<br>\n\t * <code>{ focusInput: true }</code> By default, the focus goes in the picker after opening it.\n\t * Specify this option to focus the input field.\n\t * @public\n\t */\n\tasync openPicker(options) {\n\t\tawait super.openPicker(options);\n\t\tawait this.setSlidersValue();\n\t\tthis.expandHoursSlider();\n\t\tthis.storePreviousValue();\n\t}\n\n\t/**\n\t * Closes the picker.\n\t * @public\n\t */\n\tclosePicker() {\n\t\treturn super.closePicker(); // in order to be displayed in the DateTimePicker API reference\n\t}\n\n\t/**\n\t * Checks if a value is valid against the current date/time format.\n\t *\n\t * @param {string} value A value to be tested against the current date/time format\n\t * @public\n\t */\n\tisValid(value = \"\") {\n\t\treturn super.isValid(value); // in order to be displayed in the DateTimePicker API reference\n\t}\n\n\t/**\n\t * Read-only getters\n\t */\n\n\tget classes() {\n\t\treturn {\n\t\t\tpicker: {\n\t\t\t\t\"ui5-dt-picker-content--phone\": this.phone,\n\t\t\t},\n\t\t\tdateTimeView: {\n\t\t\t\t\"ui5-dt-cal--hidden\": this.phone && this.showTimeView,\n\t\t\t\t\"ui5-dt-time--hidden\": this.phone && this.showDateView,\n\t\t\t},\n\t\t};\n\t}\n\n\tget _formatPattern() {\n\t\treturn this.normalizePattern(this.formatPattern);\n\t}\n\n\tget _calTimestamp() {\n\t\treturn this._calendarPreview ? this._calendarPreview.timestamp : this._calendar.timestamp;\n\t}\n\n\tget _calDates() {\n\t\treturn this._calendarPreview ? this._calendarPreview.selectedDates : this._calendar.selectedDates;\n\t}\n\n\tget secondsArray() {\n\t\treturn getSeconds();\n\t}\n\n\tget minutesArray() {\n\t\treturn getMinutes();\n\t}\n\n\tget hoursArray() {\n\t\treturn getHours(this._hoursConfig);\n\t}\n\n\tget periodsArray() {\n\t\treturn this.getFormat().aDayPeriods.map(x => x.toUpperCase());\n\t}\n\n\tget openIconName() {\n\t\treturn \"date-time\";\n\t}\n\n\tget hoursLabel() {\n\t\treturn this.i18nBundle.getText(TIMEPICKER_HOURS_LABEL);\n\t}\n\n\tget minutesLabel() {\n\t\treturn this.i18nBundle.getText(TIMEPICKER_MINUTES_LABEL);\n\t}\n\n\tget secondsLabel() {\n\t\treturn this.i18nBundle.getText(TIMEPICKER_SECONDS_LABEL);\n\t}\n\n\tget periodLabel() {\n\t\treturn this.i18nBundle.getText(TIMEPICKER_PERIODS_LABEL);\n\t}\n\n\tget btnOKLabel() {\n\t\treturn this.i18nBundle.getText(TIMEPICKER_SUBMIT_BUTTON);\n\t}\n\n\tget btnCancelLabel() {\n\t\treturn this.i18nBundle.getText(TIMEPICKER_CANCEL_BUTTON);\n\t}\n\n\tget btnDateLabel() {\n\t\treturn this.i18nBundle.getText(DATETIME_PICKER_DATE_BUTTON);\n\t}\n\n\tget btnTimeLabel() {\n\t\treturn this.i18nBundle.getText(DATETIME_PICKER_TIME_BUTTON);\n\t}\n\n\tget showFooter() {\n\t\treturn true;\n\t}\n\n\tget showDateView() {\n\t\treturn this.phone ? !this._showTimeView : true;\n\t}\n\n\tget showTimeView() {\n\t\treturn this.phone ? this._showTimeView : true;\n\t}\n\n\tget phone() {\n\t\treturn super.phone || this._phoneMode;\n\t}\n\n\tget shouldBuildHoursSlider() {\n\t\treturn this.isTimeControlContained()[0];\n\t}\n\n\tget shouldBuildMinutesSlider() {\n\t\treturn this.isTimeControlContained()[1];\n\t}\n\n\tget shouldBuildSecondsSlider() {\n\t\treturn this.isTimeControlContained()[2];\n\t}\n\n\tget shouldBuildPeriodsSlider() {\n\t\treturn this.isTimeControlContained()[3];\n\t}\n\n\tget _hoursExpanded() {\n\t\treturn !this._hoursCollapsed;\n\t}\n\n\t/**\n\t * Defines whether the dialog on mobile should have header\n\t * @private\n\t */\n\tget _shouldHideHeader() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * EVENT HANDLERS\n\t */\n\n\t /**\n\t * @override\n\t * Overwrite the method to update the time sliders.\n\t */\n\t_handleInputLiveChange() {\n\t\tsuper._handleInputLiveChange();\n\t\tthis.setSlidersValue();\n\t}\n\n\t/**\n\t * @override\n\t */\n\t_handleCalendarChange(event) {\n\t\tconst newValue = event.detail.dates && event.detail.dates[0];\n\t\tsuper._handleCalendarSelectedDatesChange(event, newValue);\n\t\tthis.storeCalendarSelection();\n\t}\n\n\t/**\n\t * @override\n\t * Overwrite the method to avoid updating the <code>value</code> when the user clicks on the calendar.\n\t *\n\t * <b>Note:</b> the <code>DateTimePicker</code> should change and update the value\n\t * after user presses the <code>submit</code> button.\n\t */\n\t_updateValueCalendarSelectedDatesChange() {}\n\n\t/**\n\t * Handles document resize to switch between <code>phoneMode</code> and normal appearance.\n\t */\n\tasync _handleResize() {\n\t\tconst documentWidth = document.body.offsetWidth;\n\t\tconst toPhoneMode = documentWidth <= PHONE_MODE_BREAKPOINT;\n\t\tconst modeChange = (toPhoneMode && !this._phoneMode) || (!toPhoneMode && this._phoneMode); // XOR not allowed by lint\n\n\t\tif (modeChange) {\n\t\t\tthis._phoneMode = toPhoneMode;\n\t\t\tthis.setSlidersValue();\n\t\t}\n\t}\n\n\t/**\n\t * Handles clicking on the <code>submit</code> button, within the picker`s footer.\n\t */\n\tasync _submitClick() {\n\t\tconst selectedDate = await this.getCurrentDateTime();\n\n\t\tthis.value = this.getFormat().format(selectedDate);\n\t\tconst valid = this.isValid(this.value);\n\n\t\tif (this.value !== this.previousValue) {\n\t\t\tthis.fireEvent(\"change\", { value: this.value, valid });\n\t\t\tthis.fireEvent(\"value-changed\", { value: this.value, valid });\n\t\t}\n\n\t\tthis.closePicker();\n\t}\n\n\t/**\n\t * Handles clicking on the <code>cancel</code> button, within the picker`s footer,\n\t * that would disregard the user selection.\n\t */\n\tasync _cancelClick() {\n\t\tthis.value = this.previousValue;\n\t\tthis.closePicker();\n\t}\n\n\t/**\n\t * Handles the date/time switch available in <code>phoneMode</code> to switch\n\t * between the date and time views.\n\t * @param {Event} event\n\t */\n\tasync _dateTimeSwitchChange(event) {\n\t\tthis._showTimeView = event.target.getAttribute(\"key\") === \"Time\";\n\n\t\tif (this._showTimeView) {\n\t\t\tthis.expandHoursSlider();\n\t\t}\n\t}\n\n\t/**\n\t * Handles clicking on \"minutes\", \"seconds\" and \"periods\" sliders.\n\t * <b>Note:</b> not bound for \"hours\" click\n\t * @param {Event} event\n\t */\n\t_sliderClick() {\n\t\tthis.collapseHoursSlider();\n\t}\n\n\t/**\n\t * PRIVATE METHODS\n\t */\n\n\t /**\n\t * Stores a preview of the calendar selection to restore it\n\t * when the user switches between the time and date view.\n\t * <br><br>\n\t * <b>Note:</b> this is needed, because the <code>value</code> is not immediately updated on user interaction,\n\t * but only after the user presses the <code>sumbit</code> button.\n\t */\n\tstoreCalendarSelection() {\n\t\tthis._calendarPreview = {\n\t\t\ttimestamp: this._calendar.timestamp,\n\t\t\tdates: this._calendar.selectedDates,\n\t\t};\n\t}\n\n\t/**\n\t * Stores the <code>value</code> when the picker opens to compare with the <code>value</code>,\n\t * selected by any user interaction and fire the <code>change</code> event, if they differ.\n\t */\n\tstorePreviousValue() {\n\t\tthis.previousValue = this.value;\n\t}\n\n\t/**\n\t * Normalizes the current <code>formatPattern</code>.\n\t *\n\t * Fallbacks to the default <code>formatPattern</code> according to the locale when:\n\t * - no format is set at all\n\t * - the format does not include hours\n\t *\n\t * @param {string} pattern The current <code>formatPattern</code>\n\t * @returns {string}\n\t */\n\tnormalizePattern(pattern) {\n\t\tconst hasHours = !!pattern.match(/H/i);\n\t\tconst fallback = !pattern || !hasHours;\n\n\t\treturn fallback ? LocaleData.getInstance(getLocale()).getCombinedDateTimePattern(\"medium\", \"medium\", this._primaryCalendarType) : pattern;\n\t}\n\n\t/**\n\t * Expands the \"hours\" time slider.\n\t */\n\texpandHoursSlider() {\n\t\tthis._hoursCollapsed = false;\n\t}\n\n\t/**\n\t * Collapses the \"hours\" time slider.\n\t */\n\tcollapseHoursSlider() {\n\t\tthis._hoursCollapsed = true;\n\t}\n\n\tasync getHoursSlider() {\n\t\treturn (await this.getPicker()).querySelector(\".ui5-dt-hours-wheel\");\n\t}\n\n\tasync getMinutesSlider() {\n\t\treturn (await this.getPicker()).querySelector(\".ui5-dt-minutes-wheel\");\n\t}\n\n\tasync getSecondsSlider() {\n\t\treturn (await this.getPicker()).querySelector(\".ui5-dt-seconds-wheel\");\n\t}\n\n\tasync getPeriodsSlider() {\n\t\treturn (await this.getPicker()).querySelector(\".ui5-dt-periods-wheel\");\n\t}\n\n\tasync getPicker() {\n\t\tconst staticAreaItem = await this.getStaticAreaItemDomRef();\n\t\treturn staticAreaItem.querySelector(\"ui5-responsive-popover\");\n\t}\n\n\tasync getCurrentDateTime() {\n\t\t// the time set in the timepicker\n\t\tconst selectedTime = new Date();\n\t\tconst timeValues = await this.getTimePickerValues();\n\n\t\tselectedTime.setHours(timeValues.hours);\n\t\tselectedTime.setMinutes(timeValues.minutes);\n\t\tselectedTime.setSeconds(timeValues.seconds);\n\n\t\t// the date set in the calendar\n\t\tconst currentCalendarValue = this.getFormat().format(\n\t\t\tnew Date(CalendarDate.fromTimestamp(\n\t\t\t\tthis._calTimestamp * 1000,\n\t\t\t\tthis._primaryCalendarType\n\t\t\t).valueOf()),\n\t\t\ttrue\n\t\t);\n\n\t\t// merge both the date and time\n\t\tconst selectedDate = this.getFormat().parse(currentCalendarValue) || selectedTime;\n\t\tselectedDate.setHours(selectedTime.getHours());\n\t\tselectedDate.setMinutes(selectedTime.getMinutes());\n\t\tselectedDate.setSeconds(selectedTime.getSeconds());\n\n\t\treturn selectedDate;\n\t}\n\n\tasync getTimePickerValues() {\n\t\tconst secondsSlider = await this.getSecondsSlider();\n\t\tconst minutesSlider = await this.getMinutesSlider();\n\t\tconst hoursSlider = await this.getHoursSlider();\n\t\tconst periodsSlider = await this.getPeriodsSlider();\n\n\t\tlet hours = hoursSlider ? hoursSlider.value : this._hoursConfig.minHour.toString();\n\t\tconst minutes = minutesSlider ? minutesSlider.value : \"0\";\n\t\tconst seconds = secondsSlider ? secondsSlider.value : \"0\";\n\t\tconst period = periodsSlider ? periodsSlider.value : this.periodsArray[0];\n\n\t\tif (period === this.periodsArray[0]) { // AM\n\t\t\thours = hours === \"12\" ? 0 : hours;\n\t\t}\n\n\t\tif (period === this.periodsArray[1]) { // PM\n\t\t\thours = hours === \"12\" ? hours : hours * 1 + 12;\n\t\t}\n\n\t\treturn {\n\t\t\thours,\n\t\t\tminutes,\n\t\t\tseconds,\n\t\t\tperiod,\n\t\t};\n\t}\n\n\t/**\n\t * Sets hours, minutes, seconds and period according to the current <code>value</code>\n\t * or the current time if the <code>value</code> is not set.\n\t */\n\tasync setSlidersValue() {\n\t\tconst currentDate = this.value ? this.getFormat().parse(this.value) : new Date();\n\n\t\tif (currentDate) {\n\t\t\tawait this.setHours(currentDate.getHours());\n\t\t\tawait this.setMinutes(currentDate.getMinutes());\n\t\t\tawait this.setSeconds(currentDate.getSeconds());\n\t\t\tawait this.setPeriod(currentDate.getHours());\n\t\t}\n\t}\n\n\tasync setHours(value) {\n\t\tlet tempValue = \"\";\n\t\tconst hoursSlider = await this.getHoursSlider();\n\t\tconst config = this._hoursConfig;\n\n\t\tif (hoursSlider) {\n\t\t\tif (config.isTwelveHoursFormat && value > config.maxHour) {\n\t\t\t\ttempValue = value - 12;\n\t\t\t} else if (config.isTwelveHoursFormat && value < config.minHour) {\n\t\t\t\ttempValue = value + 12;\n\t\t\t} else {\n\t\t\t\ttempValue = value;\n\t\t\t}\n\n\t\t\thoursSlider.value = this.normalizeDigit(tempValue);\n\t\t}\n\t}\n\n\tasync setMinutes(value) {\n\t\tconst minutesSlider = await this.getMinutesSlider();\n\n\t\tif (minutesSlider) {\n\t\t\tminutesSlider.value = this.normalizeDigit(value);\n\t\t}\n\t}\n\n\tasync setSeconds(value) {\n\t\tconst secondsSlider = await this.getSecondsSlider();\n\n\t\tif (secondsSlider) {\n\t\t\tsecondsSlider.value = this.normalizeDigit(value);\n\t\t}\n\t}\n\n\tasync setPeriod(hours) {\n\t\tconst config = this._hoursConfig;\n\t\tconst periodsSlider = await this.getPeriodsSlider();\n\n\t\tif (!periodsSlider) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (config.isTwelveHoursFormat) {\n\t\t\tif (config.minHour === 1) {\n\t\t\t\tperiodsSlider.value = hours >= config.maxHour ? this.periodsArray[1] : this.periodsArray[0];\n\t\t\t} else {\n\t\t\t\tperiodsSlider.value = (hours > config.maxHour || hours === config.minHour) ? this.periodsArray[1] : this.periodsArray[0];\n\t\t\t}\n\t\t}\n\t}\n\n\tnormalizeDigit(value) {\n\t\tconst valueAsString = value.toString();\n\t\treturn valueAsString.length === 1 ? `0${value}` : valueAsString;\n\t}\n\n\tisTimeControlContained() {\n\t\tconst format = this.getFormat().aFormatArray;\n\t\treturn getTimeControlsByFormat(format, this._hoursConfig);\n\t}\n\n\tupdateHoursFormatConfig() {\n\t\tconst formatArray = this.getFormat().aFormatArray;\n\n\t\tif (formatArray.length < 7) {\n\t\t\treturn; // does not contain time data\n\t\t}\n\n\t\tconst config = getHoursConfigByFormat(formatArray[6].type);\n\t\tthis._hoursConfig.minHour = config.minHour;\n\t\tthis._hoursConfig.maxHour = config.maxHour;\n\t\tthis._hoursConfig.isTwelveHoursFormat = config.isTwelveHoursFormat;\n\t}\n}\n\nDateTimePicker.define();\n\nexport default DateTimePicker;\n"]},"metadata":{},"sourceType":"module"}