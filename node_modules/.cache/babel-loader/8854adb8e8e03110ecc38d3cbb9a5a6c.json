{"ast":null,"code":"import _regeneratorRuntime from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar registry = new Map();\nvar iconCollectionPromises = new Map();\nvar ICON_NOT_FOUND = \"ICON_NOT_FOUND\";\nvar DEFAULT_COLLECTION = \"SAP-icons\";\n\nvar calcKey = function calcKey(name, collection) {\n  // silently support ui5-compatible URIs\n  if (name.startsWith(\"sap-icon://\")) {\n    name = name.replace(\"sap-icon://\", \"\");\n\n    var _name$split$reverse = name.split(\"/\").reverse();\n\n    var _name$split$reverse2 = _slicedToArray(_name$split$reverse, 2);\n\n    name = _name$split$reverse2[0];\n    collection = _name$split$reverse2[1];\n  }\n\n  collection = collection || DEFAULT_COLLECTION;\n  return \"\".concat(collection, \":\").concat(name);\n};\n\nvar registerIcon = function registerIcon(name) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      pathData = _ref.pathData,\n      accData = _ref.accData,\n      collection = _ref.collection;\n\n  var key = calcKey(name, collection);\n  registry.set(key, {\n    pathData: pathData,\n    accData: accData\n  });\n};\n\nvar getIconDataSync = function getIconDataSync(name) {\n  var collection = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_COLLECTION;\n  var key = calcKey(name, collection);\n  return registry.get(key);\n};\n\nvar getIconData = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(name) {\n    var collection,\n        key,\n        iconData,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            collection = _args.length > 1 && _args[1] !== undefined ? _args[1] : DEFAULT_COLLECTION;\n            key = calcKey(name, collection);\n\n            if (!iconCollectionPromises.has(collection)) {\n              iconCollectionPromises.set(collection, Promise.resolve(ICON_NOT_FOUND));\n            }\n\n            _context.next = 5;\n            return iconCollectionPromises.get(collection);\n\n          case 5:\n            iconData = _context.sent;\n\n            if (!(iconData === ICON_NOT_FOUND)) {\n              _context.next = 8;\n              break;\n            }\n\n            return _context.abrupt(\"return\", iconData);\n\n          case 8:\n            return _context.abrupt(\"return\", registry.get(key));\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function getIconData(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nvar getRegisteredNames = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            if (!iconCollectionPromises.has(DEFAULT_COLLECTION)) {\n              _context2.next = 3;\n              break;\n            }\n\n            _context2.next = 3;\n            return iconCollectionPromises.get(DEFAULT_COLLECTION);\n\n          case 3:\n            return _context2.abrupt(\"return\", Array.from(registry.keys()).map(function (k) {\n              return k.split(\":\")[1];\n            }));\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function getRegisteredNames() {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar registerCollectionPromise = function registerCollectionPromise(collection, promise) {\n  iconCollectionPromises.set(collection, promise);\n};\n\nexport { getIconData, getIconDataSync, registerIcon, getRegisteredNames, registerCollectionPromise };","map":{"version":3,"sources":["/Users/juanzorrilla/Documents/SAPUI5/personal-ui5/node_modules/@ui5/webcomponents-base/dist/SVGIconRegistry.js"],"names":["registry","Map","iconCollectionPromises","ICON_NOT_FOUND","DEFAULT_COLLECTION","calcKey","name","collection","startsWith","replace","split","reverse","registerIcon","pathData","accData","key","set","getIconDataSync","get","getIconData","has","Promise","resolve","iconData","getRegisteredNames","Array","from","keys","map","k","registerCollectionPromise","promise"],"mappings":"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","sourcesContent":["const registry = new Map();\nconst iconCollectionPromises = new Map();\n\nconst ICON_NOT_FOUND = \"ICON_NOT_FOUND\";\nconst DEFAULT_COLLECTION = \"SAP-icons\";\n\nconst calcKey = (name, collection) => {\n\t// silently support ui5-compatible URIs\n\tif (name.startsWith(\"sap-icon://\")) {\n\t\tname = name.replace(\"sap-icon://\", \"\");\n\t\t[name, collection] = name.split(\"/\").reverse();\n\t}\n\tcollection = collection || DEFAULT_COLLECTION;\n\treturn `${collection}:${name}`;\n};\n\nconst registerIcon = (name, { pathData, accData, collection } = {}) => {\n\tconst key = calcKey(name, collection);\n\tregistry.set(key, { pathData, accData });\n};\n\nconst getIconDataSync = (name, collection = DEFAULT_COLLECTION) => {\n\tconst key = calcKey(name, collection);\n\treturn registry.get(key);\n};\n\nconst getIconData = async (name, collection = DEFAULT_COLLECTION) => {\n\tconst key = calcKey(name, collection);\n\n\tif (!iconCollectionPromises.has(collection)) {\n\t\ticonCollectionPromises.set(collection, Promise.resolve(ICON_NOT_FOUND));\n\t}\n\n\tconst iconData = await iconCollectionPromises.get(collection);\n\n\tif (iconData === ICON_NOT_FOUND) {\n\t\treturn iconData;\n\t}\n\n\treturn registry.get(key);\n};\n\nconst getRegisteredNames = async () => {\n\tif (iconCollectionPromises.has(DEFAULT_COLLECTION)) {\n\t\tawait iconCollectionPromises.get(DEFAULT_COLLECTION);\n\t}\n\treturn Array.from(registry.keys()).map(k => k.split(\":\")[1]);\n};\n\nconst registerCollectionPromise = (collection, promise) => {\n\ticonCollectionPromises.set(collection, promise);\n};\n\nexport {\n\tgetIconData,\n\tgetIconDataSync,\n\tregisterIcon,\n\tgetRegisteredNames,\n\tregisterCollectionPromise,\n};\n"]},"metadata":{},"sourceType":"module"}