import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';

/* eslint-disable no-console,no-unused-expressions */
var pad0 = function pad0(i, w) {
  return "000".concat(String(i)).slice(-w);
};

var LOG_LEVEL;

(function (LOG_LEVEL) {
  LOG_LEVEL[LOG_LEVEL["FATAL"] = 0] = "FATAL";
  LOG_LEVEL[LOG_LEVEL["ERROR"] = 1] = "ERROR";
  LOG_LEVEL[LOG_LEVEL["WARNING"] = 2] = "WARNING";
  LOG_LEVEL[LOG_LEVEL["INFO"] = 3] = "INFO";
  LOG_LEVEL[LOG_LEVEL["DEBUG"] = 4] = "DEBUG";
  LOG_LEVEL[LOG_LEVEL["TRACE"] = 5] = "TRACE";
})(LOG_LEVEL || (LOG_LEVEL = {}));

var DeviceLogger = /*#__PURE__*/function () {
  function DeviceLogger() {
    var defaultComponent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'DEVICE';

    _classCallCheck(this, DeviceLogger);

    this.defaultComponent = void 0;
    this.sWindowName = window.top === window ? '' : "[".concat(window.location.pathname.split('/').slice(-1)[0], "] ");
    this.log(LOG_LEVEL.INFO, 'Device API logging initialized');
    this.defaultComponent = defaultComponent;
    return this;
  }

  _createClass(DeviceLogger, [{
    key: "for",
    value: function _for(defaultComponent) {
      return new DeviceLogger(defaultComponent);
    }
  }, {
    key: "log",
    value: function log(iLevel, sMessage, sComponent) {
      sComponent = sComponent || this.defaultComponent || '';
      var oNow = new Date();
      var oLogEntry = {
        time: "".concat(pad0(oNow.getHours(), 2), ":").concat(pad0(oNow.getMinutes(), 2), ":").concat(pad0(oNow.getSeconds(), 2)),
        date: "".concat(pad0(oNow.getFullYear(), 4), "-").concat(pad0(oNow.getMonth() + 1, 2), "-").concat(pad0(oNow.getDate(), 2)),
        timestamp: oNow.getTime(),
        level: iLevel,
        message: sMessage || '',
        component: sComponent || ''
      };

      if (window.console) {
        var logText = "".concat(oLogEntry.date, " ").concat(oLogEntry.time, " ").concat(this.sWindowName).concat(oLogEntry.message, " - ").concat(oLogEntry.component);

        switch (iLevel) {
          case LOG_LEVEL.FATAL:
          case LOG_LEVEL.ERROR:
            console.error(logText);
            break;

          case LOG_LEVEL.WARNING:
            console.warn(logText);
            break;

          case LOG_LEVEL.INFO:
            console.info ? console.info(logText) : console.log(logText);
            break;
          // info not available in iOS simulator

          case LOG_LEVEL.DEBUG:
            console.debug ? console.debug(logText) : console.log(logText);
            break;
          // debug not available in IE, fallback to log

          case LOG_LEVEL.TRACE:
            console.trace ? console.trace(logText) : console.log(logText);
            break;
          // trace not available in IE, fallback to log
        }
      }

      return oLogEntry;
    } //  Public API

  }, {
    key: "fatal",
    value: function fatal(msg, component) {
      return this.log(LOG_LEVEL.FATAL, msg, component);
    }
  }, {
    key: "error",
    value: function error(msg, component) {
      return this.log(LOG_LEVEL.ERROR, msg, component);
    }
  }, {
    key: "warning",
    value: function warning(msg, component) {
      return this.log(LOG_LEVEL.WARNING, msg, component);
    }
  }, {
    key: "info",
    value: function info(msg, component) {
      return this.log(LOG_LEVEL.INFO, msg, component);
    }
  }, {
    key: "debug",
    value: function debug(msg, component) {
      return this.log(LOG_LEVEL.DEBUG, msg, component);
    }
  }, {
    key: "trace",
    value: function trace(msg, component) {
      return this.log(LOG_LEVEL.TRACE, msg, component);
    }
  }]);

  return DeviceLogger;
}();

var Logger = new DeviceLogger();

export { LOG_LEVEL, Logger };
//# sourceMappingURL=Logger.js.map
