import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import { deprecationNotice } from '@ui5/webcomponents-react-base/lib/Utils';

var Event = /*#__PURE__*/function () {
  /**
   * Event Constructor
   * @param source {ReactNode} The React Element instance
   * @param originalEvent {HTMLEvent} original HTML Event that triggered this event
   * @param parameters {Parameters} event payload
   */
  function Event(source, originalEvent) {
    var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    _classCallCheck(this, Event);

    this.source = void 0;
    this.originalEvent = void 0;
    this.parameters = void 0;
    this.htmlSource = void 0;
    this.source = source;
    this.originalEvent = originalEvent;
    this.parameters = parameters;
    this.htmlSource = originalEvent.target;
    deprecationNotice('@ui5/webcomponents-react-base/lib/Event', 'This class is deprecated and will be removed in future releases. We recommend working with CustomEvents from now on.');
  }
  /**
   * Static initializer for an Event
   * @param source {ReactNode} The React Element instance
   * @param originalEvent {HTMLEvent} original HTML Event that triggered this event
   * @param parameters {Parameters} event payload
   */


  _createClass(Event, [{
    key: "getSource",
    value: function getSource() {
      return this.source;
    }
  }, {
    key: "getOriginalEvent",
    value: function getOriginalEvent() {
      return this.originalEvent;
    }
  }, {
    key: "getParameters",
    value: function getParameters() {
      return this.parameters;
    }
  }, {
    key: "getParameter",
    value: function getParameter(parameter) {
      return this.parameters[parameter];
    }
  }, {
    key: "getHtmlSourceElement",
    value: function getHtmlSourceElement() {
      return this.htmlSource;
    }
  }, {
    key: "cancel",
    value: function cancel() {
      this.originalEvent.stopPropagation();
    }
  }, {
    key: "preventDefault",
    value: function preventDefault() {
      this.originalEvent.preventDefault();
    }
  }], [{
    key: "of",
    value: function of(source, originalEvent) {
      var parameters = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      return new Event(source, originalEvent, parameters);
    }
  }]);

  return Event;
}();

export { Event };
//# sourceMappingURL=Event.js.map
