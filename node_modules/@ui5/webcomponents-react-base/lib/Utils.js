var deprecationNotice = function deprecationNotice(component, message) {
  if (process.env.NODE_ENV === 'development') {
    var value = "*** ui5-webcomponents-react Deprecation Notice - ".concat(component, " ***\n"); // eslint-disable-next-line no-console

    console.warn("".concat(value).concat(message));
  }
};
var getScrollBarWidth = function getScrollBarWidth() {
  var inner = document.createElement('p');
  inner.style.width = '100%';
  inner.style.height = '200px';
  var outer = document.createElement('div');
  outer.style.position = 'absolute';
  outer.style.top = '0px';
  outer.style.left = '0px';
  outer.style.visibility = 'hidden';
  outer.style.width = '200px';
  outer.style.height = '150px';
  outer.style.overflow = 'hidden';
  outer.appendChild(inner);
  document.body.appendChild(outer);
  var w1 = inner.offsetWidth;
  outer.style.overflow = 'scroll';
  var w2 = inner.offsetWidth;

  if (w1 === w2) {
    w2 = outer.clientWidth;
  }

  document.body.removeChild(outer);
  return w1 - w2;
};
var polyfillDeprecatedEventAPI = function polyfillDeprecatedEventAPI(event) {
  event.getOriginalEvent = function () {
    deprecationNotice('Event', // eslint-disable-next-line max-len
    "'event.getOriginalEvent' is deprecated and will be removed in the next major release. Please use the event object itself instead.");
    return event;
  };

  event.getParameters = function () {
    deprecationNotice('Event', // eslint-disable-next-line max-len
    "'event.getParameters' is deprecated and will be removed in the next major release. Please use 'event.detail' instead.");
    return event.parameters;
  };

  event.getParameter = function (parameter) {
    deprecationNotice('Event', // eslint-disable-next-line max-len
    "'event.getParameter' is deprecated and will be removed in the next major release. Please use 'event.detail[parameter]' instead.");
    return event.parameters[parameter];
  };

  event.getHtmlSourceElement = function () {
    deprecationNotice('Event', // eslint-disable-next-line max-len
    "'event.getHtmlSourceElement' is deprecated and will be removed in the next major release. Please use 'event.target' instead.");
    return event.target;
  };

  event.parameters = new Proxy({}, {
    get: function get(obj, prop) {
      deprecationNotice('Event', // eslint-disable-next-line max-len
      "'event.parameters' is deprecated and will be removed in the next major release. Please use 'event.detail' instead.");

      if (event.detail && event.detail.hasOwnProperty(prop)) {
        return event.detail[prop];
      } // really dirty fallback to e.target


      return event.target[prop];
    }
  });
  return event;
};
var enrichEventWithDetails = function enrichEventWithDetails(event) {
  var payload = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (event.hasOwnProperty('persist')) {
    // if there is a persist method, it's an SyntheticEvent so we need to persist it
    event.persist();
  }

  var shouldCreateNewDetails = event.detail === null || event.detail === undefined || typeof event.detail !== 'object';
  Object.defineProperty(event, 'detail', {
    value: shouldCreateNewDetails ? {} : event.detail,
    writable: true,
    configurable: true
  });
  Object.assign(event.detail, payload); // "polyfill" old features

  polyfillDeprecatedEventAPI(event);
  return event;
};

export { deprecationNotice, enrichEventWithDetails, getScrollBarWidth, polyfillDeprecatedEventAPI };
//# sourceMappingURL=Utils.js.map
