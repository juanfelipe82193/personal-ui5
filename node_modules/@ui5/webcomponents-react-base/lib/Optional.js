import _classCallCheck from '@babel/runtime/helpers/classCallCheck';
import _createClass from '@babel/runtime/helpers/createClass';
import { deprecationNotice } from '@ui5/webcomponents-react-base/lib/Utils';

/* eslint-disable id-blacklist */

/**
 * Optionals for Javascript Objects
 * Inspired by Java Optionals
 */

var Optional = /*#__PURE__*/function () {
  /**
   * Creates a new Optional
   * @param {Object} object The Object to validate
   * @param {String} path Path to search for in object. Separated by dots.
   *                      Example: 'foo.bar'
   * @constructor
   */
  function Optional(object, path) {
    _classCallCheck(this, Optional);

    this.object = void 0;
    this.path = void 0;
    this.object = object;
    this.path = path;
    deprecationNotice('Optional', "'@ui5/webcomponents-react-base/lib/Optional' is deprecated and will be removed in the next major release.\n. Please use the Optional-Chaining-Operator instead.");
  }
  /**
   * Creates a new Optional
   * @param {Object} object The Object to validate
   * @param {String} path Path to search for in object. Separated by dots.
   *                      Example: 'foo.bar'
   * @constructor
   */


  _createClass(Optional, [{
    key: "get",

    /**
     * Get The Value of the Optional.
     * Do not use the this method directly!
     * @return {any} Resolved Value
     * @private
     */
    value: function get() {
      return this.path.split('.').reduce(function (acc, val) {
        if (acc === undefined || acc === null) {
          return acc;
        }

        if (acc.hasOwnProperty(val)) {
          var newVal = acc[val];

          if (newVal !== undefined && newVal !== null) {
            return newVal;
          }

          return newVal;
        }

        return undefined;
      }, this.object);
    }
    /**
     * Return true if there is a value present, otherwise false.
     * @returns {Boolean} true if there is a value present, otherwise false
     */

  }, {
    key: "isPresent",
    value: function isPresent() {
      var obj = this.object;
      return this.path.split('.').every(function (x) {
        if (typeof obj !== 'object' || obj === null || obj === undefined || !(x in obj)) return false;
        obj = obj[x];
        return true;
      });
    }
    /**
     * If a value is present, invoke the specified consumer with the value, otherwise do nothing.
     * @param {Function} fn block to be executed if a value is present
     * @returns {any} value The executed fn if present, else null
     */

  }, {
    key: "ifPresent",
    value: function ifPresent(fn) {
      if (this.isPresent()) {
        return fn(this.get());
      }

      return null;
    }
    /**
     * Return the value if present, otherwise return other.
     * @param val {any} the value to be returned if there is no value present, may be null
     * @returns {any} value the value, if present, otherwise other
     */

  }, {
    key: "orElse",
    value: function orElse(val) {
      return this.isPresent() ? this.get() : val;
    }
    /**
     * Return the contained value, if present, otherwise throw an exception to be created by the provided supplier.
     * @param {ExceptionSupplier} exceptionSupplier The supplier which will return the exception to be thrown
     * @returns {any} the present value
     * @throws {Exception} ex - if there is no value present
     *
     */

  }, {
    key: "orElseThrow",
    value: function orElseThrow(exceptionSupplier) {
      if (!this.isPresent()) {
        throw exceptionSupplier();
      }

      return this.get();
    }
  }], [{
    key: "of",
    value: function of(object, path) {
      return new Optional(object, path);
    }
  }]);

  return Optional;
}();

export { Optional };
//# sourceMappingURL=Optional.js.map
