import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { deprecationNotice } from '@ui5/webcomponents-react-base/lib/Utils';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import React, { forwardRef, useMemo } from 'react';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';

var TextStyles = {
  // Text Style
  text: {
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    color: ThemingParameters.sapTextColor,
    display: 'inline-block',
    boxSizing: 'border-box',
    whiteSpace: 'pre-line',
    wordWrap: 'break-word',
    maxWidth: '100%'
  },
  renderWhitespace: {
    whiteSpace: 'pre-wrap'
  },
  noWrap: {
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    wordWrap: 'normal',
    overflow: 'hidden',
    '&$renderWhitespace': {
      whiteSpace: 'pre'
    }
  }
};

var useStyles = createComponentStyles(TextStyles, {
  name: 'Text'
});
/**
 * <code>import { Text } from '@ui5/webcomponents-react/lib/Text';</code>
 */

var Text = forwardRef(function (props, ref) {
  var children = props.children,
      renderWhitespace = props.renderWhitespace,
      wrapping = props.wrapping,
      width = props.width,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      slot = props.slot;
  var classes = useStyles();
  var classNameString = StyleClassHelper.of(classes.text);

  if (wrapping === false) {
    classNameString.put(classes.noWrap);
  }

  if (renderWhitespace) {
    classNameString.put(classes.renderWhitespace);
  }

  if (className) {
    classNameString.put(className);
  }

  var inlineStyles = useMemo(function () {
    if (width !== null && width !== undefined) {
      deprecationNotice('Text', 'The prop `width` is deprecated and will be removed in the v0.10.0. Please use the `style` object instead.');
    }

    return _objectSpread({
      width: width
    }, style);
  }, [style, width]);
  var passThroughProps = usePassThroughHtmlProps(props);
  return /*#__PURE__*/React.createElement("span", _extends({
    ref: ref,
    style: inlineStyles,
    className: classNameString.toString(),
    title: tooltip,
    slot: slot
  }, passThroughProps), children);
});
Text.defaultProps = {
  renderWhitespace: false,
  wrapping: true,
  width: null
};
Text.displayName = 'Text';

export { Text };
//# sourceMappingURL=Text.js.map
