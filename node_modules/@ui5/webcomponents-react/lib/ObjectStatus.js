import _extends from '@babel/runtime/helpers/extends';
import '@ui5/webcomponents-icons/dist/icons/hint';
import '@ui5/webcomponents-icons/dist/icons/status-critical';
import '@ui5/webcomponents-icons/dist/icons/status-inactive';
import '@ui5/webcomponents-icons/dist/icons/status-negative';
import '@ui5/webcomponents-icons/dist/icons/status-positive';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { Icon } from '@ui5/webcomponents-react/lib/Icon';
import { ValueState } from '@ui5/webcomponents-react/lib/ValueState';
import React, { forwardRef, useMemo } from 'react';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';

var styles = {
  objectStatus: {
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    position: 'relative',
    display: 'flex'
  },
  iconSuccess: {
    '& ui5-icon': {
      color: ThemingParameters.sapPositiveTextColor
    }
  },
  iconWarning: {
    '& ui5-icon': {
      color: ThemingParameters.sapCriticalTextColor
    }
  },
  iconError: {
    '& ui5-icon': {
      color: ThemingParameters.sapNegativeTextColor
    }
  },
  iconNone: {
    '& ui5-icon': {
      color: ThemingParameters.sapNeutralTextColor
    }
  },
  iconInformation: {
    color: ThemingParameters.sapInformativeElementColor
  },
  icon: {
    marginRight: '0.5rem',
    fontSize: '1rem',
    verticalAlign: 'bottom',
    lineHeight: 'inherit'
  },
  textSuccess: {
    color: ThemingParameters.sapPositiveTextColor
  },
  textError: {
    color: ThemingParameters.sapNegativeTextColor
  },
  textWarning: {
    color: ThemingParameters.sapCriticalTextColor
  },
  textInformation: {
    color: ThemingParameters.sapInformativeTextColor
  },
  textNone: {
    color: ThemingParameters.sapNeutralTextColor
  }
};

var defaultIconStyle = {
  fontSize: '1rem'
};

var getDefaultIcon = function getDefaultIcon(state) {
  switch (state) {
    case ValueState.Error:
      return /*#__PURE__*/React.createElement(Icon, {
        name: "status-negative",
        style: defaultIconStyle
      });

    case ValueState.Success:
      return /*#__PURE__*/React.createElement(Icon, {
        name: "status-positive",
        style: defaultIconStyle
      });

    case ValueState.Warning:
      return /*#__PURE__*/React.createElement(Icon, {
        name: "status-critical",
        style: defaultIconStyle
      });

    case ValueState.Information:
      return /*#__PURE__*/React.createElement(Icon, {
        name: "hint",
        style: defaultIconStyle
      });

    default:
      return /*#__PURE__*/React.createElement(Icon, {
        name: "status-inactive",
        style: defaultIconStyle
      });
  }
};

var useStyles = createComponentStyles(styles, {
  name: 'ObjectStatus'
});
/**
 * <code>import { ObjectStatus } from '@ui5/webcomponents-react/lib/ObjectStatus';</code>
 */

var ObjectStatus = forwardRef(function (props, ref) {
  var state = props.state,
      showDefaultIcon = props.showDefaultIcon,
      children = props.children,
      icon = props.icon,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      slot = props.slot;
  var iconToRender = useMemo(function () {
    if (icon) {
      return icon;
    }

    if (showDefaultIcon) {
      return getDefaultIcon(state);
    }

    return null;
  }, [icon, showDefaultIcon, state]);
  var classes = useStyles();
  var objStatusClasses = StyleClassHelper.of(classes.objectStatus);

  if (className) {
    objStatusClasses.put(className);
  }

  var iconClasses = StyleClassHelper.of(classes.icon);
  iconClasses.put(classes["icon".concat(state)]);
  var textClass = classes["text".concat(state)];
  var passThroughProps = usePassThroughHtmlProps(props);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: objStatusClasses.valueOf(),
    style: style,
    title: tooltip,
    slot: slot
  }, passThroughProps), iconToRender && /*#__PURE__*/React.createElement("div", {
    className: iconClasses.valueOf()
  }, iconToRender), children !== null && children !== undefined && /*#__PURE__*/React.createElement("span", {
    className: textClass
  }, children));
});
ObjectStatus.displayName = 'ObjectStatus';
ObjectStatus.defaultProps = {
  state: ValueState.None,
  showDefaultIcon: false,
  icon: null,
  children: null
};

export { ObjectStatus };
//# sourceMappingURL=ObjectStatus.js.map
