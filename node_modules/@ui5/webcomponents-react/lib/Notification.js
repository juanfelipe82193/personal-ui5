import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import '@ui5/webcomponents-icons/dist/icons/decline';
import '@ui5/webcomponents-icons/dist/icons/message-error';
import '@ui5/webcomponents-icons/dist/icons/message-success';
import '@ui5/webcomponents-icons/dist/icons/message-warning';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { useI18nBundle } from '@ui5/webcomponents-react-base/lib/hooks';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { enrichEventWithDetails } from '@ui5/webcomponents-react-base/lib/Utils';
import { SHOW_LESS, SHOW_MORE, COLLAPSE_GROUP, EXPAND_GROUP } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { Avatar } from '@ui5/webcomponents-react/lib/Avatar';
import { AvatarShape } from '@ui5/webcomponents-react/lib/AvatarShape';
import { AvatarSize } from '@ui5/webcomponents-react/lib/AvatarSize';
import { Button } from '@ui5/webcomponents-react/lib/Button';
import { ButtonDesign } from '@ui5/webcomponents-react/lib/ButtonDesign';
import { Icon } from '@ui5/webcomponents-react/lib/Icon';
import { Label } from '@ui5/webcomponents-react/lib/Label';
import { Priority } from '@ui5/webcomponents-react/lib/Priority';
import { Text } from '@ui5/webcomponents-react/lib/Text';
import React, { forwardRef, useState, useEffect, useMemo, useCallback } from 'react';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';

var style = {
  notificationContainer: {
    width: '100%',
    maxWidth: '60rem',
    backgroundColor: ThemingParameters.sapList_Background,
    boxShadow: ThemingParameters.sapContent_Shadow0,
    display: 'flex',
    flexDirection: 'row',
    position: 'relative',
    overflow: 'hidden',
    '&:hover': {
      backgroundColor: ThemingParameters.sapList_Hover_Background
    },
    '&:active': {
      backgroundColor: ThemingParameters.sapList_Hover_Background
    }
  },
  notificationContainerChild: {
    backgroundColor: ThemingParameters.sapList_HeaderBackground
  },
  header: {
    display: 'flex',
    flexDirection: 'row',
    boxShadow: "inset 0 -0.0625rem ".concat(ThemingParameters.sapPageHeader_BorderColor),
    padding: '1rem 0 1rem 1.25rem',
    alignItems: 'center'
  },
  titleEllipsised: {
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    display: '-webkit-box',
    lineHeight: '15px',
    maxHeight: '30px'
    /* height * number of lines */
    ,
    WebkitLineClamp: 2
    /* number of lines to show */
    ,
    WebkitBoxOrient: 'vertical',
    paddingRight: '40px'
  },
  title: {
    color: ThemingParameters.sapGroup_TitleTextColor,
    fontFamily: ThemingParameters.sapFontHeaderFamily,
    textShadow: ThemingParameters.sapContent_TextShadow,
    fontSize: '14px',
    paddingRight: '40px'
  },
  closeButton: {
    position: 'absolute',
    right: '0.5rem',
    top: '0.5rem'
  },
  content: {
    boxSizing: 'border-box',
    display: 'flex',
    flexDirection: 'row',
    '@media (min-width: 600px)': {
      maxWidth: '60%',
      paddingRight: '1rem'
    },
    '@media (max-width: 599px)': {
      width: '100%'
    }
  },
  descriptionContainer: {
    display: 'flex',
    flexDirection: 'column'
  },
  avatar: {
    paddingRight: '0.375rem'
  },
  descriptionEllipsised: {
    color: ThemingParameters.sapContent_LabelColor,
    overflow: 'hidden',
    textAlign: 'left',
    textOverflow: 'ellipsis',
    display: '-webkit-box',
    lineHeight: '15px',
    maxHeight: '30px'
    /* height * number of lines */
    ,
    WebkitLineClamp: '2'
    /* number of lines to show */
    ,
    WebkitBoxOrient: 'vertical'
  },
  descriptionFull: {
    color: ThemingParameters.sapContent_LabelColor
  },
  metadata: {
    paddingTop: '0.375rem',
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    color: ThemingParameters.sapContent_LabelColor,
    fontWeight: 'normal',
    display: 'flex',
    flexWrap: 'wrap',
    overflow: 'hidden'
  },
  separator: {
    margin: '0 0.5rem 0 0.5rem'
  },
  priorityIndicator: {
    width: '0.375rem',
    minWidth: '0.375rem',
    height: 'auto'
  },
  high: {
    backgroundColor: ThemingParameters.sapErrorBorderColor
  },
  medium: {
    backgroundColor: ThemingParameters.sapWarningBorderColor
  },
  low: {
    backgroundColor: ThemingParameters.sapSuccessBorderColor
  },
  none: {
    backgroundColor: ThemingParameters.sapNeutralBorderColor
  },
  semanticIcon: {
    paddingRight: '0.375rem',
    width: '1rem',
    display: 'flex'
  },
  error: {
    color: ThemingParameters.sapNegativeElementColor
  },
  warning: {
    color: ThemingParameters.sapCriticalElementColor
  },
  success: {
    color: ThemingParameters.sapPositiveElementColor
  },
  contentAction: {
    display: 'flex',
    flexDirection: 'row',
    flexWrap: 'wrap',
    '@media (min-width: 600px)': {
      justifyContent: 'space-between'
    },
    justifyContent: 'flex-end'
  },
  footer: {
    '@media (min-width: 600px)': {
      maxWidth: '40%',
      alignSelf: 'flex-end'
    },
    maxWidth: '100%',
    padding: '0 0.5rem 0.5rem 0'
  },
  showGroup: {
    paddingLeft: '1rem',
    alignSelf: 'flex-start'
  }
};

var useStyles = createComponentStyles(style, {
  name: 'Notification'
});
var WEIGHT = {
  None: 0,
  Low: 1,
  Medium: 2,
  High: 3
};
/**
 * <code>import { Notification } from '@ui5/webcomponents-react/lib/Notification';</code>
 */

var Notification = forwardRef(function (props, ref) {
  var footer = props.footer,
      description = props.description,
      title = props.title,
      authorName = props.authorName,
      datetime = props.datetime,
      avatar = props.avatar,
      priority = props.priority,
      onClick = props.onClick,
      children = props.children,
      collapsed = props.collapsed,
      className = props.className,
      tooltip = props.tooltip,
      style = props.style,
      autoPriority = props.autoPriority,
      noShowMoreButton = props.noShowMoreButton,
      truncate = props.truncate,
      noCloseButton = props.noCloseButton,
      onClose = props.onClose;
  var classes = useStyles(props);

  var _useState = useState(true),
      _useState2 = _slicedToArray(_useState, 2),
      visibleState = _useState2[0],
      toggleVisible = _useState2[1];

  var _useState3 = useState(!collapsed),
      _useState4 = _slicedToArray(_useState3, 2),
      showChildren = _useState4[0],
      toggleChildrenVisible = _useState4[1];

  var _useState5 = useState(!truncate),
      _useState6 = _slicedToArray(_useState5, 2),
      showMore = _useState6[0],
      toggleShowMore = _useState6[1];

  useEffect(function () {
    toggleChildrenVisible(!collapsed);
  }, [collapsed]);
  useEffect(function () {
    toggleShowMore(!truncate);
  }, [truncate]);
  var renderAvatar = useMemo(function () {
    if (avatar) {
      return /*#__PURE__*/React.createElement("div", {
        className: classes.avatar
      }, typeof avatar === 'string' ? /*#__PURE__*/React.createElement(Avatar, {
        size: AvatarSize.XS,
        shape: AvatarShape.Circle,
        initials: avatar
      }) : avatar);
    }

    return null;
  }, [avatar]);
  var handleClose = useCallback(function (e) {
    toggleVisible(false);
    onClose(enrichEventWithDetails(e));
  }, [toggleVisible, onClose]);
  var handleNotificationClick = useCallback(function (e) {
    if (e.target.nodeName !== 'UI5-BUTTON' && e.target.nodeName !== 'UI5-ICON' && typeof onClick === 'function') {
      onClick(enrichEventWithDetails(e));
    }
  }, [onClick]);
  var handleShowNotificationGroup = useCallback(function () {
    toggleChildrenVisible(!showChildren);
  }, [showChildren]);
  var handleShowMore = useCallback(function () {
    toggleShowMore(!showMore);
  }, [showMore]);
  var isLastChild = props['isLastChild'];
  var isChild = props['isChild'];
  var notificationContainerStyles = useMemo(function () {
    var borderRadius = function borderRadius() {
      if (isChild) {
        return '0';
      }

      if (isLastChild) {
        return '0 0 0.25rem 0.25rem';
      }

      if (children && showChildren) {
        return '0.25rem 0.25rem 0 0';
      }

      return '0.25rem';
    };

    var cursor = props.onClick ? 'pointer' : 'auto';
    return _objectSpread(_objectSpread({}, style), {}, {
      borderRadius: borderRadius(),
      cursor: cursor
    });
  }, [onClick, children, showChildren, isChild, isLastChild, style]);
  var contentStyles = useMemo(function () {
    return {
      padding: footer ? '1rem 1rem 0.5rem 1.25rem' : '1rem 1rem 1rem 1.25rem'
    };
  }, [footer]);
  var setAutoPriority = useMemo(function () {
    if (priority === Priority.High) return priority;
    var priorityArray = React.Children.map(children, function (item) {
      if (!React.isValidElement(item)) return null;
      return {
        weight: WEIGHT[item.props.priority],
        priority: item.props.priority
      };
    });

    if (Array.isArray(priorityArray)) {
      var highestPriority = priorityArray.reduce(function (prev, current) {
        return prev.weight > current.weight ? prev : current;
      });
      return highestPriority.priority;
    }

    return null;
  }, [children, priority]);
  var renderSemanticIcon = useMemo(function () {
    var prio = priority;

    if (autoPriority && !!setAutoPriority) {
      prio = setAutoPriority;
    }

    switch (prio) {
      case Priority.High:
        return /*#__PURE__*/React.createElement(Icon, {
          name: "message-error",
          className: classes.error
        });

      case Priority.Medium:
        return /*#__PURE__*/React.createElement(Icon, {
          name: "message-warning",
          className: classes.warning
        });

      case Priority.Low:
        return /*#__PURE__*/React.createElement(Icon, {
          name: "message-success",
          className: classes.success
        });

      case Priority.None:
        return null;

      default:
        return null;
    }
  }, [priority, classes, autoPriority]);
  var indicatorClass = useMemo(function () {
    var prio = priority;

    if (autoPriority && !!setAutoPriority) {
      prio = setAutoPriority;
    }

    switch (prio) {
      case Priority.High:
        return classes.high;

      case Priority.Medium:
        return classes.medium;

      case Priority.Low:
        return classes.low;

      case Priority.None:
        return classes.none;

      default:
        return classes.none;
    }
  }, [priority, autoPriority]);
  var renderChildren = useMemo(function () {
    return React.Children.map(children, function (item, index) {
      if (React.Children.count(children) === index + 1) {
        return React.cloneElement(item, {
          // @ts-ignore
          isLastChild: true,
          className: "".concat(item.props.className, " ").concat(classes.notificationContainerChild)
        });
      }

      return React.cloneElement(item, {
        // @ts-ignore
        isChild: true,
        className: "".concat(item.props.className, " ").concat(classes.notificationContainerChild)
      });
    });
  }, [children, classes.notificationContainerChild]);
  var indicatorStyles = useMemo(function () {
    var borderRadius = function borderRadius() {
      if (isChild) {
        return '0';
      }

      if (isLastChild) {
        return '0 0 0 0.25rem';
      }

      if (children && showChildren) {
        return '0.25rem 0 0 0';
      }

      return '0.25rem 0 0 0.25rem';
    };

    return {
      borderRadius: borderRadius()
    };
  }, [isChild, isLastChild, children, showChildren]);
  var passThroughProps = usePassThroughHtmlProps(props, ['onClick', 'onClose']);
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  if (!visibleState) return null;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", _extends({
    style: notificationContainerStyles,
    className: "".concat(classes.notificationContainer, " ").concat(className),
    title: tooltip,
    ref: ref
  }, passThroughProps, {
    onClick: handleNotificationClick
  }), /*#__PURE__*/React.createElement("div", {
    className: "".concat(classes.priorityIndicator, " ").concat(indicatorClass),
    style: indicatorStyles
  }), /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'flex',
      flexDirection: 'column',
      width: '100%'
    }
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.header
  }, priority && priority !== Priority.None && /*#__PURE__*/React.createElement("div", {
    className: classes.semanticIcon
  }, renderSemanticIcon), /*#__PURE__*/React.createElement("div", {
    className: "".concat(classes.title, " ").concat(truncate ? classes.titleEllipsised : '')
  }, title), !noCloseButton && /*#__PURE__*/React.createElement(Button, {
    className: classes.closeButton,
    design: ButtonDesign.Transparent,
    icon: "decline",
    onClick: handleClose
  })), /*#__PURE__*/React.createElement("div", {
    className: classes.contentAction
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.content,
    style: contentStyles
  }, renderAvatar, /*#__PURE__*/React.createElement("div", {
    className: classes.descriptionContainer
  }, /*#__PURE__*/React.createElement(Text, {
    className: !showMore ? classes.descriptionEllipsised : classes.descriptionFull,
    tooltip: description
  }, description), /*#__PURE__*/React.createElement("div", {
    className: classes.metadata
  }, /*#__PURE__*/React.createElement(Label, null, authorName), authorName && datetime && /*#__PURE__*/React.createElement("div", {
    className: classes.separator
  }, "\u2022"), /*#__PURE__*/React.createElement(Label, null, datetime)))), /*#__PURE__*/React.createElement("div", {
    className: classes.footer
  }, /*#__PURE__*/React.createElement("div", {
    style: {
      display: 'flex',
      flexDirection: 'row',
      justifyContent: 'space-between'
    }
  }, !noShowMoreButton && /*#__PURE__*/React.createElement(Button, {
    design: ButtonDesign.Transparent,
    onClick: handleShowMore
  }, i18nBundle.getText(showMore ? SHOW_LESS : SHOW_MORE)), footer))), children && /*#__PURE__*/React.createElement(Button, {
    design: ButtonDesign.Transparent,
    onClick: handleShowNotificationGroup,
    className: classes.showGroup
  }, i18nBundle.getText(showChildren ? COLLAPSE_GROUP : EXPAND_GROUP)))), showChildren ? renderChildren : null);
});
Notification.defaultProps = {
  truncate: true
};
Notification.displayName = 'Notification';

export { Notification };
//# sourceMappingURL=Notification.js.map
