import _extends from '@babel/runtime/helpers/extends';
import { addCustomCSS } from '@ui5/webcomponents-base/dist/Theming';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { useConsolidatedRef } from '@ui5/webcomponents-react-base/lib/useConsolidatedRef';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { ButtonDesign } from '@ui5/webcomponents-react/lib/ButtonDesign';
import { PlacementType } from '@ui5/webcomponents-react/lib/PlacementType';
import { ResponsivePopover } from '@ui5/webcomponents-react/lib/ResponsivePopover';
import React, { forwardRef, Children, cloneElement } from 'react';

var styles = {
  /*
   *  is being applied to the encapsulating ul element
   */
  actionSheet: {
    margin: 0,
    padding: '0.1875rem 0.375rem',
    '& ui5-button': {
      display: 'block'
    }
  }
};

var useStyles = createComponentStyles(styles, {
  name: 'ActionSheet'
});
addCustomCSS('ui5-button', "\n  :host([data-is-action-sheet-button]) .ui5-button-root {\n    justify-content: flex-start;\n  }\n  ");
/**
 * <code>import { ActionSheet } from '@ui5/webcomponents-react/lib/ActionSheet';</code>
 */

var ActionSheet = forwardRef(function (props, ref) {
  var children = props.children,
      style = props.style,
      slot = props.slot,
      className = props.className,
      allowTargetOverlap = props.allowTargetOverlap,
      headerText = props.headerText,
      horizontalAlign = props.horizontalAlign,
      initialFocus = props.initialFocus,
      modal = props.modal,
      noArrow = props.noArrow,
      placementType = props.placementType,
      verticalAlign = props.verticalAlign,
      footer = props.footer,
      header = props.header,
      onAfterClose = props.onAfterClose,
      onAfterOpen = props.onAfterOpen,
      onBeforeClose = props.onBeforeClose,
      onBeforeOpen = props.onBeforeOpen;
  var classes = useStyles();
  var actionSheetClasses = StyleClassHelper.of(classes.actionSheet);

  if (className) {
    actionSheetClasses.put(className);
  }

  var popoverRef = useConsolidatedRef(ref);

  var onActionButtonClicked = function onActionButtonClicked(handler) {
    return function (e) {
      popoverRef.current.close();

      if (typeof handler === 'function') {
        handler(e);
      }
    };
  };

  var renderActionSheetButton = function renderActionSheetButton(element, index) {
    return cloneElement(element, {
      key: index,
      design: ButtonDesign.Transparent,
      onClick: onActionButtonClicked(element.props.onClick),
      'data-is-action-sheet-button': ''
    });
  };

  var passThroughProps = usePassThroughHtmlProps(props, ['onAfterClose', 'onAfterOpen', 'onBeforeClose', 'onBeforeOpen']);
  return /*#__PURE__*/React.createElement(ResponsivePopover, _extends({
    ref: popoverRef,
    style: style,
    slot: slot,
    className: actionSheetClasses.valueOf(),
    allowTargetOverlap: allowTargetOverlap,
    headerText: headerText,
    horizontalAlign: horizontalAlign,
    initialFocus: initialFocus,
    modal: modal,
    noArrow: noArrow,
    placementType: placementType,
    verticalAlign: verticalAlign,
    footer: footer,
    header: header,
    onAfterClose: onAfterClose,
    onAfterOpen: onAfterOpen,
    onBeforeClose: onBeforeClose,
    onBeforeOpen: onBeforeOpen
  }, passThroughProps), Children.map(children, renderActionSheetButton));
});
ActionSheet.defaultProps = {
  placement: PlacementType.Bottom
};
ActionSheet.displayName = 'ActionSheet';

export { ActionSheet };
//# sourceMappingURL=ActionSheet.js.map
