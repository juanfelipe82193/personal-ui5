import _extends from '@babel/runtime/helpers/extends';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { enrichEventWithDetails } from '@ui5/webcomponents-react-base/lib/Utils';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { List } from '@ui5/webcomponents-react/lib/List';
import { SideNavigationOpenState } from '@ui5/webcomponents-react/lib/SideNavigationOpenState';
import React, { forwardRef, useState, useEffect, useCallback, Children, cloneElement } from 'react';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';

var sideNavigationStyles = {
  sideNavigation: {
    height: '100%',
    borderRight: "0.0625rem solid ".concat(ThemingParameters.sapGroup_ContentBorderColor),
    backgroundColor: ThemingParameters.sapList_Background,
    display: 'flex',
    flexDirection: 'column',
    transition: 'width 500ms'
  },
  expanded: {
    width: '15rem'
  },
  condensed: {
    width: '3rem',
    '& $footerItemsSeparator': {
      marginLeft: '0.5rem',
      marginRight: '0.5rem'
    }
  },
  collapsed: {
    width: '15rem',
    marginLeft: '-15.0625rem'
  },
  footerItemsSeparator: {
    margin: '0.25rem 0.875rem',
    height: '0.125rem',
    backgroundColor: ThemingParameters.sapList_BorderColor
  }
};

var lastFiredSelection = '';
var useStyles = createComponentStyles(sideNavigationStyles, {
  name: 'SideNavigation'
});
/**
 * <code>import { SideNavigation } from '@ui5/webcomponents-react/lib/SideNavigation';</code>
 */

var SideNavigation = forwardRef(function (props, ref) {
  var children = props.children,
      openState = props.openState,
      footerItems = props.footerItems,
      selectedId = props.selectedId,
      onItemSelect = props.onItemSelect,
      onItemClick = props.onItemClick,
      noIcons = props.noIcons,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip;
  var classes = useStyles();

  var _useState = useState(selectedId),
      _useState2 = _slicedToArray(_useState, 2),
      internalSelectedId = _useState2[0],
      setInternalSelectedId = _useState2[1];

  useEffect(function () {
    setInternalSelectedId(selectedId);
  }, [selectedId, setInternalSelectedId]);
  var sideNavigationClasses = StyleClassHelper.of(classes.sideNavigation);

  switch (openState) {
    case SideNavigationOpenState.Expanded:
      {
        sideNavigationClasses.put(classes.expanded);
        break;
      }

    case SideNavigationOpenState.Condensed:
      {
        sideNavigationClasses.put(classes.condensed);
        break;
      }

    case SideNavigationOpenState.Collapsed:
      {
        sideNavigationClasses.put(classes.collapsed);
        break;
      }
  }

  if (className) {
    sideNavigationClasses.put(className);
  }

  var onListItemSelected = useCallback(function (e) {
    var listItem = e.detail.item;
    onItemClick(enrichEventWithDetails(e, {
      selectedItem: listItem,
      selectedId: listItem.dataset.id
    }));

    if (lastFiredSelection === listItem.dataset.id) {
      return;
    }

    setInternalSelectedId(listItem.dataset.id);
    onItemSelect(enrichEventWithDetails(e, {
      selectedItem: listItem,
      selectedId: listItem.dataset.id
    }));
    lastFiredSelection = listItem.dataset.id;
  }, [onItemSelect, onItemClick, setInternalSelectedId]);
  var passThroughProps = usePassThroughHtmlProps(props, ['onItemSelect', 'onItemClick']);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: sideNavigationClasses.valueOf(),
    style: style,
    title: tooltip
  }, passThroughProps), /*#__PURE__*/React.createElement(List, {
    onItemClick: onListItemSelected
  }, Children.map(children, function (child) {
    return cloneElement(child, {
      openState: openState,
      selectedId: internalSelectedId,
      noIcons: noIcons,
      onListItemSelected: onListItemSelected
    });
  })), /*#__PURE__*/React.createElement("span", {
    style: {
      flexGrow: 1
    }
  }), footerItems.length > 0 && /*#__PURE__*/React.createElement("span", {
    className: classes.footerItemsSeparator
  }), footerItems && /*#__PURE__*/React.createElement(List, {
    onItemClick: onListItemSelected
  }, footerItems.map(function (item, index) {
    return cloneElement(item, {
      openState: openState,
      key: index,
      selectedId: internalSelectedId,
      noIcons: noIcons,
      onListItemSelected: onListItemSelected
    });
  })));
});
SideNavigation.displayName = 'SideNavigation';
SideNavigation.defaultProps = {
  openState: SideNavigationOpenState.Expanded,
  footerItems: [],
  selectedId: null,
  onItemClick: function onItemClick() {},
  onItemSelect: function onItemSelect() {}
};

export { SideNavigation };
//# sourceMappingURL=SideNavigation.js.map
