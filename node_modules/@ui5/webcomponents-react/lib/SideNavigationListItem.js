import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import '@ui5/webcomponents-icons/dist/icons/navigation-down-arrow.js';
import '@ui5/webcomponents-icons/dist/icons/navigation-right-arrow.js';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { CustomListItem } from '@ui5/webcomponents-react/lib/CustomListItem';
import { Icon } from '@ui5/webcomponents-react/lib/Icon';
import { List } from '@ui5/webcomponents-react/lib/List';
import { Popover } from '@ui5/webcomponents-react/lib/Popover';
import { PopoverVerticalAlign } from '@ui5/webcomponents-react/lib/PopoverVerticalAlign';
import { SideNavigationOpenState } from '@ui5/webcomponents-react/lib/SideNavigationOpenState';
import { StandardListItem } from '@ui5/webcomponents-react/lib/StandardListItem';
import { Text } from '@ui5/webcomponents-react/lib/Text';
import React, { forwardRef, useState, useCallback, Children, useEffect, useRef, useMemo, cloneElement } from 'react';
import { createPortal } from 'react-dom';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { CssSizeVariables } from '@ui5/webcomponents-react-base/lib/CssSizeVariables';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';

var sideNavigationListItemStyles = {
  listItem: {
    '&:active': {
      '--sapTextColor': ThemingParameters.sapList_Active_TextColor,
      '& $icon, & $expandArrow': {
        '--sapContent_NonInteractiveIconColor': ThemingParameters.sapList_Active_TextColor
      }
    }
  },
  noIcons: {
    '& $text': {
      paddingLeft: '1rem'
    },
    '&[data-is-child] $text': {
      paddingLeft: '2rem'
    },
    boxSizing: 'border-box'
  },
  icon: {
    '--sapContent_NonInteractiveIconColor': ThemingParameters.sapContent_IconColor,
    width: CssSizeVariables.sapWcrSideNavigationItemIconSize,
    height: CssSizeVariables.sapWcrSideNavigationItemIconSize,
    padding: CssSizeVariables.sapWcrSideNavigationItemIconPadding,
    pointerEvents: 'none'
  },
  text: {},
  expandArrow: {
    '--sapContent_NonInteractiveIconColor': ThemingParameters.sapContent_IconColor,
    width: '0.875rem',
    height: '0.875rem',
    padding: CssSizeVariables.sapWcrSideNavigationItemExpandedArrowPadding,
    marginLeft: 'auto'
  },
  expanded: {
    '--ui5-listitem-border-bottom': 'none'
  },
  condensedExpandTriangle: {
    width: '0',
    height: '0',
    borderStyle: 'solid',
    borderWidth: '0 0 6px 6px',
    borderColor: "transparent transparent ".concat(ThemingParameters.sapContent_IconColor, " transparent"),
    position: 'absolute',
    right: '0.125rem',
    bottom: '0.1875rem'
  }
};

var useStyles = createComponentStyles(sideNavigationListItemStyles, {
  name: 'SideNavigationListItem'
});
/**
 * <code>import { SideNavigationListItem } from '@ui5/webcomponents-react/lib/SideNavigationListItem';</code>
 */

var SideNavigationListItem = forwardRef(function (props, ref) {
  var icon = props.icon,
      text = props.text,
      id = props.id,
      children = props.children,
      tooltip = props.tooltip,
      slot = props.slot,
      className = props.className,
      style = props.style;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isExpanded = _useState2[0],
      setExpanded = _useState2[1];

  var handleToggleExpand = useCallback(function () {
    setExpanded(!isExpanded);
  }, [isExpanded, setExpanded]);
  var classes = useStyles();
  var listItemClasses = StyleClassHelper.of(classes.listItem);

  if (className) {
    listItemClasses.put(className);
  }

  if (isExpanded) {
    listItemClasses.put(classes.expanded);
  }

  var noIcons = props['noIcons'];

  if (noIcons) {
    listItemClasses.put(classes.noIcons);
  }

  var childCount = Children.count(children);
  var validChildren = Children.toArray(children).filter(Boolean);
  var isOpenStateExpanded = props['openState'] === SideNavigationOpenState.Expanded;
  useEffect(function () {
    if (validChildren.length) {
      var selectedElement = validChildren.find(function (child) {
        return child.props.id === props['selectedId'];
      });

      if (selectedElement) {
        setExpanded(isOpenStateExpanded);
      }
    }
  }, [props['selectedId'], id, children, setExpanded, isOpenStateExpanded]);
  var isSelfSelected = props['selectedId'] === id;
  var hasSelectedChild = !isOpenStateExpanded && childCount > 0 && !!validChildren.find(function (child) {
    return child.props.id === props['selectedId'];
  });
  var passThroughProps = usePassThroughHtmlProps(props);

  var customListItemCommonProps = _objectSpread({
    ref: ref,
    className: listItemClasses.valueOf(),
    tooltip: tooltip,
    slot: slot,
    style: style,
    'data-id': id,
    'data-has-children': childCount > 0,
    'data-is-child': props['isChild']
  }, passThroughProps);

  var popoverRef = useRef();
  var displayedIcon = useMemo(function () {
    return /*#__PURE__*/React.createElement(Icon, {
      name: icon,
      className: classes.icon
    });
  }, [classes.icon, icon]);
  var handleOpenPopover = useCallback(function (e) {
    // @ts-ignore
    popoverRef.current.openBy(e.target);
  }, [popoverRef.current]);

  if (isOpenStateExpanded) {
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CustomListItem, _extends({
      selected: isSelfSelected
    }, customListItemCommonProps), icon && !noIcons && displayedIcon, !icon && !noIcons && /*#__PURE__*/React.createElement("span", {
      className: classes.icon
    }), /*#__PURE__*/React.createElement(Text, {
      className: classes.text
    }, text), childCount > 0 && /*#__PURE__*/React.createElement("span", {
      onClick: handleToggleExpand,
      className: classes.expandArrow
    }, /*#__PURE__*/React.createElement(Icon, {
      name: isExpanded ? 'navigation-down-arrow' : 'navigation-right-arrow'
    }))), isExpanded && validChildren.map(function (child, index) {
      var style = child.props.style || {};

      if (index !== childCount - 1) {
        style['--ui5-listitem-border-bottom'] = 'none';
      }

      return cloneElement(child, {
        icon: null,
        style: style,
        openState: props['openState'],
        selectedId: props['selectedId'],
        noIcons: noIcons,
        isChild: true
      });
    }));
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CustomListItem, _extends({
    selected: isSelfSelected || hasSelectedChild
  }, customListItemCommonProps), childCount > 0 ? /*#__PURE__*/React.createElement("span", {
    onClick: handleOpenPopover
  }, displayedIcon, /*#__PURE__*/React.createElement("div", {
    className: classes.condensedExpandTriangle
  }), createPortal( /*#__PURE__*/React.createElement(Popover, {
    ref: popoverRef,
    verticalAlign: PopoverVerticalAlign.Top
  }, /*#__PURE__*/React.createElement(List, {
    onItemClick: props['onListItemSelected']
  }, /*#__PURE__*/React.createElement(StandardListItem, {
    selected: isSelfSelected,
    "data-id": id,
    tooltip: tooltip
  }, text), validChildren.map(function (child, index) {
    return /*#__PURE__*/React.createElement(StandardListItem, {
      selected: props['selectedId'] === child.props.id,
      key: index,
      "data-id": child.props.id,
      "data-parent-id": id,
      tooltip: child.props.tooltip || child.props.text
    }, child.props.text);
  }))), document.body)) : displayedIcon));
});
SideNavigationListItem.displayName = 'SideNavigationListItem';
SideNavigationListItem.defaultProps = {};

export { SideNavigationListItem };
//# sourceMappingURL=SideNavigationListItem.js.map
