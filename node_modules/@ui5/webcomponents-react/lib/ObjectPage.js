import _extends from '@babel/runtime/helpers/extends';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { useConsolidatedRef } from '@ui5/webcomponents-react-base/lib/useConsolidatedRef';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { enrichEventWithDetails, getScrollBarWidth } from '@ui5/webcomponents-react-base/lib/Utils';
import { useDeprecateRenderMethods } from '@ui5/webcomponents-react-base/lib/hooks';
import { FlexBox } from '@ui5/webcomponents-react/lib/FlexBox';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/lib/FlexBoxAlignItems';
import { FlexBoxDirection } from '@ui5/webcomponents-react/lib/FlexBoxDirection';
import { GlobalStyleClasses } from '@ui5/webcomponents-react/lib/GlobalStyleClasses';
import { Label } from '@ui5/webcomponents-react/lib/Label';
import { ObjectPageMode } from '@ui5/webcomponents-react/lib/ObjectPageMode';
import { Title } from '@ui5/webcomponents-react/lib/Title';
import { TitleLevel } from '@ui5/webcomponents-react/lib/TitleLevel';
import debounce from 'lodash.debounce';
import React, { useState, useRef, useMemo, useEffect, Children, forwardRef, useCallback } from 'react';
import { AvatarSize } from '@ui5/webcomponents-react/lib/AvatarSize';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { addCustomCSS } from '@ui5/webcomponents-base/dist/Theming';
import '@ui5/webcomponents-icons/dist/icons/pushpin-off';
import '@ui5/webcomponents-icons/dist/icons/slim-arrow-down';
import '@ui5/webcomponents-icons/dist/icons/slim-arrow-up';
import { Button } from '@ui5/webcomponents-react/lib/Button';
import { List } from '@ui5/webcomponents-react/lib/List';
import { PlacementType } from '@ui5/webcomponents-react/lib/PlacementType';
import { Popover } from '@ui5/webcomponents-react/lib/Popover';
import { TabContainer } from '@ui5/webcomponents-react/lib/TabContainer';
import { ToggleButton } from '@ui5/webcomponents-react/lib/ToggleButton';
import { createUseStyles } from 'react-jss';
import { ListItemTypes } from '@ui5/webcomponents-react/lib/ListItemTypes';
import { ValueState } from '@ui5/webcomponents-react/lib/ValueState';
import { withWebComponent } from '@ui5/webcomponents-react/lib/withWebComponent';
import '@ui5/webcomponents/dist/StandardListItem';
import { Tab } from '@ui5/webcomponents-react/lib/Tab';
import _toArray from '@babel/runtime/helpers/toArray';

var styles = {
  base: {
    margin: 'var(--_ui5wcr_ObjectPage_avatar_margin)',
    // defined in ObjectPage JSS
    opacity: 0
  },
  hidden: {
    opacity: 0
  },
  visible: {
    transition: 'opacity 0.5s',
    opacity: 1
  },
  imageContainer: {
    display: 'inline-block',
    verticalAlign: 'middle',
    maxWidth: '3rem',
    maxHeight: '3rem'
  },
  image: {
    width: '100%',
    height: '100%'
  }
};
var useStyles = createComponentStyles(styles, {
  name: 'CollapsedAvatar'
});
var CollapsedAvatar = function CollapsedAvatar(props) {
  var image = props.image,
      imageShapeCircle = props.imageShapeCircle;
  var classes = useStyles();

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isMounted = _useState2[0],
      setIsMounted = _useState2[1];

  var domRef = useRef();
  var avatarContent = useMemo(function () {
    if (!image) return null;

    if (typeof image === 'string') {
      return /*#__PURE__*/React.createElement("span", {
        className: classes.imageContainer,
        style: {
          borderRadius: imageShapeCircle ? '50%' : 0,
          overflow: 'hidden'
        }
      }, /*#__PURE__*/React.createElement("img", {
        className: classes.image,
        src: image,
        alt: "Object Page Image"
      }));
    } else {
      var _image$props, _image$props2;

      return React.cloneElement(image, {
        size: AvatarSize.S,
        // @ts-ignore
        className: ((_image$props = image.props) === null || _image$props === void 0 ? void 0 : _image$props.className) ? "".concat(classes.imageContainer, " ").concat((_image$props2 = image.props) === null || _image$props2 === void 0 ? void 0 : _image$props2.className) : classes.imageContainer
      });
    }
  }, [image, imageShapeCircle]);
  useEffect(function () {
    setIsMounted(true);
  }, []);
  var containerClasses = StyleClassHelper.of(classes.base);

  if (isMounted) {
    containerClasses.put(classes.visible);
  } else {
    containerClasses.put(classes.hidden);
  }

  return /*#__PURE__*/React.createElement("div", {
    ref: domRef,
    className: containerClasses.valueOf()
  }, avatarContent);
};

var _globalHtml, _globalDirRtl;
var ObjectPageCssVariables = {
  anchorFloat: '--_ui5wcr_ObjectPage_actions_float',
  anchorLeft: '--_ui5wcr_ObjectPage_actions_left',
  anchorRight: '--_ui5wcr_ObjectPage_actions_right',
  avatarMargin: '--_ui5wcr_ObjectPage_avatar_margin'
};
var styles$1 = {
  objectPage: {
    width: '100%',
    height: '100%',
    maxHeight: '100vh',
    position: 'relative',
    whiteSpace: 'normal',
    fontFamily: ThemingParameters.sapFontFamily,
    backgroundColor: ThemingParameters.sapBackgroundColor,
    overflowX: 'hidden',
    overflowY: 'auto',
    '& section[id*="ObjectPageSection-"] > div[role="heading"]': {
      display: 'none'
    },
    // explanation why first-child selector is not sufficient here:
    // https://stackoverflow.com/questions/7128406/css-select-the-first-child-from-elements-with-particular-attribute
    '& section[id*="ObjectPageSection-"] ~ section[id*="ObjectPageSection-"] > div[role="heading"]': {
      display: 'block'
    }
  },
  '@global html': (_globalHtml = {}, _defineProperty(_globalHtml, ObjectPageCssVariables.anchorFloat, 'right'), _defineProperty(_globalHtml, ObjectPageCssVariables.anchorRight, '1.25rem'), _defineProperty(_globalHtml, ObjectPageCssVariables.anchorLeft, 'unset'), _defineProperty(_globalHtml, ObjectPageCssVariables.avatarMargin, '0 1rem 0 0'), _globalHtml),
  '@global [dir="rtl"]': (_globalDirRtl = {}, _defineProperty(_globalDirRtl, ObjectPageCssVariables.anchorFloat, 'left'), _defineProperty(_globalDirRtl, ObjectPageCssVariables.anchorRight, 'unset'), _defineProperty(_globalDirRtl, ObjectPageCssVariables.anchorLeft, '1.25rem'), _defineProperty(_globalDirRtl, ObjectPageCssVariables.avatarMargin, '0 0 0 1rem'), _globalDirRtl),
  iconTabBarMode: {
    '& section[data-component-name="ObjectPageSection"] > div[role="heading"]': {
      display: 'none'
    }
  },
  noHeader: {
    '& $header': {
      display: 'none'
    },
    '& $contentHeader': {
      display: 'none'
    }
  },
  headerCollapsed: {
    '& $contentHeader': {
      display: 'none'
    }
  },
  // header
  header: {
    flexShrink: 0,
    backgroundColor: ThemingParameters.sapObjectHeader_Background,
    position: 'sticky',
    top: 0,
    zIndex: 2
  },
  contentHeader: {
    backgroundColor: ThemingParameters.sapObjectHeader_Background,
    position: 'sticky',
    paddingBottom: '0.25rem',
    maxHeight: '500px',
    overflow: 'hidden',
    paddingLeft: '2rem'
  },
  anchorBar: {
    position: 'sticky',
    zIndex: 2,
    '--_ui5_tc_header_box_shadow': 'inset 0px -1px 0 0px rgba(0,0,0,0.15)'
  },
  titleBar: {
    padding: '0.5rem 2rem',
    display: 'block',
    position: 'relative'
  },
  container: {
    width: '70%',
    boxSizing: 'border-box'
  },
  title: {
    padding: '0.3125rem 0 0 0'
  },
  subTitle: {
    verticalAlign: 'baseline',
    padding: '0 0 0.5rem 0.5rem'
  },
  actions: {
    position: 'absolute',
    top: '0',
    paddingTop: '0.75rem',
    zIndex: 1,
    right: "var(".concat(ObjectPageCssVariables.anchorRight, ")"),
    left: "var(".concat(ObjectPageCssVariables.anchorLeft, ")"),
    display: 'inline-block',
    "float": "var(".concat(ObjectPageCssVariables.anchorFloat, ")"),
    verticalAlign: 'top',
    '& > *': {
      marginLeft: '0.5rem',
      padding: 0
    }
  },
  titleInHeaderContent: {
    '& $subTitle': {
      padding: '0.5rem 0'
    },
    '& $keyInfos': {
      alignSelf: 'unset'
    },
    '& contentHeader': {
      paddingTop: 0,
      '& > *': {
        display: 'flex',
        verticalAlign: 'top',
        '&:not(:first-child)': {
          marginRight: '2rem',
          marginBottom: '1rem'
        }
      }
    }
  },
  headerCustomContent: {
    display: 'inline-block',
    verticalAlign: 'top',
    '& > *': {
      "float": 'left',
      marginRight: '2rem',
      marginBottom: '1rem',
      lineHeight: '1.5rem'
    },
    '&:after': {
      clear: 'both'
    }
  },
  headerCustomContentItem: {
    marginLeft: '1rem'
  },
  headerImage: {
    maxWidth: '5rem',
    maxHeight: '5rem',
    display: 'inline-block',
    marginRight: '2rem',
    marginBottom: '1rem'
  },
  image: {
    width: '100%',
    height: '100%'
  },
  keyInfos: {
    '& > *': {
      marginLeft: '1rem'
    },
    display: 'flex',
    flexDirection: 'row',
    alignSelf: 'center'
  },
  avatar: {
    margin: "var(".concat(ObjectPageCssVariables.avatarMargin, ")")
  }
};

/**
 * <code>import { StandardListItem } from '@ui5/webcomponents-react/lib/StandardListItem';</code>
 * <br />
 * <a href="https://sap.github.io/ui5-webcomponents/playground/components/StandardListItem" target="_blank">UI5 Web Components Playground</a>
 */
var StandardListItem = withWebComponent('ui5-li', ['description', 'icon', 'image', 'info', 'infoState', 'type'], ['iconEnd', 'selected'], [], []);
StandardListItem.displayName = 'StandardListItem';
StandardListItem.defaultProps = {
  iconEnd: false,
  infoState: ValueState.None,
  type: ListItemTypes.Active,
  selected: false
};

var ObjectPageAnchorButton = function ObjectPageAnchorButton(props) {
  var ref = useRef();
  var section = props.section,
      index = props.index,
      selected = props.selected,
      onShowSubSectionPopover = props.onShowSubSectionPopover;
  var subSectionsAvailable = false;

  if (section.props.children && section.props.children.filter) {
    var subSections = section.props.children.filter(function (item) {
      return item.props && item.props.isSubSection;
    });
    subSectionsAvailable = subSections.length > 0;
  }

  useEffect(function () {
    if (subSectionsAvailable) {
      try {
        var _ref$current, _ref$current$parentEl, _ref$current$parentEl2;

        var element = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : (_ref$current$parentEl = _ref$current.parentElement) === null || _ref$current$parentEl === void 0 ? void 0 : (_ref$current$parentEl2 = _ref$current$parentEl.shadowRoot) === null || _ref$current$parentEl2 === void 0 ? void 0 : _ref$current$parentEl2.querySelector(".ui5-tc__headerList li[aria-posinset=\"".concat(index + 1, "\"] .ui5-tc__headerItemContent"));

        if (element && !element.querySelector('ui5-icon')) {
          var icon = document.createElement('ui5-icon');
          icon.name = 'slim-arrow-down';
          icon.style.verticalAlign = 'text-bottom';
          icon.style.pointerEvents = 'all';
          icon.addEventListener('click', function (e) {
            e.stopImmediatePropagation();
            e.preventDefault();
            e.stopPropagation();
            onShowSubSectionPopover(e, section);
          });
          element.appendChild(icon);
        }
      } catch (e) {// empty catch block, mainly required for tests
      }
    }
  }, [subSectionsAvailable, ref, onShowSubSectionPopover, section]);
  return /*#__PURE__*/React.createElement(Tab, {
    ref: ref,
    "data-index": index,
    "data-section-id": section.props.id,
    text: section.props.title,
    selected: selected
  });
};

var safeGetChildrenArray = function safeGetChildrenArray(children) {
  return Children.toArray(children).filter(Boolean);
}; // export const findSectionIndexById = (sections: ReactElement<any> | Array<ReactElement<any>>, id) => {
//   const index = safeGetChildrenArray(sections).findIndex((objectPageSection) => objectPageSection.props?.id === id);
//   if (index === -1) {
//     return 0;
//   }
//   return index;
// };

var getSectionById = function getSectionById(sections, id) {
  return safeGetChildrenArray(sections).find(function (objectPageSection) {
    var _objectPageSection$pr;

    return ((_objectPageSection$pr = objectPageSection.props) === null || _objectPageSection$pr === void 0 ? void 0 : _objectPageSection$pr.id) === id;
  });
}; // export const getProportionateScrollTop = (activeContainer, passiveContainer, base) => {
//   const activeHeight = activeContainer.current.getBoundingClientRect().height;
//   const passiveHeight = passiveContainer.current.getBoundingClientRect().height;
//
//   return (base / activeHeight) * passiveHeight;
// };
//
// export const bindScrollEvent = (scrollContainer, handler) => {
//   if (scrollContainer.current && handler.current) {
//     scrollContainer.current.addEventListener('scroll', handler.current, { passive: true });
//   }
// };
//
// export const removeScrollEvent = (scrollContainer, handler) => {
//   if (scrollContainer.current && handler.current) {
//     scrollContainer.current.removeEventListener('scroll', handler.current);
//   }
// };

var extractSectionIdFromHtmlId = function extractSectionIdFromHtmlId(id) {
  return id.replace(/^ObjectPageSection-/, '');
};

addCustomCSS('ui5-button', "\n:host([data-ui5wcr-object-page-header-action]) .ui5-button-root {\n padding: 0;\n}");
addCustomCSS('ui5-togglebutton', "\n:host([data-ui5wcr-object-page-header-action]) .ui5-button-root {\n padding: 0;\n}");
var anchorBarStyles = {
  anchorBarActionButton: {
    position: 'absolute',
    '--_ui5_button_compact_height': '1.375rem',
    '--_ui5_button_base_height': '1.375rem',
    '--_ui5_button_base_min_width': '1.375rem',
    '--_ui5_button_base_min_compact_width': '1.375rem',
    top: "-0.6875rem",
    marginLeft: "-0.6875rem",
    left: '50%',
    '&:before, &:after': {
      content: '""',
      position: 'absolute',
      width: '4rem',
      top: '50%',
      height: '0.0625rem'
    },
    '&:before': {
      right: '100%',
      backgroundImage: "linear-gradient(to left, ".concat(ThemingParameters.sapHighlightColor, ", rgba(8,84,160,0))")
    },
    '&:after': {
      backgroundImage: "linear-gradient(to right, ".concat(ThemingParameters.sapHighlightColor, ", rgba(8,84,160,0))"),
      left: '100%'
    }
  },
  anchorBarActionButtonExpandable: {},
  anchorBarActionButtonPinnable: {},
  anchorBarActionPinnableAndExandable: {
    '&$anchorBarActionButtonPinnable': {
      marginLeft: '0.25rem',
      '&:before': {
        backgroundImage: 'none'
      }
    },
    '&$anchorBarActionButtonExpandable': {
      marginLeft: '-1.75rem'
    }
  }
};
var useStyles$1 = createUseStyles(anchorBarStyles, {
  name: 'ObjectPageAnchorBar'
});
var ObjectPageAnchorBar = forwardRef(function (props, ref) {
  var _popoverContent$props;

  var sections = props.sections,
      selectedSectionId = props.selectedSectionId,
      handleOnSectionSelected = props.handleOnSectionSelected,
      handleOnSubSectionSelected = props.handleOnSubSectionSelected,
      showHideHeaderButton = props.showHideHeaderButton,
      headerContentPinnable = props.headerContentPinnable,
      onToggleHeaderContentVisibility = props.onToggleHeaderContentVisibility,
      headerPinned = props.headerPinned,
      setHeaderPinned = props.setHeaderPinned,
      headerContentHeight = props.headerContentHeight,
      style = props.style,
      className = props.className;
  var classes = useStyles$1();
  var shouldRenderHideHeaderButton = showHideHeaderButton;
  var shouldRenderHeaderPinnableButton = headerContentPinnable && headerContentHeight > 0;
  var showBothActions = shouldRenderHeaderPinnableButton && shouldRenderHideHeaderButton;

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      popoverContent = _useState2[0],
      setPopoverContent = _useState2[1];

  var popoverRef = useRef(null);
  var onPinHeader = useCallback(function (e) {
    setHeaderPinned(e.detail.pressed);
  }, [setHeaderPinned]);
  var onTabItemSelect = useCallback(function (event) {
    var _event$detail$tab$dat = event.detail.tab.dataset,
        sectionId = _event$detail$tab$dat.sectionId,
        index = _event$detail$tab$dat.index; // eslint-disable-next-line eqeqeq

    var section = safeGetChildrenArray(sections).find(function (el) {
      return el.props.id == sectionId;
    });
    handleOnSectionSelected(enrichEventWithDetails({}, _objectSpread(_objectSpread({}, section), {}, {
      index: index
    })));
  }, []);
  var onShowSubSectionPopover = useCallback(function (e, section) {
    setPopoverContent(section);
    popoverRef.current.openBy(e.target.parentElement);
  }, [setPopoverContent, popoverRef]);
  var onSubSectionClick = useCallback(function (e) {
    var selectedId = e.detail.item.dataset.key;
    var subSection = popoverContent.props.children.filter(function (item) {
      return item.props && item.props.isSubSection;
    }).find(function (item) {
      return item.props.id === selectedId;
    });

    if (subSection) {
      handleOnSubSectionSelected(enrichEventWithDetails(e, {
        section: popoverContent,
        subSection: subSection
      }));
    }

    popoverRef.current.close();
  }, [handleOnSubSectionSelected, popoverRef, popoverContent]);
  return /*#__PURE__*/React.createElement("section", {
    className: className,
    role: "navigation",
    style: style,
    ref: ref
  }, /*#__PURE__*/React.createElement(TabContainer, {
    collapsed: true,
    fixed: true,
    onTabSelect: onTabItemSelect,
    showOverflow: true
  }, safeGetChildrenArray(sections).map(function (section, index) {
    var _section$props, _section$props2;

    return /*#__PURE__*/React.createElement(ObjectPageAnchorButton, {
      key: "Anchor-".concat((_section$props = section.props) === null || _section$props === void 0 ? void 0 : _section$props.id),
      section: section,
      index: index,
      selected: selectedSectionId === ((_section$props2 = section.props) === null || _section$props2 === void 0 ? void 0 : _section$props2.id),
      onShowSubSectionPopover: onShowSubSectionPopover
    });
  })), shouldRenderHideHeaderButton && /*#__PURE__*/React.createElement(Button, {
    icon: headerContentHeight === 0 ? 'slim-arrow-down' : 'slim-arrow-up',
    onClick: onToggleHeaderContentVisibility,
    className: "".concat(classes.anchorBarActionButton, " ").concat(classes.anchorBarActionButtonExpandable, " ").concat(showBothActions ? classes.anchorBarActionPinnableAndExandable : ''),
    "data-ui5wcr-object-page-header-action": ""
  }), shouldRenderHeaderPinnableButton && /*#__PURE__*/React.createElement(ToggleButton, {
    icon: "pushpin-off",
    pressed: headerPinned,
    onClick: onPinHeader,
    className: "".concat(classes.anchorBarActionButton, " ").concat(classes.anchorBarActionButtonPinnable, " ").concat(showBothActions ? classes.anchorBarActionPinnableAndExandable : ''),
    "data-ui5wcr-object-page-header-action": ""
  }), /*#__PURE__*/React.createElement(Popover, {
    placementType: PlacementType.Bottom,
    noArrow: true,
    ref: popoverRef
  }, /*#__PURE__*/React.createElement(List, {
    onItemClick: onSubSectionClick
  }, popoverContent === null || popoverContent === void 0 ? void 0 : (_popoverContent$props = popoverContent.props) === null || _popoverContent$props === void 0 ? void 0 : _popoverContent$props.children.filter(function (item) {
    return item.props && item.props.isSubSection;
  }).map(function (item) {
    return /*#__PURE__*/React.createElement(StandardListItem, {
      key: item.props.id,
      "data-key": item.props.id
    }, item.props.title);
  }))));
});
ObjectPageAnchorBar.displayName = 'ObjectPageAnchorBar';

var ObjectPageHeader = forwardRef(function (props, ref) {
  var image = props.image,
      classes = props.classes,
      imageShapeCircle = props.imageShapeCircle,
      showTitleInHeaderContent = props.showTitleInHeaderContent,
      headerContentProp = props.headerContentProp,
      breadcrumbs = props.breadcrumbs,
      title = props.title,
      subTitle = props.subTitle,
      keyInfos = props.keyInfos,
      headerPinned = props.headerPinned,
      topHeaderHeight = props.topHeaderHeight;
  var avatar = useMemo(function () {
    if (!image) {
      return null;
    }

    if (typeof image === 'string') {
      return /*#__PURE__*/React.createElement("span", {
        className: classes.headerImage,
        style: {
          borderRadius: imageShapeCircle ? '50%' : 0,
          overflow: 'hidden'
        }
      }, /*#__PURE__*/React.createElement("img", {
        src: image,
        className: classes.image,
        alt: "Company Logo"
      }));
    } else {
      var _image$props, _image$props2;

      return React.cloneElement(image, {
        size: AvatarSize.L,
        className: ((_image$props = image.props) === null || _image$props === void 0 ? void 0 : _image$props.className) ? "".concat(classes.headerImage, " ").concat((_image$props2 = image.props) === null || _image$props2 === void 0 ? void 0 : _image$props2.className) : classes.headerImage
      });
    }
  }, [image, classes.headerImage, classes.image, imageShapeCircle]);
  var headerStyles = useMemo(function () {
    if (headerPinned) {
      return {
        top: "".concat(topHeaderHeight, "px"),
        zIndex: 1
      };
    }

    return null;
  }, [headerPinned, topHeaderHeight]);
  var renderedHeaderContent = /*#__PURE__*/React.createElement(React.Fragment, null, avatar, headerContentProp && /*#__PURE__*/React.createElement("span", {
    className: classes.headerCustomContent
  }, headerContentProp));

  if (showTitleInHeaderContent) {
    var firstElement;
    var contents = [];

    if ((headerContentProp === null || headerContentProp === void 0 ? void 0 : headerContentProp.type) === React.Fragment) {
      var _safeGetChildrenArray = safeGetChildrenArray(headerContentProp.props.children);

      var _safeGetChildrenArray2 = _toArray(_safeGetChildrenArray);

      firstElement = _safeGetChildrenArray2[0];
      contents = _safeGetChildrenArray2.slice(1);
    } else {
      firstElement = headerContentProp;
    }

    renderedHeaderContent = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(FlexBox, null, avatar, /*#__PURE__*/React.createElement(FlexBox, {
      direction: FlexBoxDirection.Column
    }, /*#__PURE__*/React.createElement("div", null, breadcrumbs), /*#__PURE__*/React.createElement(FlexBox, null, /*#__PURE__*/React.createElement(FlexBox, {
      direction: FlexBoxDirection.Column
    }, /*#__PURE__*/React.createElement(Title, {
      level: TitleLevel.H3,
      className: classes.title
    }, title), /*#__PURE__*/React.createElement(Label, {
      className: classes.subTitle
    }, subTitle), /*#__PURE__*/React.createElement("span", null, " ", firstElement)), /*#__PURE__*/React.createElement(FlexBox, null, contents.map(function (c, index) {
      return /*#__PURE__*/React.createElement("div", {
        key: "customContent-".concat(index),
        className: classes.headerCustomContentItem
      }, c);
    })), /*#__PURE__*/React.createElement("div", {
      className: classes.keyInfos
    }, keyInfos)))));
  }

  return /*#__PURE__*/React.createElement("div", {
    style: headerStyles,
    className: classes.contentHeader,
    ref: ref
  }, renderedHeaderContent);
});
ObjectPageHeader.displayName = 'ObjectPageHeader';

var useObserveHeights = function useObserveHeights(objectPage, topHeader, headerContentRef, anchorBarRef, _ref) {
  var _anchorBarRef$current, _anchorBarRef$current2;

  var noHeader = _ref.noHeader;

  var _useState = useState(0),
      _useState2 = _slicedToArray(_useState, 2),
      topHeaderHeight = _useState2[0],
      setTopHeaderHeight = _useState2[1];

  var _useState3 = useState(0),
      _useState4 = _slicedToArray(_useState3, 2),
      headerContentHeight = _useState4[0],
      setHeaderContentHeight = _useState4[1];

  useEffect(function () {
    var headerIntersectionObserver = new IntersectionObserver(function (_ref2) {
      var _ref3 = _slicedToArray(_ref2, 1),
          header = _ref3[0];

      if (header.isIntersecting) {
        setHeaderContentHeight(header.target.offsetHeight);
      } else {
        setHeaderContentHeight(0);
      }
    }, {
      rootMargin: "-".concat(topHeaderHeight, "px 0px 0px 0px"),
      root: objectPage.current,
      threshold: 0.5
    });

    if (headerContentRef.current) {
      headerIntersectionObserver.observe(headerContentRef.current);
    }

    return function () {
      headerIntersectionObserver.disconnect();
    };
  }, [topHeaderHeight, setHeaderContentHeight, headerContentRef]); // top header

  useEffect(function () {
    var headerContentResizeObserver = new ResizeObserver(function (_ref4) {
      var _header$contentRect$h, _header$contentRect;

      var _ref5 = _slicedToArray(_ref4, 1),
          header = _ref5[0];

      setTopHeaderHeight((_header$contentRect$h = header === null || header === void 0 ? void 0 : (_header$contentRect = header.contentRect) === null || _header$contentRect === void 0 ? void 0 : _header$contentRect.height) !== null && _header$contentRect$h !== void 0 ? _header$contentRect$h : 0);
    });

    if (topHeader.current) {
      headerContentResizeObserver.observe(topHeader.current);
    }

    return function () {
      headerContentResizeObserver.disconnect();
    };
  }, [topHeader.current, setHeaderContentHeight]); // header content

  useEffect(function () {
    var headerContentResizeObserver = new ResizeObserver(function (_ref6) {
      var _headerContent$conten, _headerContent$conten2;

      var _ref7 = _slicedToArray(_ref6, 1),
          headerContent = _ref7[0];

      setHeaderContentHeight((_headerContent$conten = headerContent === null || headerContent === void 0 ? void 0 : (_headerContent$conten2 = headerContent.contentRect) === null || _headerContent$conten2 === void 0 ? void 0 : _headerContent$conten2.height) !== null && _headerContent$conten !== void 0 ? _headerContent$conten : 0);
    });

    if (headerContentRef.current) {
      headerContentResizeObserver.observe(headerContentRef.current);
    }

    return function () {
      headerContentResizeObserver.disconnect();
    };
  }, [headerContentRef.current, setHeaderContentHeight]);
  var anchorBarHeight = (_anchorBarRef$current = (_anchorBarRef$current2 = anchorBarRef.current) === null || _anchorBarRef$current2 === void 0 ? void 0 : _anchorBarRef$current2.offsetHeight) !== null && _anchorBarRef$current !== void 0 ? _anchorBarRef$current : 33;
  var totalHeaderHeight = (noHeader ? 0 : topHeaderHeight + headerContentHeight) + anchorBarHeight;
  return {
    topHeaderHeight: topHeaderHeight,
    headerContentHeight: headerContentHeight,
    anchorBarHeight: anchorBarHeight,
    totalHeaderHeight: totalHeaderHeight
  };
};

var SCROLL_BAR_WIDTH = 12;
var useStyles$2 = createComponentStyles(styles$1, {
  name: 'ObjectPage'
});
/**
 * <code>import { ObjectPage } from '@ui5/webcomponents-react/lib/ObjectPage';</code>
 */

var ObjectPage = forwardRef(function (props, ref) {
  var _safeGetChildrenArray, _safeGetChildrenArray2;

  var _props$title = props.title,
      title = _props$title === void 0 ? '' : _props$title,
      _props$image = props.image,
      image = _props$image === void 0 ? null : _props$image,
      _props$subTitle = props.subTitle,
      subTitle = _props$subTitle === void 0 ? '' : _props$subTitle,
      _props$headerActions = props.headerActions,
      headerActions = _props$headerActions === void 0 ? [] : _props$headerActions,
      _props$mode = props.mode,
      mode = _props$mode === void 0 ? ObjectPageMode.Default : _props$mode,
      _props$imageShapeCirc = props.imageShapeCircle,
      imageShapeCircle = _props$imageShapeCirc === void 0 ? false : _props$imageShapeCirc,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      slot = props.slot,
      _props$showHideHeader = props.showHideHeaderButton,
      showHideHeaderButton = _props$showHideHeader === void 0 ? false : _props$showHideHeader,
      children = props.children,
      _props$onSelectedSect = props.onSelectedSectionChanged,
      onSelectedSectionChanged = _props$onSelectedSect === void 0 ? function () {
    /* noop */
  } : _props$onSelectedSect,
      selectedSectionId = props.selectedSectionId,
      _props$noHeader = props.noHeader,
      noHeader = _props$noHeader === void 0 ? false : _props$noHeader,
      alwaysShowContentHeader = props.alwaysShowContentHeader,
      showTitleInHeaderContent = props.showTitleInHeaderContent,
      headerContentPinnable = props.headerContentPinnable;
  var headerContent = useDeprecateRenderMethods(props, 'renderHeaderContent', 'headerContent');
  var breadcrumbs = useDeprecateRenderMethods(props, 'renderBreadcrumbs', 'breadcrumbs');
  var keyInfos = useDeprecateRenderMethods(props, 'renderKeyInfos', 'keyInfos');
  var firstSectionId = (_safeGetChildrenArray = safeGetChildrenArray(children)[0]) === null || _safeGetChildrenArray === void 0 ? void 0 : (_safeGetChildrenArray2 = _safeGetChildrenArray.props) === null || _safeGetChildrenArray2 === void 0 ? void 0 : _safeGetChildrenArray2.id;

  var _useState = useState(selectedSectionId !== null && selectedSectionId !== void 0 ? selectedSectionId : firstSectionId),
      _useState2 = _slicedToArray(_useState, 2),
      internalSelectedSectionId = _useState2[0],
      setInternalSelectedSectionId = _useState2[1];

  var _useState3 = useState(props.selectedSubSectionId),
      _useState4 = _slicedToArray(_useState3, 2),
      selectedSubSectionId = _useState4[0],
      setSelectedSubSectionId = _useState4[1];

  var _useState5 = useState(alwaysShowContentHeader),
      _useState6 = _slicedToArray(_useState5, 2),
      headerPinned = _useState6[0],
      setHeaderPinned = _useState6[1];

  var isProgrammaticallyScrolled = useRef(false);
  var objectPageRef = useConsolidatedRef(ref);
  var topHeaderRef = useRef();
  var headerContentRef = useRef();
  var anchorBarRef = useRef();

  var _useState7 = useState(SCROLL_BAR_WIDTH),
      _useState8 = _slicedToArray(_useState7, 2),
      scrollbarWidth = _useState8[0],
      setScrollbarWidth = _useState8[1];

  var isMounted = useRef(false); // observe heights of header parts

  var _useObserveHeights = useObserveHeights(objectPageRef, topHeaderRef, headerContentRef, anchorBarRef, {
    noHeader: noHeader
  }),
      topHeaderHeight = _useObserveHeights.topHeaderHeight,
      headerContentHeight = _useObserveHeights.headerContentHeight,
      anchorBarHeight = _useObserveHeights.anchorBarHeight,
      totalHeaderHeight = _useObserveHeights.totalHeaderHeight; // *****
  // SECTION SELECTION
  // ****


  var scrollToSection = useCallback(function (sectionId) {
    if (!sectionId) {
      return;
    }

    if (firstSectionId === sectionId) {
      objectPageRef.current.scrollTo({
        top: 0,
        behavior: 'smooth'
      });
    } else {
      var _objectPageRef$curren;

      var childOffset = (_objectPageRef$curren = objectPageRef.current.querySelector("#ObjectPageSection-".concat(sectionId))) === null || _objectPageRef$curren === void 0 ? void 0 : _objectPageRef$curren.offsetTop;

      if (!isNaN(childOffset)) {
        objectPageRef.current.scrollTo({
          top: childOffset - topHeaderHeight - anchorBarHeight - (headerPinned ? headerContentHeight : 0) + 45,
          behavior: 'smooth'
        });
      }
    }

    isProgrammaticallyScrolled.current = false;
  }, [firstSectionId, objectPageRef, topHeaderHeight, anchorBarHeight, headerPinned, headerContentHeight]); // change selected section when prop is changed (external change)

  useEffect(function () {
    isProgrammaticallyScrolled.current = true;
    setInternalSelectedSectionId(selectedSectionId !== null && selectedSectionId !== void 0 ? selectedSectionId : firstSectionId);
  }, [selectedSectionId, isProgrammaticallyScrolled, firstSectionId]); // section was selected by clicking on the anchor bar buttons

  var handleOnSectionSelected = useCallback(function (e) {
    var _e$detail$props;

    isProgrammaticallyScrolled.current = true;
    var newSelectionSection = (_e$detail$props = e.detail.props) === null || _e$detail$props === void 0 ? void 0 : _e$detail$props.id;
    setInternalSelectedSectionId(function (oldSelectedSection) {
      if (oldSelectedSection === newSelectionSection) {
        scrollToSection(newSelectionSection);
      }

      return newSelectionSection;
    });
    fireOnSelectedChangedEvent(e);
  }, [onSelectedSectionChanged, setInternalSelectedSectionId, isProgrammaticallyScrolled, scrollToSection]); // do internal scrolling

  useEffect(function () {
    if (!isMounted.current) return;

    if (mode === ObjectPageMode.Default && isProgrammaticallyScrolled.current === true) {
      scrollToSection(internalSelectedSectionId);
    }
  }, [internalSelectedSectionId, isMounted, mode, isProgrammaticallyScrolled, scrollToSection]); // Scrolling for Sub Section Selection

  useEffect(function () {
    if (selectedSubSectionId && isProgrammaticallyScrolled.current === true) {
      var _objectPageRef$curren2;

      var childOffset = (_objectPageRef$curren2 = objectPageRef.current.querySelector("div[id=\"ObjectPageSubSection-".concat(selectedSubSectionId, "\"]"))) === null || _objectPageRef$curren2 === void 0 ? void 0 : _objectPageRef$curren2.offsetTop;

      if (!isNaN(childOffset)) {
        objectPageRef.current.scrollTo({
          top: childOffset - topHeaderHeight - anchorBarHeight - (headerPinned ? headerContentHeight : 0) + 45,
          behavior: 'smooth'
        });
      }

      isProgrammaticallyScrolled.current = false;
    }
  }, [selectedSubSectionId, isProgrammaticallyScrolled, topHeaderHeight, anchorBarHeight, headerPinned, headerContentHeight]);
  useEffect(function () {
    setHeaderPinned(alwaysShowContentHeader);
  }, [setHeaderPinned, alwaysShowContentHeader]);
  var classes = useStyles$2();
  useEffect(function () {
    setSelectedSubSectionId(props.selectedSubSectionId);

    if (props.selectedSubSectionId) {
      isProgrammaticallyScrolled.current = true;

      if (mode === ObjectPageMode.IconTabBar) {
        var sectionId;
        safeGetChildrenArray(children).forEach(function (section) {
          if (React.isValidElement(section) && section.props && section.props.children) {
            safeGetChildrenArray(section.props.children).forEach(function (subSection) {
              if (React.isValidElement(subSection) && subSection.props && subSection.props.id === props.selectedSubSectionId) {
                var _section$props;

                sectionId = (_section$props = section.props) === null || _section$props === void 0 ? void 0 : _section$props.id;
              }
            });
          }
        });

        if (sectionId) {
          setInternalSelectedSectionId(sectionId);
        }
      }
    }
  }, [props.selectedSubSectionId, setInternalSelectedSectionId, setSelectedSubSectionId, children, mode, isProgrammaticallyScrolled]);
  useEffect(function () {
    var fillerDivObserver = new ResizeObserver(function () {
      var maxHeight = Math.min(objectPageRef.current.clientHeight, window.innerHeight);
      var availableScrollHeight = maxHeight - totalHeaderHeight;
      var sections = objectPageRef.current.querySelectorAll('[id^="ObjectPageSection"]');

      if (!sections || sections.length < 1) {
        return;
      }

      var lastSectionDomRef = sections[sections.length - 1];
      var subSections = lastSectionDomRef.querySelectorAll('[id^="ObjectPageSubSection"]');
      var lastSubSectionHeight;

      if (subSections.length > 0) {
        lastSubSectionHeight = subSections[subSections.length - 1].offsetHeight;
      } else {
        lastSubSectionHeight = lastSectionDomRef.offsetHeight - lastSectionDomRef.querySelector("[role='heading']").offsetHeight;
      }

      var heightDiff = availableScrollHeight - lastSubSectionHeight;
      heightDiff = heightDiff > 0 ? heightDiff : 0;
      lastSectionDomRef.style.marginBottom = "".concat(heightDiff, "px");
    });
    fillerDivObserver.observe(objectPageRef.current);
    return function () {
      fillerDivObserver.disconnect();
    };
  }, [totalHeaderHeight, objectPageRef]);
  var fireOnSelectedChangedEvent = debounce(function (e) {
    onSelectedSectionChanged(enrichEventWithDetails(e, {
      selectedSectionIndex: e.detail.index,
      selectedSectionId: e.detail.props.id,
      section: e.detail
    }));
  }, 500);
  var handleOnSubSectionSelected = useCallback(function (e) {
    isProgrammaticallyScrolled.current = true;

    if (mode === ObjectPageMode.IconTabBar) {
      var _e$detail$section$pro;

      var sectionId = (_e$detail$section$pro = e.detail.section.props) === null || _e$detail$section$pro === void 0 ? void 0 : _e$detail$section$pro.id;
      setInternalSelectedSectionId(sectionId);
    }

    var subSection = e.detail.subSection;
    setSelectedSubSectionId(subSection.props.id);
  }, [mode, setInternalSelectedSectionId, setSelectedSubSectionId, isProgrammaticallyScrolled]);
  var onToggleHeaderContentVisibility = useCallback(function (e) {
    var srcElement = e.target;
    var shouldHideHeader = srcElement.icon === 'slim-arrow-up';

    if (shouldHideHeader) {
      objectPageRef.current.classList.add(classes.headerCollapsed);
    } else {
      objectPageRef.current.classList.remove(classes.headerCollapsed);
    }

    requestAnimationFrame(function () {
      if (objectPageRef.current.scrollTop > 0 && !shouldHideHeader) {
        var prevHeaderTop = headerContentRef.current.style.top;
        headerContentRef.current.style.top = "".concat(topHeaderHeight, "px");
        var prevAnchorTop = anchorBarRef.current.style.top;
        anchorBarRef.current.style.top = "".concat(headerContentRef.current.offsetHeight + topHeaderHeight, "px");
        objectPageRef.current.addEventListener('scroll', function (e) {
          if (prevHeaderTop !== null && prevHeaderTop !== void 0 ? prevHeaderTop : true) {
            headerContentRef.current.style.top = prevHeaderTop;
          } else {
            headerContentRef.current.style.removeProperty('top');
          }

          if (prevAnchorTop !== null && prevAnchorTop !== void 0 ? prevAnchorTop : true) {
            anchorBarRef.current.style.top = prevAnchorTop;
          } else {
            anchorBarRef.current.style.removeProperty('top');
          }
        }, {
          once: true
        });
      }
    });
  }, [objectPageRef, classes.headerCollapsed, headerContentHeight, topHeaderHeight]);
  useEffect(function () {
    requestAnimationFrame(function () {
      var calculatedScrollBarWidth = getScrollBarWidth();

      if (calculatedScrollBarWidth && calculatedScrollBarWidth !== 0 && calculatedScrollBarWidth !== SCROLL_BAR_WIDTH) {
        setScrollbarWidth(calculatedScrollBarWidth);
      }
    });
    isMounted.current = true;
  }, [isMounted, setScrollbarWidth]);
  var objectPageClasses = StyleClassHelper.of(classes.objectPage, GlobalStyleClasses.sapScrollBar);

  if (className) {
    objectPageClasses.put(className);
  }

  if (showTitleInHeaderContent) {
    objectPageClasses.put(classes.titleInHeaderContent);
  }

  if (mode === ObjectPageMode.IconTabBar) {
    objectPageClasses.put(classes.iconTabBarMode);
  }

  if (noHeader) {
    objectPageClasses.put(classes.noHeader);
  }

  var scrollBarWidthPadding = useMemo(function () {
    return {
      paddingRight: "".concat(scrollbarWidth, "px")
    };
  }, [scrollbarWidth]);
  var passThroughProps = usePassThroughHtmlProps(props, ['onSelectedSectionChanged']);
  useEffect(function () {
    var _objectPageRef$curren3, _objectPageRef$curren4;

    var objectPageHeight = (_objectPageRef$curren3 = (_objectPageRef$curren4 = objectPageRef.current) === null || _objectPageRef$curren4 === void 0 ? void 0 : _objectPageRef$curren4.clientHeight) !== null && _objectPageRef$curren3 !== void 0 ? _objectPageRef$curren3 : 1000;
    var marginBottom = objectPageHeight - totalHeaderHeight;
    var rootMargin = "-".concat(totalHeaderHeight, "px 0px -").concat(marginBottom < 0 ? 0 : marginBottom, "px 0px");
    var observer = new IntersectionObserver(function (elements) {
      elements.forEach(function (section) {
        if (section.isIntersecting && isProgrammaticallyScrolled.current === false) {
          setInternalSelectedSectionId(extractSectionIdFromHtmlId(section.target.id));
        }
      });
    }, {
      root: objectPageRef.current,
      rootMargin: rootMargin,
      threshold: [0]
    });
    objectPageRef.current.querySelectorAll('section[data-component-name="ObjectPageSection"]').forEach(function (el) {
      observer.observe(el);
    });
    return function () {
      observer.disconnect();
    };
  }, [objectPageRef, children, totalHeaderHeight, setInternalSelectedSectionId, isProgrammaticallyScrolled]);
  return /*#__PURE__*/React.createElement("div", _extends({
    "data-component-name": "ObjectPage",
    slot: slot,
    className: objectPageClasses.toString(),
    style: style,
    ref: objectPageRef,
    title: tooltip
  }, passThroughProps), /*#__PURE__*/React.createElement("header", {
    ref: topHeaderRef,
    role: "banner",
    "aria-roledescription": "Object Page header",
    style: scrollBarWidthPadding,
    className: classes.header
  }, /*#__PURE__*/React.createElement("span", {
    className: classes.actions
  }, headerActions), /*#__PURE__*/React.createElement("header", {
    className: classes.titleBar
  }, (!showTitleInHeaderContent || headerContentHeight === 0) && /*#__PURE__*/React.createElement(FlexBox, {
    alignItems: FlexBoxAlignItems.Center
  }, image && headerContentHeight === 0 && /*#__PURE__*/React.createElement("div", {
    className: classes.avatar
  }, /*#__PURE__*/React.createElement(CollapsedAvatar, {
    image: image,
    imageShapeCircle: imageShapeCircle
  })), /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Column,
    className: classes.container
  }, breadcrumbs, /*#__PURE__*/React.createElement(FlexBox, {
    alignItems: FlexBoxAlignItems.Baseline
  }, /*#__PURE__*/React.createElement(Title, {
    level: TitleLevel.H3,
    className: classes.title
  }, title), /*#__PURE__*/React.createElement(Label, {
    className: classes.subTitle
  }, subTitle), /*#__PURE__*/React.createElement("div", {
    className: classes.keyInfos
  }, keyInfos)))))), /*#__PURE__*/React.createElement(ObjectPageHeader, {
    image: image,
    classes: classes,
    imageShapeCircle: imageShapeCircle,
    showTitleInHeaderContent: showTitleInHeaderContent,
    headerContentProp: headerContent,
    breadcrumbs: breadcrumbs,
    keyInfos: keyInfos,
    title: title,
    subTitle: subTitle,
    headerPinned: headerPinned,
    topHeaderHeight: topHeaderHeight,
    ref: headerContentRef
  }), /*#__PURE__*/React.createElement(ObjectPageAnchorBar, {
    sections: children,
    selectedSectionId: internalSelectedSectionId,
    handleOnSectionSelected: handleOnSectionSelected,
    handleOnSubSectionSelected: handleOnSubSectionSelected,
    headerContentPinnable: headerContentPinnable,
    showHideHeaderButton: showHideHeaderButton && !noHeader,
    headerPinned: headerPinned,
    setHeaderPinned: setHeaderPinned,
    headerContentHeight: headerContentHeight,
    style: {
      top: noHeader ? 0 : headerPinned ? topHeaderHeight + headerContentHeight : topHeaderHeight
    },
    onToggleHeaderContentVisibility: onToggleHeaderContentVisibility,
    ref: anchorBarRef,
    className: classes.anchorBar
  }), mode === ObjectPageMode.IconTabBar ? getSectionById(children, internalSelectedSectionId) : children);
});
ObjectPage.displayName = 'ObjectPage';

export { ObjectPage };
//# sourceMappingURL=ObjectPage.js.map
