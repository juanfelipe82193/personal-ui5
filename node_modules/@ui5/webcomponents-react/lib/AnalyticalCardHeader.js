import _extends from '@babel/runtime/helpers/extends';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { usePassThroughHtmlProps, useI18nBundle } from '@ui5/webcomponents-react-base/lib/hooks';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { enrichEventWithDetails } from '@ui5/webcomponents-react-base/lib/Utils';
import { TARGET, DEVIATION } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { DeviationIndicator } from '@ui5/webcomponents-react/lib/DeviationIndicator';
import { FlexBox } from '@ui5/webcomponents-react/lib/FlexBox';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/lib/FlexBoxAlignItems';
import { FlexBoxDirection } from '@ui5/webcomponents-react/lib/FlexBoxDirection';
import { FlexBoxJustifyContent } from '@ui5/webcomponents-react/lib/FlexBoxJustifyContent';
import { FlexBoxWrap } from '@ui5/webcomponents-react/lib/FlexBoxWrap';
import { ObjectStatus } from '@ui5/webcomponents-react/lib/ObjectStatus';
import { ValueState } from '@ui5/webcomponents-react/lib/ValueState';
import React, { forwardRef, useCallback, useMemo } from 'react';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { sapUiContentPadding } from '@ui5/webcomponents-react-base/lib/spacing';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';

var styles = {
  helpText: {
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    color: ThemingParameters.sapTextColor
  },
  cardHeader: _objectSpread(_objectSpread({}, sapUiContentPadding), {}, {
    outlineOffset: '-0.125rem',
    boxShadow: ThemingParameters.sapContent_HeaderShadow,
    //TODO use sapTile_SeparatorColor when available
    borderBottom: "0.0625rem solid ".concat(ThemingParameters.sapToolbar_SeparatorColor),
    backgroundColor: ThemingParameters.sapTile_Background,
    fontFamily: ThemingParameters.sapFontHeaderFamily,
    '&:hover': {
      backgroundColor: ThemingParameters.sapList_Hover_Background
    },
    '&:active': {
      backgroundColor: ThemingParameters.sapList_Hover_Background
    }
  }),
  arrowIndicatorShape: {
    width: 0,
    height: 0
  },
  arrowUp: {
    borderLeft: '8px solid transparent',
    borderRight: '8px solid transparent',
    borderBottom: '8px solid'
  },
  arrowDown: {
    borderLeft: '8px solid transparent',
    borderRight: '8px solid transparent',
    borderTop: '8px solid'
  },
  arrowRight: {
    borderLeft: "8px solid ",
    borderTop: '8px solid transparent',
    borderBottom: '8px solid transparent'
  },
  cardHeaderClickable: {
    cursor: 'pointer'
  },
  headerContent: {
    marginLeft: '1rem',
    marginRight: '1rem',
    position: 'relative'
  },
  headerTitles: {
    overflow: 'hidden',
    textAlign: 'left',
    whiteSpace: 'normal',
    wordWrap: 'break-word'
  },
  headerText: {
    fontFamily: ThemingParameters.sapFontHeaderFamily,
    fontWeight: 'normal',
    // was ThemingParameters.sapUiFontHeaderWeight
    fontSize: ThemingParameters.sapFontHeader5Size,
    color: ThemingParameters.sapTile_TitleTextColor,
    overflow: 'hidden',
    display: '-webkit-box',
    lineHeight: '18px',
    maxHeight: '54px'
    /* height * number of lines */
    ,
    WebkitLineClamp: '3'
    /* number of lines to show */
    ,
    WebkitBoxOrient: 'vertical'
  },
  subHeaderText: {
    overflow: 'hidden',
    fontFamily: ThemingParameters.sapFontFamily,
    fontWeight: 'normal',
    fontSize: ThemingParameters.sapFontSize,
    color: ThemingParameters.sapTile_TextColor,
    textAlign: 'left',
    whiteSpace: 'normal',
    wordWrap: 'break-word',
    textOverflow: 'ellipsis',
    marginTop: '0.5rem',
    width: '100%',
    display: '-webkit-box',
    lineHeight: '16px',
    maxHeight: '32px',
    WebkitLineClamp: '2',
    WebkitBoxOrient: 'vertical'
  },
  counter: {
    fontSize: ThemingParameters.sapFontSmallSize,
    margin: '0.188rem 0  0 1rem',
    lineHeight: 'normal',
    textAlign: 'right'
  },
  currency: {
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    color: ThemingParameters.sapTile_TextColor,
    overflow: 'hidden',
    marginLeft: '0.25rem',
    textAlign: 'right'
  },
  helpIcon: {
    position: 'absolute',
    right: '0',
    top: '0'
  },
  kpiContent: {
    fontWeight: 'normal',
    marginTop: '0.5rem',
    color: ThemingParameters.sapTile_TextColor,
    width: '100%',
    boxSizing: 'border-box'
  },
  valueAndUnit: {
    display: 'flex',
    alignItems: 'end',
    color: ThemingParameters.sapNeutralTextColor
  },
  value: {
    fontSize: '2rem',
    maxWidth: '135px',
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    display: 'block'
  },
  unit: {
    marginLeft: '0.25rem',
    fontSize: '1rem'
  },
  indicatorAndUnit: {
    display: 'flex',
    height: '2rem',
    flexDirection: 'column',
    alignItems: 'center',
    justifyContent: 'flex-end'
  },
  targetAndDeviation: {
    width: '60%',
    paddingBottom: '0.25rem',
    textAlign: 'right',
    fontSize: ThemingParameters.sapFontSmallSize,
    color: ThemingParameters.sapTile_TextColor
  },
  targetAndDeviationColumn: {
    maxWidth: '45%',
    marginLeft: '1rem'
  },
  targetAndDeviationValue: {
    color: ThemingParameters.sapTile_TitleTextColor,
    whiteSpace: 'nowrap',
    overflow: 'hidden',
    textOverflow: 'ellipsis'
  },
  description: {
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSmallSize,
    fontWeight: 'normal',
    color: ThemingParameters.sapTile_TextColor,
    whiteSpace: 'normal',
    overflow: 'hidden',
    textAlign: 'left',
    textOverflow: 'ellipsis',
    marginTop: '0.25rem',
    width: '100%',
    display: '-webkit-box',
    lineHeight: '14px',
    maxHeight: '14px'
    /* height * number of lines */
    ,
    WebkitLineClamp: '1'
    /* number of lines to show */
    ,
    WebkitBoxOrient: 'vertical'
  },
  good: {
    color: ThemingParameters.sapPositiveTextColor
  },
  error: {
    color: ThemingParameters.sapNegativeTextColor
  },
  critical: {
    color: ThemingParameters.sapCriticalTextColor
  },
  none: {
    color: ThemingParameters.sapNeutralTextColor
  }
};

var useStyles = createComponentStyles(styles, {
  name: 'AnalyticalCardHeader'
});
/**
 * <code>import { AnalyticalCardHeader } from '@ui5/webcomponents-react/lib/AnalyticalCardHeader';</code>
 */

var AnalyticalCardHeader = forwardRef(function (props, ref) {
  var title = props.title,
      subTitle = props.subTitle,
      value = props.value,
      unit = props.unit,
      target = props.target,
      deviation = props.deviation,
      valueState = props.valueState,
      onHeaderPress = props.onHeaderPress,
      showIndicator = props.showIndicator,
      tooltip = props.tooltip,
      className = props.className,
      description = props.description,
      counter = props.counter,
      counterState = props.counterState,
      currency = props.currency,
      indicatorState = props.indicatorState,
      arrowIndicator = props.arrowIndicator,
      style = props.style;
  var classes = useStyles(props);
  var onClick = useCallback(function (e) {
    if (onHeaderPress) {
      onHeaderPress(enrichEventWithDetails(e));
    }
  }, [onHeaderPress]);
  var indicatorIcon = useMemo(function () {
    var arrowClasses = StyleClassHelper.of(classes.arrowIndicatorShape);

    switch (arrowIndicator) {
      case DeviationIndicator.Up:
        arrowClasses.put(classes.arrowUp);
        break;

      case DeviationIndicator.Down:
        arrowClasses.put(classes.arrowDown);
        break;

      default:
        arrowClasses.put(classes.arrowRight);
        break;
    }

    switch (indicatorState) {
      case ValueState.Success:
        arrowClasses.put(classes.good);
        break;

      case ValueState.Error:
        arrowClasses.put(classes.error);
        break;

      case ValueState.Warning:
        arrowClasses.put(classes.critical);
        break;

      default:
        arrowClasses.put(classes.none);
        break;
    }

    return /*#__PURE__*/React.createElement("div", {
      className: arrowClasses.valueOf()
    });
  }, [arrowIndicator, indicatorState, classes]);
  var headerClasses = StyleClassHelper.of(classes.cardHeader);

  if (onHeaderPress) {
    headerClasses.put(classes.cardHeaderClickable);
  }

  var valueAndUnitClasses = StyleClassHelper.of(classes.valueAndUnit);

  if (valueState === ValueState.Error) {
    valueAndUnitClasses.put(classes.error);
  }

  if (valueState === ValueState.Warning) {
    valueAndUnitClasses.put(classes.critical);
  }

  if (valueState === ValueState.Success) {
    valueAndUnitClasses.put(classes.good);
  }

  if (className) {
    headerClasses.put(className);
  }

  var shouldRenderContent = [value, unit, deviation, target].some(function (v) {
    return v !== null;
  });
  var passThroughProps = usePassThroughHtmlProps(props, ['onHeaderPress']);
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: headerClasses.valueOf(),
    title: tooltip,
    style: style
  }, passThroughProps, {
    onClick: onClick
  }), /*#__PURE__*/React.createElement("div", {
    className: classes.headerContent
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.headerTitles
  }, /*#__PURE__*/React.createElement(FlexBox, {
    justifyContent: FlexBoxJustifyContent.SpaceBetween,
    wrap: FlexBoxWrap.NoWrap
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.headerText
  }, title), /*#__PURE__*/React.createElement(ObjectStatus, {
    className: classes.counter,
    state: counterState
  }, counter)), /*#__PURE__*/React.createElement("div", {
    className: classes.subHeaderText
  }, subTitle, currency && " | ".concat(currency))), shouldRenderContent && /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Row,
    className: classes.kpiContent,
    alignItems: FlexBoxAlignItems.End
  }, /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Row
  }, /*#__PURE__*/React.createElement("div", {
    className: valueAndUnitClasses.valueOf()
  }, /*#__PURE__*/React.createElement("div", {
    className: classes.value
  }, value), /*#__PURE__*/React.createElement("div", {
    className: classes.indicatorAndUnit
  }, showIndicator && indicatorIcon, /*#__PURE__*/React.createElement("div", {
    className: classes.unit
  }, unit)))), /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Row,
    wrap: FlexBoxWrap.NoWrap,
    className: classes.targetAndDeviation
  }, target !== null && /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Column,
    className: classes.targetAndDeviationColumn,
    wrap: FlexBoxWrap.NoWrap
  }, /*#__PURE__*/React.createElement("span", null, i18nBundle.getText(TARGET)), /*#__PURE__*/React.createElement("span", {
    className: classes.targetAndDeviationValue
  }, target)), deviation !== null && /*#__PURE__*/React.createElement(FlexBox, {
    direction: FlexBoxDirection.Column,
    className: classes.targetAndDeviationColumn,
    wrap: FlexBoxWrap.NoWrap
  }, /*#__PURE__*/React.createElement("span", null, i18nBundle.getText(DEVIATION)), /*#__PURE__*/React.createElement("span", {
    className: classes.targetAndDeviationValue
  }, deviation)))), /*#__PURE__*/React.createElement("div", {
    className: classes.description
  }, description)));
});
AnalyticalCardHeader.displayName = 'AnalyticalCardHeader';
AnalyticalCardHeader.defaultProps = {
  title: null,
  subTitle: null,
  arrowIndicator: DeviationIndicator.None,
  showIndicator: true,
  indicatorState: ValueState.None,
  value: null,
  unit: null,
  valueState: ValueState.None,
  target: null,
  deviation: null,
  onHeaderPress: null,
  description: null,
  counter: null,
  counterState: ValueState.None,
  currency: null
};

export { AnalyticalCardHeader };
//# sourceMappingURL=AnalyticalCardHeader.js.map
