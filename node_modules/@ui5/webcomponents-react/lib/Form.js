import _extends from '@babel/runtime/helpers/extends';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { useViewportRange } from '@ui5/webcomponents-react-base/lib/useViewportRange';
import { CurrentViewportRangeContext } from '@ui5/webcomponents-react/lib/CurrentViewportRangeContext';
import { FormGroup } from '@ui5/webcomponents-react/lib/FormGroup';
import { Grid } from '@ui5/webcomponents-react/lib/Grid';
import { Title } from '@ui5/webcomponents-react/lib/Title';
import { TitleLevel } from '@ui5/webcomponents-react/lib/TitleLevel';
import React, { forwardRef, useMemo } from 'react';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';

var styles = {
  formTitle: {
    borderBottom: "1px solid ".concat(ThemingParameters.sapGroup_TitleBorderColor),
    marginBottom: '2rem'
  }
};

var useStyles = createComponentStyles(styles, {
  name: 'Form'
});
/**
 * <code>import { Form } from '@ui5/webcomponents-react/lib/Form';</code>
 */

var Form = forwardRef(function (props, ref) {
  var title = props.title,
      children = props.children,
      className = props.className,
      slot = props.slot,
      style = props.style,
      tooltip = props.tooltip;
  var classes = useStyles();
  var currentRange = useViewportRange('StdExt');

  var _useMemo = useMemo(function () {
    var formGroups;
    var updatedTitle = title; // check if ungrouped FormItems exist amongst the Form's children and put them into an artificial FormGroup

    if (Array.isArray(children)) {
      var ungroupedItems = [];
      formGroups = [];
      children.forEach(function (child) {
        if (child.type.displayName === 'FormItem') {
          ungroupedItems.push(child);
        } else if (child.type.displayName === 'FormGroup') {
          formGroups.push(child);
        }
      });

      if (ungroupedItems.length > 0) {
        formGroups.push( /*#__PURE__*/React.createElement(FormGroup, null, ungroupedItems));
      }
    } else {
      // check if a sole Form's group has a Title and take it as Form Title if one does not exist
      var childProps = children.props;

      if ((!title || title.length === 0) && childProps.title && childProps.title.length > 0) {
        updatedTitle = childProps.title;
        formGroups = React.cloneElement(children, {
          title: null
        });
      } else {
        formGroups = children;
      }
    }

    return [formGroups, updatedTitle];
  }, [children]),
      _useMemo2 = _slicedToArray(_useMemo, 2),
      formGroups = _useMemo2[0],
      updatedTitle = _useMemo2[1];

  var passThroughProps = usePassThroughHtmlProps(props);
  return /*#__PURE__*/React.createElement(CurrentViewportRangeContext.Provider, {
    value: currentRange
  }, updatedTitle && /*#__PURE__*/React.createElement(Title, {
    level: TitleLevel.H3,
    className: classes.formTitle
  }, updatedTitle), /*#__PURE__*/React.createElement(Grid, _extends({
    ref: ref,
    defaultSpan: 'XL6 L12 M12 S12',
    className: className,
    slot: slot,
    style: style,
    tooltip: tooltip
  }, passThroughProps), formGroups));
});
Form.displayName = 'Form';

export { Form };
//# sourceMappingURL=Form.js.map
