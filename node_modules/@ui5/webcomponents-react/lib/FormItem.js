import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { deprecationNotice } from '@ui5/webcomponents-react-base/lib/Utils';
import { CurrentViewportRangeContext } from '@ui5/webcomponents-react/lib/CurrentViewportRangeContext';
import { Label } from '@ui5/webcomponents-react/lib/Label';
import React, { forwardRef, useContext, useMemo, cloneElement } from 'react';

var calculateWidth = function calculateWidth(rate) {
  return Math.floor(100 / 12 * rate) + '%';
};

var useStyles = createComponentStyles({
  formItem: {
    alignItems: 'center'
  },
  label: {
    paddingRight: '0.5em'
  },
  content: {
    display: 'block'
  }
}, {
  name: 'FormItem'
});
/**
 * <code>import { FormItem } from '@ui5/webcomponents-react/lib/FormItem';</code>
 */

var FormItem = forwardRef(function (props, ref) {
  var _labelToRender$props$;

  var label = props.label,
      labelText = props.labelText,
      children = props.children,
      tooltip = props.tooltip,
      style = props.style,
      className = props.className,
      slot = props.slot;
  var currentRange = useContext(CurrentViewportRangeContext);
  var classes = useStyles();
  var memoizedStyles = useMemo(function () {
    var labelWidth;
    var labelTextAlign = 'flex-end';
    var display = 'flex';
    var elementWidth;

    switch (currentRange) {
      case 'Phone':
        labelWidth = '100%';
        elementWidth = '100%';
        display = 'block';
        labelTextAlign = 'flex-start';
        break;

      case 'Tablet':
        labelWidth = calculateWidth(2);
        elementWidth = calculateWidth(10);
        break;

      case 'Desktop':
      case 'LargeDesktop':
        labelWidth = calculateWidth(4);
        elementWidth = calculateWidth(8);
        break;
    }

    return {
      topDivStyle: _objectSpread({
        display: display
      }, style),
      labelStyle: {
        width: labelWidth,
        justifyContent: labelTextAlign
      },
      elementStyle: {
        width: elementWidth
      }
    };
  }, [children, currentRange, style]);
  var classNames = "".concat(classes.formItem);

  if (className) {
    classNames += " ".concat(className);
  }

  if (labelText) {
    deprecationNotice('FormItem', "prop 'labelText' is deprecated and will be removed in the next major release. Please use 'label' instead.");
  }

  var labelToRender = label !== null && label !== void 0 ? label : labelText;
  return /*#__PURE__*/React.createElement("div", {
    ref: ref,
    style: memoizedStyles.topDivStyle,
    className: classNames,
    title: tooltip,
    slot: slot
  }, typeof labelToRender === 'string' ? /*#__PURE__*/React.createElement(Label, {
    style: memoizedStyles.labelStyle,
    className: classes.label
  }, labelToRender ? "".concat(labelToRender, ":") : '') : cloneElement(labelToRender, {
    style: _objectSpread(_objectSpread({}, memoizedStyles.labelStyle), labelToRender.props.style || {}),
    className: "".concat(classes.label, " ").concat((_labelToRender$props$ = labelToRender.props.className) !== null && _labelToRender$props$ !== void 0 ? _labelToRender$props$ : ''),
    children: labelToRender.props.children ? "".concat(labelToRender.props.children, ":") : ''
  }), /*#__PURE__*/React.createElement("div", {
    style: memoizedStyles.elementStyle,
    className: classes.content
  }, children));
});
FormItem.displayName = 'FormItem';

export { FormItem };
//# sourceMappingURL=FormItem.js.map
