import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';
import _slicedToArray from '@babel/runtime/helpers/slicedToArray';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { useI18nBundle, useDeprecateRenderMethods } from '@ui5/webcomponents-react-base/lib/hooks';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { enrichEventWithDetails } from '@ui5/webcomponents-react-base/lib/Utils';
import { TableScaleWidthMode } from '@ui5/webcomponents-react/lib/TableScaleWidthMode';
import { TableSelectionBehavior } from '@ui5/webcomponents-react/lib/TableSelectionBehavior';
import { TableSelectionMode } from '@ui5/webcomponents-react/lib/TableSelectionMode';
import debounce from 'lodash.debounce';
import React, { forwardRef, useCallback, useMemo, useRef, useState, useEffect, isValidElement } from 'react';
import { defaultOrderByFn, useTable, useFilters, useGroupBy, useColumnOrder, useSortBy, useExpanded, useRowSelect, useResizeColumns } from 'react-table';
import { CssSizeVariables, CssSizeVariablesNames } from '@ui5/webcomponents-react-base/lib/CssSizeVariables';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';
import { getRTL } from '@ui5/webcomponents-base/dist/config/RTL';
import '@ui5/webcomponents-icons/dist/icons/filter';
import '@ui5/webcomponents-icons/dist/icons/group-2';
import '@ui5/webcomponents-icons/dist/icons/sort-ascending';
import '@ui5/webcomponents-icons/dist/icons/sort-descending';
import { Icon } from '@ui5/webcomponents-react/lib/Icon';
import { Text } from '@ui5/webcomponents-react/lib/Text';
import '@ui5/webcomponents-icons/dist/icons/decline';
import { CLEAR_SORTING, SORT_ASCENDING, SORT_DESCENDING, UNGROUP, GROUP } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';
import { FlexBox } from '@ui5/webcomponents-react/lib/FlexBox';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/lib/FlexBoxAlignItems';
import { List } from '@ui5/webcomponents-react/lib/List';
import { ListItemTypes } from '@ui5/webcomponents-react/lib/ListItemTypes';
import { PlacementType } from '@ui5/webcomponents-react/lib/PlacementType';
import { Popover } from '@ui5/webcomponents-react/lib/Popover';
import { PopoverHorizontalAlign } from '@ui5/webcomponents-react/lib/PopoverHorizontalAlign';
import { StandardListItem } from '@ui5/webcomponents-react/lib/StandardListItem';
import { VerticalAlign } from '@ui5/webcomponents-react/lib/VerticalAlign';
import { Input } from '@ui5/webcomponents-react/lib/Input';
import { TextAlign } from '@ui5/webcomponents-react/lib/TextAlign';
import { Loader } from '@ui5/webcomponents-react/lib/Loader';
import ContentLoader from 'react-content-loader';
import { ValueState } from '@ui5/webcomponents-react/lib/ValueState';
import { CheckBox } from '@ui5/webcomponents-react/lib/CheckBox';
import _defineProperty from '@babel/runtime/helpers/defineProperty';
import { useConsolidatedRef } from '@ui5/webcomponents-react-base/lib/useConsolidatedRef';
import { Title } from '@ui5/webcomponents-react/lib/Title';
import '@ui5/webcomponents-icons/dist/icons/navigation-down-arrow';
import '@ui5/webcomponents-icons/dist/icons/navigation-right-arrow';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { GlobalStyleClasses } from '@ui5/webcomponents-react/lib/GlobalStyleClasses';
import { useVirtual } from 'react-virtual';

var styles = {
  table: {
    position: 'relative',
    width: '100%',
    maxWidth: '100%',
    overflowY: 'hidden',
    overflowX: 'auto',
    height: '100%',
    minHeight: '3rem',
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    fontWeight: 'normal'
  },
  tableHeaderRow: {
    height: CssSizeVariables.sapWcrAnalyticalTableRowHeight,
    position: 'relative',
    display: 'inline-flex'
  },
  th: {
    backgroundColor: ThemingParameters.sapList_HeaderBackground,
    height: CssSizeVariables.sapWcrAnalyticalTableRowHeight,
    color: ThemingParameters.sapList_HeaderTextColor,
    borderTop: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    borderBottom: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    borderRight: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    padding: "0 0.5rem",
    textAlign: 'start',
    boxSizing: 'border-box',
    '&:first-child': {
      borderLeft: "1px solid ".concat(ThemingParameters.sapList_BorderColor)
    },
    '&:last-child': {
      '& [data-resizer]': {
        transform: 'translateX(0px)'
      }
    }
  },
  tbody: {
    position: 'relative',
    backgroundColor: ThemingParameters.sapList_Background,
    overflowX: 'hidden',
    overflowY: 'auto'
  },
  alternateRowColor: {
    backgroundColor: ThemingParameters.sapList_AlternatingBackground
  },
  tr: {
    position: 'absolute',
    top: 0,
    left: 0,
    width: '100%',
    color: ThemingParameters.sapList_TextColor,
    borderBottom: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    boxSizing: 'border-box',
    display: 'flex',
    height: CssSizeVariables.sapWcrAnalyticalTableRowHeight,
    '&:hover': {
      backgroundColor: ThemingParameters.sapList_Hover_Background
    },
    '&[data-is-selected]': {
      borderBottom: "1px solid ".concat(ThemingParameters.sapList_SelectionBorderColor),
      backgroundColor: ThemingParameters.sapList_SelectionBackgroundColor
    },
    '&[data-is-selected]:hover': {
      backgroundColor: ThemingParameters.sapList_Hover_SelectionBackground
    }
  },
  trActive: {
    '&:hover': {
      cursor: 'pointer'
    },
    '&:active': {
      backgroundColor: ThemingParameters.sapList_Active_Background,
      '& $tableCell': {
        borderRight: "1px solid ".concat(ThemingParameters.sapList_Active_Background),
        color: "".concat(ThemingParameters.sapList_Active_TextColor),
        '--sapTextColor': ThemingParameters.sapList_Active_TextColor
      }
    }
  },
  tableGroupHeader: {
    '&$tr': {
      backgroundColor: "".concat(ThemingParameters.sapList_TableGroupHeaderBackground),
      border: "1px solid ".concat(ThemingParameters.sapList_TableGroupHeaderBorderColor),
      color: ThemingParameters.sapList_TextColor,
      '& $tableCell': {
        borderRight: 'none'
      }
    }
  },
  tableCell: {
    height: CssSizeVariables.sapWcrAnalyticalTableRowHeight,
    boxSizing: 'border-box',
    borderRight: "1px solid ".concat(ThemingParameters.sapList_BorderColor),
    display: 'inline-flex',
    padding: '0 0.5rem',
    '&:first-child': {
      borderLeft: "1px solid ".concat(ThemingParameters.sapList_BorderColor)
    },
    overflow: 'hidden',
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    alignItems: 'center',
    position: 'relative',
    '&:focus': {
      outlineOffset: '-2px',
      outline: "1px dotted ".concat(ThemingParameters.sapContent_FocusColor)
    }
  },
  noDataContainer: {
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    height: '100%',
    backgroundColor: ThemingParameters.sapList_Background,
    width: '100%',
    boxSizing: 'border-box',
    color: ThemingParameters.sapList_TextColor,
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    borderBottom: "1px solid ".concat(ThemingParameters.sapList_BorderColor)
  }
};

var staticStyle = {
  fontWeight: 'normal'
};
var ColumnHeaderModal = forwardRef(function (props, ref) {
  var column = props.column,
      onSort = props.onSort,
      onGroupBy = props.onGroupBy;
  var showFilter = column.canFilter;
  var showGroup = column.canGroupBy;
  var showSort = column.canSort;
  var Filter = column.Filter;
  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');
  var handleSort = useCallback(function (e) {
    var sortType = e.detail.item.getAttribute('data-sort');

    switch (sortType) {
      case 'asc':
        column.toggleSortBy(false);

        if (typeof onSort === 'function') {
          onSort(enrichEventWithDetails(e, {
            column: column,
            sortDirection: sortType
          }));
        }

        break;

      case 'desc':
        column.toggleSortBy(true);

        if (typeof onSort === 'function') {
          onSort(enrichEventWithDetails(e, {
            column: column,
            sortDirection: sortType
          }));
        }

        break;

      case 'clear':
        column.clearSortBy();

        if (typeof onSort === 'function') {
          onSort(enrichEventWithDetails(e, {
            column: column,
            sortDirection: sortType
          }));
        }

        break;

      case 'group':
        var willGroup = !column.isGrouped;
        column.toggleGroupBy(willGroup);

        if (typeof onGroupBy === 'function') {
          onGroupBy(enrichEventWithDetails(e, {
            column: column,
            isGrouped: willGroup
          }));
        }

        break;
    }

    if (ref.current) {
      ref.current.close();
    }
  }, [column, ref, onGroupBy, onSort]);
  var isSortedAscending = column.isSorted && column.isSortedDesc === false;
  var isSortedDescending = column.isSorted && column.isSortedDesc === true;
  return /*#__PURE__*/React.createElement(Popover, {
    noArrow: true,
    horizontalAlign: PopoverHorizontalAlign.Left,
    placementType: PlacementType.Bottom,
    ref: ref,
    style: staticStyle
  }, /*#__PURE__*/React.createElement(List, {
    onItemClick: handleSort
  }, isSortedAscending && /*#__PURE__*/React.createElement(StandardListItem, {
    type: ListItemTypes.Active,
    icon: "decline",
    "data-sort": "clear"
  }, i18nBundle.getText(CLEAR_SORTING)), showSort && !isSortedAscending && /*#__PURE__*/React.createElement(StandardListItem, {
    type: ListItemTypes.Active,
    icon: "sort-ascending",
    "data-sort": "asc"
  }, i18nBundle.getText(SORT_ASCENDING)), showSort && !isSortedDescending && /*#__PURE__*/React.createElement(StandardListItem, {
    type: ListItemTypes.Active,
    icon: "sort-descending",
    "data-sort": "desc"
  }, i18nBundle.getText(SORT_DESCENDING)), isSortedDescending && /*#__PURE__*/React.createElement(StandardListItem, {
    type: ListItemTypes.Active,
    icon: "decline",
    "data-sort": "clear"
  }, i18nBundle.getText(CLEAR_SORTING)), showFilter && !column.isGrouped && /*#__PURE__*/React.createElement(FlexBox, {
    alignItems: FlexBoxAlignItems.Center,
    style: {
      padding: '0px 1rem',
      height: 'var(--_ui5_custom_list_item_height)',
      borderBottom: "1px solid ".concat(ThemingParameters.sapList_BorderColor)
    }
  }, /*#__PURE__*/React.createElement(Icon, {
    name: "filter",
    style: {
      paddingRight: '0.5rem',
      minWidth: '1rem',
      minHeight: '1rem'
    }
  }), /*#__PURE__*/React.createElement(Filter, {
    column: column,
    popoverRef: ref
  })), showGroup && /*#__PURE__*/React.createElement(StandardListItem, {
    type: ListItemTypes.Active,
    icon: "group-2",
    "data-sort": 'group'
  }, i18nBundle.getText(column.isGrouped ? UNGROUP : GROUP))));
});
ColumnHeaderModal.displayName = 'ColumnHeaderModal';

var styles$1 = {
  header: {
    height: '100%',
    display: 'flex',
    justifyContent: 'begin',
    alignItems: 'center',
    textAlign: 'left',
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSize,
    fontWeight: 'normal',
    color: ThemingParameters.sapList_TextColor,
    background: ThemingParameters.sapList_HeaderBackground,
    textOverflow: 'ellipsis',
    whiteSpace: 'nowrap',
    maxWidth: '100%',
    position: 'relative',
    width: '100%',
    overflowX: 'hidden',
    overflowY: 'hidden',
    boxSizing: 'border-box',
    '&[data-h-align="End"]': {
      '& $text': {
        textAlign: 'end'
      }
    }
  },
  text: {
    width: '100%',
    textAlign: 'start'
  },
  iconContainer: {
    display: 'inline-block',
    position: 'absolute',
    color: ThemingParameters.sapContent_IconColor,
    right: getRTL() === false ? '0.5rem' : undefined,
    left: getRTL() === true ? '0.5rem' : undefined
  },
  resizer: {
    display: 'inline-block',
    width: '16px',
    height: '100%',
    position: 'absolute',
    right: 0,
    top: 0,
    transform: 'translateX(50%)',
    zIndex: 1
  }
};
var useStyles = createComponentStyles(styles$1, {
  name: 'TableColumnHeader'
});
/**
 * <code>import { ColumnHeader } from '@ui5/webcomponents-react/lib/ColumnHeader';</code>
 */

var ColumnHeader = function ColumnHeader(props) {
  var classes = useStyles(props);
  var id = props.id,
      children = props.children,
      column = props.column,
      className = props.className,
      style = props.style,
      onSort = props.onSort,
      onGroupBy = props.onGroupBy,
      onDragEnter = props.onDragEnter,
      onDragOver = props.onDragOver,
      onDragStart = props.onDragStart,
      onDrop = props.onDrop,
      onDragEnd = props.onDragEnd,
      isDraggable = props.isDraggable,
      dragOver = props.dragOver,
      role = props.role;
  var isFiltered = column.filterValue && column.filterValue.length > 0;
  var sortingIcon = column.isSorted ? /*#__PURE__*/React.createElement(Icon, {
    name: column.isSortedDesc ? 'sort-descending' : 'sort-ascending'
  }) : null;
  var filterIcon = isFiltered ? /*#__PURE__*/React.createElement(Icon, {
    name: "filter"
  }) : null;
  var groupingIcon = column.isGrouped ? /*#__PURE__*/React.createElement(Icon, {
    name: "group-2"
  }) : null;
  var textStyle = useMemo(function () {
    var margin = 0;
    if (column.isSorted) margin++;
    if (column.isGrouped) margin++;
    if (isFiltered) margin++;

    if (margin === 0) {
      return {};
    }

    if (margin > 0) margin += 0.5;

    if (getRTL()) {
      return {
        marginLeft: "".concat(margin, "rem")
      };
    }

    return {
      marginRight: "".concat(margin, "rem")
    };
  }, [column.isSorted, column.isGrouped, isFiltered]);
  var hasPopover = column.canGroupBy || column.canSort || column.canFilter;
  var innerStyle = useMemo(function () {
    var modifiedStyles = {
      cursor: hasPopover ? 'pointer' : 'auto'
    };

    if (dragOver) {
      modifiedStyles.borderLeft = "3px solid ".concat(ThemingParameters.sapSelectedColor);
    }

    return modifiedStyles;
  }, [dragOver, hasPopover]);
  var popoverRef = useRef(null);
  var onOpenPopover = useCallback(function (e) {
    if (popoverRef.current && hasPopover) {
      popoverRef.current.openBy(e.target);
    }
  }, [popoverRef, hasPopover]);
  if (!column) return null;
  return /*#__PURE__*/React.createElement("div", {
    id: id,
    className: className,
    style: style,
    role: role,
    draggable: isDraggable,
    onDragEnter: onDragEnter,
    onDragOver: onDragOver,
    onDragStart: onDragStart,
    onDrop: onDrop,
    onDragEnd: onDragEnd,
    "data-column-id": id
  }, /*#__PURE__*/React.createElement("div", {
    style: innerStyle,
    onClick: onOpenPopover,
    className: classes.header,
    "data-h-align": column.hAlign
  }, /*#__PURE__*/React.createElement(Text, {
    tooltip: typeof children === 'string' ? children : null,
    wrapping: false,
    style: textStyle,
    className: classes.text
  }, children), /*#__PURE__*/React.createElement("div", {
    className: classes.iconContainer
  }, filterIcon, sortingIcon, groupingIcon)), hasPopover && /*#__PURE__*/React.createElement(ColumnHeaderModal, {
    column: column,
    onSort: onSort,
    onGroupBy: onGroupBy,
    ref: popoverRef
  }), column.canResize && column.getResizerProps && /*#__PURE__*/React.createElement("div", _extends({}, column.getResizerProps(), {
    "data-resizer": true,
    className: "".concat(classes.resizer)
  })));
};

var DefaultFilterComponent = function DefaultFilterComponent(_ref) {
  var column = _ref.column;
  var handleChange = useCallback(function (e) {
    column.setFilter(e.target.value || undefined);
  }, [column.setFilter]);
  return /*#__PURE__*/React.createElement(Input, {
    onInput: handleChange
  }, column.filterValue);
};

var Cell = function Cell(_ref) {
  var _ref$cell = _ref.cell,
      _ref$cell$value = _ref$cell.value,
      value = _ref$cell$value === void 0 ? '' : _ref$cell$value,
      isGrouped = _ref$cell.isGrouped,
      row = _ref.row;
  var cellContent = "".concat(value !== null && value !== void 0 ? value : '');

  if (isGrouped) {
    cellContent += " (".concat(row.subRows.length, ")");
  }

  return /*#__PURE__*/React.createElement(Text, {
    wrapping: false,
    tooltip: cellContent
  }, cellContent);
};

var tableGroupExpandCollapseIcon = {
  color: 'var(--sapContent_IconColor)',
  height: '0.75rem',
  width: '0.75rem',
  padding: '0.625rem',
  display: 'block'
};

var getPadding = function getPadding(level) {
  switch (level) {
    case 0:
      return 0;

    case 1:
      return CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel1;

    case 2:
      return CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel2;

    case 3:
      return CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel3;

    default:
      return "calc(".concat(CssSizeVariables.sapWcrAnalyticalTableTreePaddingLevel3, " + ").concat(level - 3, "rem * 0.5)");
  }
};

var Expandable = function Expandable(props) {
  var cell = props.cell,
      row = props.row,
      column = props.column,
      columns = props.columns;
  var tableColumns = columns.filter(function (_ref) {
    var id = _ref.id;
    return id !== '__ui5wcr__internal_selection_column' && id !== '__ui5wcr__internal_highlight_column';
  });
  var columnIndex = tableColumns.findIndex(function (col) {
    return col.id === column.id;
  });
  var paddingLeft;

  if (row.canExpand) {
    paddingLeft = columnIndex === 0 ? getPadding(row.depth) : 0;
  } else {
    paddingLeft = columnIndex === 0 ? "calc(".concat(getPadding(row.depth), " + 2rem)") : 0;
  }

  var style = {
    paddingLeft: paddingLeft
  };
  return /*#__PURE__*/React.createElement(React.Fragment, null, columnIndex === 0 && row.canExpand ? /*#__PURE__*/React.createElement("span", row.getToggleRowExpandedProps({
    style: style
  }), /*#__PURE__*/React.createElement(Icon, {
    name: "".concat(row.isExpanded ? 'navigation-down-arrow' : 'navigation-right-arrow'),
    style: tableGroupExpandCollapseIcon
  })) : /*#__PURE__*/React.createElement("span", {
    style: style
  }), cell.render('Cell'));
};

var tableGroupExpandCollapseIcon$1 = {
  color: 'var(--sapContent_IconColor)',
  height: '0.75rem',
  width: '0.75rem',
  padding: '0.625rem',
  display: 'block'
};
var Grouped = function Grouped(props) {
  var cell = props.cell,
      row = props.row;
  var style = {};

  if (cell.column.hAlign && (cell.column.hAlign !== TextAlign.Left || cell.column.hAlign !== TextAlign.Begin)) {
    style.marginRight = 'auto';
  }

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", row.getToggleRowExpandedProps({
    style: style
  }), /*#__PURE__*/React.createElement(Icon, {
    name: "".concat(row.isExpanded ? 'navigation-down-arrow' : 'navigation-right-arrow'),
    style: tableGroupExpandCollapseIcon$1
  })), cell.render('Cell'));
};

var RepeatedValue = function RepeatedValue() {
  return null;
};

var DEFAULT_COLUMN_WIDTH = 60;

var defaultFilterMethod = function defaultFilterMethod(filter, row) {
  return new RegExp(filter.value, 'gi').test(String(row[filter.id]));
};

var DefaultColumn = {
  Filter: DefaultFilterComponent,
  canResize: true,
  canReorder: true,
  minWidth: DEFAULT_COLUMN_WIDTH,
  vAlign: VerticalAlign.Middle,
  defaultFilter: defaultFilterMethod,
  Grouped: Grouped,
  Cell: Cell,
  Expandable: Expandable,
  RepeatedValue: RepeatedValue
};

var styles$2 = {
  position: 'absolute',
  top: CssSizeVariables.sapWcrAnalyticalTableRowHeight,
  left: 0,
  right: 0,
  zIndex: 1
};

var DefaultLoadingComponent = function DefaultLoadingComponent(_ref) {
  var style = _ref.style;
  return /*#__PURE__*/React.createElement(Loader, {
    delay: 500,
    style: _objectSpread(_objectSpread({}, styles$2), style)
  });
};

DefaultLoadingComponent.displayName = 'DefaultLoadingComponent';

var getArrayOfLength = function getArrayOfLength(len) {
  return Array.from(Array(len).keys());
};

var TableRow = function TableRow(_ref) {
  var columns = _ref.columns,
      y = _ref.y,
      row = _ref.row;
  var columnOffset = 0;
  return /*#__PURE__*/React.createElement(React.Fragment, null, columns.map(function (column, i) {
    var el = /*#__PURE__*/React.createElement("rect", {
      key: "column-".concat(i, "-row-").concat(row),
      x: columnOffset + 2,
      y: y,
      rx: "2",
      ry: "8",
      width: column.totalWidth - 4,
      height: "16"
    });
    columnOffset += column.totalWidth;
    return el;
  }));
};

var TablePlaceholder = function TablePlaceholder(props) {
  var columns = props.columns,
      _props$rows = props.rows,
      rows = _props$rows === void 0 ? 5 : _props$rows,
      style = props.style,
      rowHeight = props.rowHeight,
      tableWidth = props.tableWidth;
  var height = rows * rowHeight;
  var innerStyles = useMemo(function () {
    return _objectSpread({
      backgroundColor: ThemingParameters.sapList_Background
    }, style);
  }, [style, ThemingParameters.sapList_Background]);
  return /*#__PURE__*/React.createElement(ContentLoader, {
    style: innerStyles,
    height: height,
    width: tableWidth,
    speed: 2,
    backgroundColor: ThemingParameters.sapContent_ImagePlaceholderBackground,
    foregroundColor: ThemingParameters.sapContent_ImagePlaceholderForegroundColor,
    backgroundOpacity: ThemingParameters.sapContent_DisabledOpacity
  }, getArrayOfLength(rows).map(function (_, index) {
    return /*#__PURE__*/React.createElement(TableRow, {
      key: index,
      columns: columns,
      y: rowHeight * index + rowHeight / 2,
      row: index
    });
  }));
};

var DefaultNoDataComponent = function DefaultNoDataComponent(_ref) {
  var noDataText = _ref.noDataText,
      className = _ref.className,
      style = _ref.style;
  return /*#__PURE__*/React.createElement("div", {
    className: className,
    style: style
  }, noDataText);
};

var getColumnId = function getColumnId(column) {
  return typeof column.accessor === 'string' ? column.accessor : column.id;
};

var useDragAndDrop = function useDragAndDrop(props, setColumnOrder, columnOrder, resizeInfo, columns) {
  var onColumnsReordered = props.onColumnsReordered;

  var _useState = useState(''),
      _useState2 = _slicedToArray(_useState, 2),
      dragOver = _useState2[0],
      setDragOver = _useState2[1];

  var handleDragStart = useCallback(function (e) {
    if (resizeInfo.isResizingColumn) {
      e.preventDefault();
      return;
    }

    e.dataTransfer.setData('colId', e.currentTarget.dataset.columnId);
  }, [resizeInfo.isResizingColumn]);
  var handleDragOver = useCallback(function (e) {
    e.preventDefault();
  }, []);
  var handleDragEnter = useCallback(function (e) {
    setDragOver(e.currentTarget.dataset.columnId);
  }, []);
  var handleOnDrop = useCallback(function (e) {
    setDragOver('');
    var droppedColId = e.currentTarget.dataset.columnId;
    var draggedColId = e.dataTransfer.getData('colId');
    if (droppedColId === draggedColId) return;
    var internalColumnOrder = columnOrder.length > 0 ? columnOrder : columns.map(function (col) {
      return getColumnId(col);
    });
    var droppedColIdx = internalColumnOrder.findIndex(function (col) {
      return col === droppedColId;
    });
    var draggedColIdx = internalColumnOrder.findIndex(function (col) {
      return col === draggedColId;
    });

    var tempCols = _toConsumableArray(internalColumnOrder);

    tempCols.splice(droppedColIdx, 0, tempCols.splice(draggedColIdx, 1)[0]);
    setColumnOrder(tempCols);
    var columnsNewOrder = tempCols.map(function (tempColId) {
      return columns.find(function (col) {
        return getColumnId(col) === tempColId;
      });
    });
    onColumnsReordered(enrichEventWithDetails(e, {
      columnsNewOrder: columnsNewOrder,
      column: columns[draggedColIdx]
    }));
  }, [columnOrder, onColumnsReordered]);
  var handleOnDragEnd = useCallback(function () {
    setDragOver('');
  }, [dragOver]);
  return [dragOver, handleDragEnter, handleDragStart, handleDragOver, handleOnDrop, handleOnDragEnd];
};

var ROW_SAMPLE_SIZE = 20;
var DEFAULT_HEADER_NUM_CHAR = 10;
var MAX_WIDTH = 700; // a function, which approximates header px sizes given a character length

var approximateHeaderPxFromCharLength = function approximateHeaderPxFromCharLength(charLength) {
  return charLength < 15 ? Math.sqrt(charLength * 1500) : 8 * charLength;
};

var approximateContentPxFromCharLength = function approximateContentPxFromCharLength(charLength) {
  return 8 * charLength;
};

var columnsDeps = function columnsDeps(deps, _ref) {
  var _ref$instance = _ref.instance,
      state = _ref$instance.state,
      webComponentsReactProperties = _ref$instance.webComponentsReactProperties;
  return [].concat(_toConsumableArray(deps), [state.tableClientWidth, webComponentsReactProperties.scaleWidthMode, webComponentsReactProperties.loading]);
};

var columns = function columns(_columns, _ref2) {
  var instance = _ref2.instance;

  if (!instance.state || !instance.rows) {
    return _columns;
  }

  var rows = instance.rows,
      state = instance.state;
  var hiddenColumns = state.hiddenColumns,
      totalWidth = state.tableClientWidth;
  var _instance$webComponen = instance.webComponentsReactProperties,
      scaleWidthMode = _instance$webComponen.scaleWidthMode,
      loading = _instance$webComponen.loading;
  if (_columns.length === 0 || !totalWidth) return _columns;

  var visibleColumns = _columns.filter(Boolean).filter(function (item) {
    var _item$isVisible;

    return ((_item$isVisible = item.isVisible) !== null && _item$isVisible !== void 0 ? _item$isVisible : true) && !hiddenColumns.includes(item.accessor);
  });

  var calculateDefaultTableWidth = function calculateDefaultTableWidth() {
    var columnsWithFixedWidth = visibleColumns.filter(function (_ref3) {
      var width = _ref3.width;
      return width !== null && width !== void 0 ? width : false;
    }).map(function (_ref4) {
      var width = _ref4.width;
      return width;
    });
    var fixedWidth = columnsWithFixedWidth.reduce(function (acc, val) {
      return acc + val;
    }, 0);
    var defaultColumnsCount = visibleColumns.length - columnsWithFixedWidth.length; // check if columns are visible and table has width

    if (visibleColumns.length > 0 && totalWidth > 0) {
      // set fixedWidth as defaultWidth if visible columns have fixed value
      if (visibleColumns.length === columnsWithFixedWidth.length) {
        return fixedWidth / visibleColumns.length;
      } // spread default columns


      if (totalWidth >= fixedWidth + defaultColumnsCount * DEFAULT_COLUMN_WIDTH) {
        return (totalWidth - fixedWidth) / defaultColumnsCount;
      }
    }

    return DEFAULT_COLUMN_WIDTH;
  };

  var hasData = rows.some(function (row) {
    var _row$original;

    return !((_row$original = row.original) === null || _row$original === void 0 ? void 0 : _row$original.emptyRow);
  });

  if (scaleWidthMode === TableScaleWidthMode.Default || !hasData && loading) {
    var defaultWidth = calculateDefaultTableWidth();
    return _columns.map(function (column) {
      var _column$width;

      return _objectSpread(_objectSpread({}, column), {}, {
        width: (_column$width = column.width) !== null && _column$width !== void 0 ? _column$width : defaultWidth
      });
    });
  }

  var rowSample = rows.slice(0, ROW_SAMPLE_SIZE);
  var columnMeta = visibleColumns.reduce(function (acc, column) {
    if (column.id === '__ui5wcr__internal_selection_column' || column.id === '__ui5wcr__internal_highlight_column') {
      acc[column.accessor] = {
        minHeaderWidth: column.width,
        fullWidth: column.width,
        contentCharAvg: 0
      };
      return acc;
    }

    var headerLength = typeof column.Header === 'string' ? column.Header.length : DEFAULT_HEADER_NUM_CHAR; // max character length

    var contentMaxCharLength = Math.max.apply(Math, [headerLength].concat(_toConsumableArray(rowSample.map(function (row) {
      var _row$values;

      var dataPoint = (_row$values = row.values) === null || _row$values === void 0 ? void 0 : _row$values[column.accessor];

      if (dataPoint) {
        if (typeof dataPoint === 'string') return dataPoint.length;
        if (typeof dataPoint === 'number') return (dataPoint + '').length;
      }

      return 0;
    })))); // avg character length

    var contentCharAvg = rowSample.reduce(function (acc, item) {
      var _item$values;

      var dataPoint = (_item$values = item.values) === null || _item$values === void 0 ? void 0 : _item$values[column.accessor];
      var val = 0;

      if (dataPoint) {
        if (typeof dataPoint === 'string') val = dataPoint.length;
        if (typeof dataPoint === 'number') val = (dataPoint + '').length;
      }

      return acc + val;
    }, 0) / rowSample.length;
    var minHeaderWidth = approximateHeaderPxFromCharLength(headerLength);
    acc[column.accessor] = {
      minHeaderWidth: minHeaderWidth,
      fullWidth: Math.max(minHeaderWidth, approximateContentPxFromCharLength(contentMaxCharLength)),
      contentCharAvg: contentCharAvg
    };
    return acc;
  }, {});
  var totalCharNum = Object.values(columnMeta).reduce(function (acc, item) {
    return acc + item.contentCharAvg;
  }, 0);
  var reservedWidth = visibleColumns.reduce(function (acc, column) {
    var _columnMeta$column$ac = columnMeta[column.accessor],
        minHeaderWidth = _columnMeta$column$ac.minHeaderWidth,
        fullWidth = _columnMeta$column$ac.fullWidth;
    return acc + Math.max(column.minWidth || 0, column.width || 0, minHeaderWidth || 0, scaleWidthMode === TableScaleWidthMode.Grow ? fullWidth : 0) || 0;
  }, 0);
  var availableWidth = totalWidth - reservedWidth;

  if (scaleWidthMode === TableScaleWidthMode.Smart || availableWidth > 0) {
    if (scaleWidthMode === TableScaleWidthMode.Grow) {
      reservedWidth = visibleColumns.reduce(function (acc, column) {
        var minHeaderWidth = columnMeta[column.accessor].minHeaderWidth;
        return acc + Math.max(column.minWidth || 0, column.width || 0, minHeaderWidth || 0) || 0;
      }, 0);
      availableWidth = totalWidth - reservedWidth;
    }

    return _columns.map(function (column) {
      var _column$isVisible;

      var isColumnVisible = ((_column$isVisible = column.isVisible) !== null && _column$isVisible !== void 0 ? _column$isVisible : true) && !hiddenColumns.includes(column.accessor);

      if (isColumnVisible) {
        var _column$width2, _column$minWidth;

        var _columnMeta$column$ac2 = columnMeta[column.accessor],
            minHeaderWidth = _columnMeta$column$ac2.minHeaderWidth,
            contentCharAvg = _columnMeta$column$ac2.contentCharAvg;
        var additionalSpaceFactor = totalCharNum > 0 ? contentCharAvg / totalCharNum : 1 / visibleColumns.length;
        var targetWidth = additionalSpaceFactor * availableWidth + minHeaderWidth;
        return _objectSpread(_objectSpread({}, column), {}, {
          width: (_column$width2 = column.width) !== null && _column$width2 !== void 0 ? _column$width2 : targetWidth,
          minWidth: (_column$minWidth = column.minWidth) !== null && _column$minWidth !== void 0 ? _column$minWidth : minHeaderWidth
        });
      }

      return column;
    });
  } // TableScaleWidthMode Grow


  return _columns.map(function (column) {
    var _column$isVisible2;

    var isColumnVisible = ((_column$isVisible2 = column.isVisible) !== null && _column$isVisible2 !== void 0 ? _column$isVisible2 : true) && !hiddenColumns.includes(column.accessor);

    if (isColumnVisible) {
      var _column$width3;

      var fullWidth = columnMeta[column.accessor].fullWidth;
      return _objectSpread(_objectSpread({}, column), {}, {
        width: (_column$width3 = column.width) !== null && _column$width3 !== void 0 ? _column$width3 : fullWidth,
        maxWidth: MAX_WIDTH
      });
    }

    return column;
  });
};

var useDynamicColumnWidths = function useDynamicColumnWidths(hooks) {
  hooks.columns.push(columns);
  hooks.columnsDeps.push(columnsDeps);
};

var baseStyles = {
  width: '100%',
  height: '100%'
};
var StyleMap = new Map();
StyleMap.set(ValueState.None, baseStyles);
StyleMap.set(ValueState.Success, _objectSpread(_objectSpread({}, baseStyles), {}, {
  backgroundColor: ThemingParameters.sapSuccessColor
}));
StyleMap.set(ValueState.Warning, _objectSpread(_objectSpread({}, baseStyles), {}, {
  backgroundColor: ThemingParameters.sapWarningColor
}));
StyleMap.set(ValueState.Error, _objectSpread(_objectSpread({}, baseStyles), {}, {
  backgroundColor: ThemingParameters.sapErrorColor
}));
StyleMap.set(ValueState.Information, _objectSpread(_objectSpread({}, baseStyles), {}, {
  backgroundColor: ThemingParameters.sapInformationColor
}));
/*
 * COMPONENTS
 */

var Header = function Header() {
  return /*#__PURE__*/React.createElement("div", {
    style: {
      width: '6px'
    }
  });
};

var Cell$1 = function Cell(_ref) {
  var value = _ref.cell.value;
  return /*#__PURE__*/React.createElement("div", {
    style: StyleMap.get(value)
  });
};
/*
 * TABLE HOOKS
 */


var columnsDeps$1 = function columnsDeps(deps, _ref2) {
  var webComponentsReactProperties = _ref2.instance.webComponentsReactProperties;
  return [].concat(_toConsumableArray(deps), [webComponentsReactProperties.withRowHighlight, webComponentsReactProperties.highlightField]);
};

var visibleColumnsDeps = function visibleColumnsDeps(deps, _ref3) {
  var instance = _ref3.instance;
  return [].concat(_toConsumableArray(deps), [instance.webComponentsReactProperties.withRowHighlight]);
};

var visibleColumns = function visibleColumns(currentVisibleColumns, _ref4) {
  var webComponentsReactProperties = _ref4.instance.webComponentsReactProperties;

  if (!webComponentsReactProperties.withRowHighlight) {
    return currentVisibleColumns.filter(function (_ref5) {
      var id = _ref5.id;
      return id !== '__ui5wcr__internal_highlight_column';
    });
  }

  var highlightColumn = currentVisibleColumns.find(function (_ref6) {
    var id = _ref6.id;
    return id === '__ui5wcr__internal_highlight_column';
  });
  return [highlightColumn].concat(_toConsumableArray(currentVisibleColumns.filter(function (_ref7) {
    var id = _ref7.id;
    return id !== '__ui5wcr__internal_highlight_column';
  })));
};

var columns$1 = function columns(currentColumns, _ref8) {
  var instance = _ref8.instance;
  var _instance$webComponen = instance.webComponentsReactProperties,
      withRowHighlight = _instance$webComponen.withRowHighlight,
      highlightField = _instance$webComponen.highlightField;

  if (!withRowHighlight) {
    return currentColumns;
  }

  return [{
    id: '__ui5wcr__internal_highlight_column',
    accessor: highlightField,
    disableFilters: true,
    disableSortBy: true,
    disableGroupBy: true,
    disableResizing: true,
    canReorder: false,
    width: 6,
    minWidth: 6,
    maxWidth: 6,
    Header: Header,
    Cell: Cell$1
  }].concat(_toConsumableArray(currentColumns));
};

var useRowHighlight = function useRowHighlight(hooks) {
  hooks.columns.push(columns$1);
  hooks.columnsDeps.push(columnsDeps$1);
  hooks.visibleColumnsDeps.push(visibleColumnsDeps);
  hooks.visibleColumns.push(visibleColumns);
};
useRowHighlight.pluginName = 'useRowHighlight';

var divStyle = {
  width: '100%',
  height: '100%',
  cursor: 'pointer'
};
var customCheckBoxStyling = {
  cursor: 'pointer',
  verticalAlign: 'middle'
};
/*
 * COMPONENTS
 */

var Header$1 = function Header(_ref) {
  var getToggleAllRowsSelectedProps = _ref.getToggleAllRowsSelectedProps,
      flatRows = _ref.flatRows,
      _ref$webComponentsRea = _ref.webComponentsReactProperties,
      onRowSelected = _ref$webComponentsRea.onRowSelected,
      selectionMode = _ref$webComponentsRea.selectionMode,
      toggleAllRowsSelected = _ref.toggleAllRowsSelected;
  var onChange = useCallback(function (e) {
    var allRowsSelected = e.target.checked;
    toggleAllRowsSelected(allRowsSelected);

    if (typeof onRowSelected === 'function') {
      onRowSelected( // cannot use instance.selectedFlatRows here as it only returns all rows on the first level
      enrichEventWithDetails(e, {
        allRowsSelected: allRowsSelected,
        selectedFlatRows: allRowsSelected ? flatRows : []
      }));
    }
  }, [toggleAllRowsSelected, flatRows]);

  if (selectionMode === TableSelectionMode.SINGLE_SELECT) {
    return null;
  }

  return /*#__PURE__*/React.createElement(CheckBox, _extends({}, getToggleAllRowsSelectedProps(), {
    style: customCheckBoxStyling,
    onChange: onChange
  }));
};

var Cell$2 = function Cell(_ref2) {
  var row = _ref2.row,
      _ref2$webComponentsRe = _ref2.webComponentsReactProperties,
      selectionBehavior = _ref2$webComponentsRe.selectionBehavior,
      selectionMode = _ref2$webComponentsRe.selectionMode;
  var handleCellClick = useCallback(function (e) {
    if (TableSelectionBehavior.ROW_SELECTOR === selectionBehavior) {
      row.getRowProps().onClick(e, true);
    }
  }, [selectionMode, row]);

  if (row.isGrouped && selectionMode === TableSelectionMode.SINGLE_SELECT) {
    return null;
  }

  if (selectionMode === TableSelectionMode.SINGLE_SELECT) {
    return /*#__PURE__*/React.createElement("div", {
      style: divStyle,
      onClick: handleCellClick
    });
  }

  return /*#__PURE__*/React.createElement(CheckBox, _extends({}, row.getToggleRowSelectedProps(), {
    onChange: handleCellClick,
    style: customCheckBoxStyling,
    "data-name": "internal_selection_column"
  }));
};
/*
 * TABLE HOOKS
 */


var columnDeps = function columnDeps(deps, _ref3) {
  var webComponentsReactProperties = _ref3.instance.webComponentsReactProperties;
  return [].concat(_toConsumableArray(deps), [webComponentsReactProperties.selectionMode, webComponentsReactProperties.selectionBehavior]);
};

var visibleColumnsDeps$1 = function visibleColumnsDeps(deps, _ref4) {
  var instance = _ref4.instance;
  return [].concat(_toConsumableArray(deps), [instance.webComponentsReactProperties.selectionMode, instance.webComponentsReactProperties.selectionBehavior]);
};

var visibleColumns$1 = function visibleColumns(currentVisibleColumns, _ref5) {
  var webComponentsReactProperties = _ref5.instance.webComponentsReactProperties;

  if (webComponentsReactProperties.selectionMode === TableSelectionMode.NONE || webComponentsReactProperties.selectionBehavior === TableSelectionBehavior.ROW_ONLY) {
    return currentVisibleColumns;
  }

  var selectionColumn = currentVisibleColumns.find(function (_ref6) {
    var id = _ref6.id;
    return id === '__ui5wcr__internal_selection_column';
  });
  return [selectionColumn].concat(_toConsumableArray(currentVisibleColumns.filter(function (_ref7) {
    var id = _ref7.id;
    return id !== '__ui5wcr__internal_selection_column';
  })));
};

var columns$2 = function columns(currentColumns, _ref8) {
  var instance = _ref8.instance;
  var webComponentsReactProperties = instance.webComponentsReactProperties;
  var selectionMode = webComponentsReactProperties.selectionMode,
      selectionBehavior = webComponentsReactProperties.selectionBehavior,
      tableRef = webComponentsReactProperties.tableRef;

  if (selectionMode === TableSelectionMode.NONE || selectionBehavior === TableSelectionBehavior.ROW_ONLY) {
    return currentColumns;
  }

  var selectionColumnWidth = tableRef.current ? parseInt(getComputedStyle(tableRef.current).getPropertyValue("--".concat(CssSizeVariablesNames.sapWcrAnalyticalTableSelectionColumnWidth)), 10) : 47;
  return [{
    id: '__ui5wcr__internal_selection_column',
    accessor: '__ui5wcr__internal_selection_column',
    disableFilters: true,
    disableSortBy: true,
    disableGroupBy: true,
    disableResizing: true,
    canReorder: false,
    width: selectionColumnWidth,
    minWidth: selectionColumnWidth,
    maxWidth: selectionColumnWidth,
    Header: Header$1,
    Cell: Cell$2
  }].concat(_toConsumableArray(currentColumns));
};

var useRowSelectionColumn = function useRowSelectionColumn(hooks) {
  hooks.columns.push(columns$2);
  hooks.columnsDeps.push(columnDeps);
  hooks.visibleColumnsDeps.push(visibleColumnsDeps$1);
  hooks.visibleColumns.push(visibleColumns$1);
};
useRowSelectionColumn.pluginName = 'useRowSelectionColumn';

var prepareRow = function prepareRow(row, _ref) {
  var instance = _ref.instance;

  row.selectSingleRow = function (event) {
    var selectionCellClick = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
    instance.selectSingleRow(row, event, selectionCellClick);
  };
};

var getRowProps = function getRowProps(rowProps, _ref2) {
  var row = _ref2.row;
  return [rowProps, {
    onClick: row.selectSingleRow
  }];
};

var tagNamesWhichShouldNotSelectARow = new Set(['UI5-INPUT', 'UI5-LINK', 'UI5-BUTTON', 'UI5-CHECKBOX', 'UI5-COMBOBOX', 'UI5-DATEPICKER', 'UI5-MULTI-COMBOBOX', 'UI5-SELECT', 'UI5-RADIOBUTTON', 'UI5-SEGMENTEDBUTTON', 'UI5-SWITCH', 'UI5-TOGGLEBUTTON']);

var useInstance = function useInstance(instance) {
  var webComponentsReactProperties = instance.webComponentsReactProperties,
      dispatch = instance.dispatch,
      toggleRowSelected = instance.toggleRowSelected,
      selectedFlatRows = instance.selectedFlatRows;
  var isTreeTable = webComponentsReactProperties.isTreeTable,
      selectionMode = webComponentsReactProperties.selectionMode,
      onRowSelected = webComponentsReactProperties.onRowSelected,
      selectionBehavior = webComponentsReactProperties.selectionBehavior;
  var selectSingleRow = useCallback(function (row, e) {
    var _e$target, _e$target$dataset, _e$nativeEvent, _row$original;

    var selectionCellClick = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

    if (((_e$target = e.target) === null || _e$target === void 0 ? void 0 : (_e$target$dataset = _e$target.dataset) === null || _e$target$dataset === void 0 ? void 0 : _e$target$dataset.name) !== 'internal_selection_column' && !(e.markerAllowTableRowSelection === true || ((_e$nativeEvent = e.nativeEvent) === null || _e$nativeEvent === void 0 ? void 0 : _e$nativeEvent.markerAllowTableRowSelection) === true) && tagNamesWhichShouldNotSelectARow.has(e.target.tagName)) {
      return;
    }

    var isEmptyRow = (_row$original = row.original) === null || _row$original === void 0 ? void 0 : _row$original.emptyRow;

    if ([TableSelectionMode.SINGLE_SELECT, TableSelectionMode.MULTI_SELECT].includes(selectionMode) && !isEmptyRow) {
      if (row.isGrouped || TableSelectionBehavior.ROW_SELECTOR === selectionBehavior && !selectionCellClick) {
        return;
      }

      if (isTreeTable) {
        if (selectionMode === TableSelectionMode.MULTI_SELECT) {
          dispatch({
            type: 'SET_SELECTED_ROWS',
            selectedIds: Object.assign.apply(Object, [{}].concat(_toConsumableArray(selectedFlatRows.map(function (item) {
              return _defineProperty({}, item.id, true);
            })), [_defineProperty({}, row.id, !row.isSelected)]))
          });
        } else {
          dispatch({
            type: 'SET_SELECTED_ROWS',
            selectedIds: _defineProperty({}, row.id, !row.isSelected)
          });
        }
      } else {
        row.toggleRowSelected();
      }

      if (typeof onRowSelected === 'function') {
        var payload = {
          row: row,
          isSelected: !row.isSelected
        };

        var payloadWithFlatRows = _objectSpread(_objectSpread({}, payload), {}, {
          selectedFlatRows: !row.isSelected ? [].concat(_toConsumableArray(selectedFlatRows), [row]) : selectedFlatRows.filter(function (prevRow) {
            return prevRow.id !== row.id;
          })
        });

        onRowSelected(enrichEventWithDetails(e, TableSelectionMode.MULTI_SELECT === selectionMode ? payloadWithFlatRows : payload));
      }

      if (selectionMode === TableSelectionMode.SINGLE_SELECT && !isTreeTable) {
        selectedFlatRows.forEach(function (_ref5) {
          var id = _ref5.id;
          toggleRowSelected(id, false);
        });
      }
    }
  }, [selectionMode, isTreeTable, dispatch, selectedFlatRows, onRowSelected, toggleRowSelected]);
  Object.assign(instance, {
    selectSingleRow: selectSingleRow
  });
};

var useSingleRowStateSelection = function useSingleRowStateSelection(hooks) {
  hooks.useInstance.push(useInstance);
  hooks.prepareRow.push(prepareRow);
  hooks.getRowProps.push(getRowProps);
};
useSingleRowStateSelection.pluginName = 'useSingleRowStateSelection';

var getTableProps = function getTableProps(tableProps, _ref) {
  var instance = _ref.instance;
  var classes = instance.webComponentsReactProperties.classes;
  return [tableProps, {
    className: classes.table
  }];
};

var getHeaderGroupProps = function getHeaderGroupProps(headerGroupProps, _ref2) {
  var instance = _ref2.instance;
  var classes = instance.webComponentsReactProperties.classes;
  return [headerGroupProps, {
    className: classes.tableHeaderRow
  }];
};

var getHeaderProps = function getHeaderProps(columnProps, _ref3) {
  var instance = _ref3.instance,
      column = _ref3.column;
  var classes = instance.webComponentsReactProperties.classes;
  var isRTL = getRTL();
  var lastColumnId = instance.visibleColumns[instance.visibleColumns.length - 1].id;
  var isLastColumn = column.id === lastColumnId;
  var style = {
    width: column.totalWidth
  };

  if (instance.state.isScrollable && isLastColumn) {
    style[isRTL ? 'paddingLeft' : 'paddingRight'] = ThemingParameters.sapScrollBar_Dimension;
  }

  if (column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_selection_column') {
    style.padding = 0;
  }

  return [columnProps, {
    className: classes.th,
    column: column,
    style: style,
    id: column.id
  }];
};

var ROW_SELECTION_ATTRIBUTE = 'data-is-selected';

var getRowProps$1 = function getRowProps(rowProps, _ref4) {
  var _row$original;

  var instance = _ref4.instance,
      row = _ref4.row;
  var webComponentsReactProperties = instance.webComponentsReactProperties;
  var classes = webComponentsReactProperties.classes,
      selectionBehavior = webComponentsReactProperties.selectionBehavior,
      selectionMode = webComponentsReactProperties.selectionMode,
      alternateRowColor = webComponentsReactProperties.alternateRowColor;
  var isEmptyRow = (_row$original = row.original) === null || _row$original === void 0 ? void 0 : _row$original.emptyRow;
  var className = classes.tr;
  var rowCanBeSelected = [TableSelectionMode.SINGLE_SELECT, TableSelectionMode.MULTI_SELECT].includes(selectionMode) && !isEmptyRow;

  if (row.isGrouped) {
    className += " ".concat(classes.tableGroupHeader);
  }

  if (alternateRowColor && row.index % 2 !== 0) {
    className += " ".concat(classes.alternateRowColor);
  }

  var newRowProps = {
    className: className,
    role: 'row',
    'aria-rowindex': row.index
  };

  if (rowCanBeSelected) {
    if (TableSelectionBehavior.ROW_SELECTOR !== selectionBehavior) {
      newRowProps.className += " ".concat(classes.trActive);
    }

    if (row.isSelected) {
      newRowProps[ROW_SELECTION_ATTRIBUTE] = '';
    }
  }

  return [rowProps, newRowProps];
};

var getCellProps = function getCellProps(cellProps, _ref5) {
  var column = _ref5.cell.column,
      instance = _ref5.instance;
  var columnIndex = instance.visibleColumns.findIndex(function (_ref6) {
    var id = _ref6.id;
    return id === column.id;
  });
  var isLastColumn = instance.visibleColumns.length === columnIndex + 1;
  var classes = instance.webComponentsReactProperties.classes;
  var style = {};

  switch (column.hAlign) {
    case TextAlign.Begin:
      style.justifyContent = 'flex-start';
      style.textAlign = 'start';
      break;

    case TextAlign.Center:
      style.justifyContent = 'center';
      style.textAlign = 'center';
      break;

    case TextAlign.End:
      style.justifyContent = 'flex-end';
      style.textAlign = 'end';
      break;

    case TextAlign.Left:
      style.justifyContent = 'left';
      style.textAlign = 'left';
      break;

    case TextAlign.Right:
      style.justifyContent = 'right';
      style.textAlign = 'right';
      break;
  }

  switch (column.vAlign) {
    case VerticalAlign.Bottom:
      style.alignItems = 'flex-end';
      break;

    case VerticalAlign.Middle:
      style.alignItems = 'center';
      break;

    case VerticalAlign.Top:
      style.alignItems = 'flex-start';
      break;
  }

  var className = classes.tableCell;

  if (column.className) {
    className += " ".concat(column.className);
  }

  if (column.id === '__ui5wcr__internal_highlight_column' || column.id === '__ui5wcr__internal_selection_column') {
    style.padding = 0;
  }

  if (isLastColumn && instance.state.isScrollable) {
    style.width = "calc(".concat(column.totalWidth, "px - ").concat(ThemingParameters.sapScrollBar_Dimension, ")");
  } else {
    style.width = "".concat(column.totalWidth, "px");
  }

  return [cellProps, {
    className: className,
    style: style,
    tabIndex: -1,
    'aria-colindex': columnIndex + 1 // aria index is 1 based, not 0

  }];
};

var useStyling = function useStyling(hooks) {
  hooks.getTableProps.push(getTableProps);
  hooks.getHeaderGroupProps.push(getHeaderGroupProps);
  hooks.getHeaderProps.push(getHeaderProps);
  hooks.getRowProps.push(getRowProps$1);
  hooks.getCellProps.push(getCellProps);
};
useStyling.pluginName = 'useStyling';

var useTableScrollHandles = function useTableScrollHandles(ref) {
  var analyticalTableRef = useConsolidatedRef(ref);
  var reactWindowRef = useRef({});
  useEffect(function () {
    if (analyticalTableRef.current) {
      Object.assign(analyticalTableRef.current, {
        scrollTo: function scrollTo(offset, align) {
          var _reactWindowRef$curre;

          if (typeof ((_reactWindowRef$curre = reactWindowRef.current) === null || _reactWindowRef$curre === void 0 ? void 0 : _reactWindowRef$curre.scrollToOffset) === 'function') {
            reactWindowRef.current.scrollToOffset(offset, {
              align: align
            });
          }
        },
        scrollToItem: function scrollToItem(index, align) {
          var _reactWindowRef$curre2;

          if (typeof ((_reactWindowRef$curre2 = reactWindowRef.current) === null || _reactWindowRef$curre2 === void 0 ? void 0 : _reactWindowRef$curre2.scrollToIndex) === 'function') {
            reactWindowRef.current.scrollToIndex(index, {
              align: align
            });
          }
        }
      });
    }
  }, [analyticalTableRef.current, reactWindowRef.current.scrollToIndex, reactWindowRef.current.scrollToOffset]);
  return [analyticalTableRef, reactWindowRef];
};

var getToggleRowExpandedProps = function getToggleRowExpandedProps(rowProps, _ref) {
  var row = _ref.row,
      instance = _ref.instance;
  var _instance$webComponen = instance.webComponentsReactProperties,
      onRowExpandChange = _instance$webComponen.onRowExpandChange,
      isTreeTable = _instance$webComponen.isTreeTable;
  var onClick = useCallback(function (e) {
    e.stopPropagation();
    e.persist();
    row.toggleRowExpanded();
    var column = null;

    if (!isTreeTable) {
      column = row.cells.find(function (cell) {
        return cell.column.id === row.groupByID;
      }).column;
    }

    onRowExpandChange(enrichEventWithDetails(e, {
      row: row,
      column: column
    }));
  }, [row, isTreeTable, onRowExpandChange]);
  return [rowProps, {
    onClick: onClick
  }];
};

var useToggleRowExpand = function useToggleRowExpand(hooks) {
  hooks.getToggleRowExpandedProps.push(getToggleRowExpandedProps);
};
useToggleRowExpand.pluginName = 'useToggleRowExpand';

function deepCompare(obj1, obj2) {
  //Loop through properties in object 1
  if (!obj1 && obj2 || obj1 && !obj2) {
    return false;
  }

  for (var p in obj1) {
    //Check property exists on both objects
    if (obj1.hasOwnProperty(p) !== obj2.hasOwnProperty(p)) return false;

    switch (typeof obj1[p]) {
      //Deep compare objects
      case 'object':
        if (!deepCompare(obj1[p], obj2[p])) return false;
        break;
      //Compare function code

      case 'function':
        if (typeof obj2[p] == 'undefined' || p != 'compare' && obj1[p].toString() != obj2[p].toString()) return false;
        break;
      //Compare values

      default:
        if (obj1[p] != obj2[p]) return false;
    }
  } //Check object 2 for any extra properties


  for (var _p in obj2) {
    if (typeof obj2[_p] !== 'undefined' && typeof obj1[_p] === 'undefined') {
      return false;
    } // if (typeof (obj1[p]) == 'undefined') return false;

  }

  return true;
}

var stateReducer = function stateReducer(newState, action) {
  var payload = action.payload;

  switch (action.type) {
    case 'SET_GROUP_BY':
      if (deepCompare(newState.groupBy, payload)) {
        return newState;
      }

      return _objectSpread(_objectSpread({}, newState), {}, {
        groupBy: payload
      });

    case 'SET_SELECTED_ROWS':
      if (deepCompare(newState.selectedRowIds, action.selectedIds)) {
        return newState;
      }

      return _objectSpread(_objectSpread({}, newState), {}, {
        selectedRowIds: action.selectedIds
      });

    case 'TABLE_RESIZE':
      return _objectSpread(_objectSpread({}, newState), {}, {
        tableClientWidth: payload.tableClientWidth
      });

    case 'TABLE_SCROLLING_ENABLED':
      return _objectSpread(_objectSpread({}, newState), {}, {
        isScrollable: payload.isScrollable
      });

    default:
      return newState;
  }
};

var styles$3 = {
  minHeight: '1.5rem',
  display: 'flex',
  alignItems: 'center'
};
var TitleBar = function TitleBar(props) {
  var children = props.children;
  return /*#__PURE__*/React.createElement("div", {
    style: styles$3
  }, typeof children === 'string' && /*#__PURE__*/React.createElement(Title, null, children), isValidElement(children) && children);
};

var orderByFn = function orderByFn(rows, functions, directions) {
  var wrapSortFn = function wrapSortFn(sortFn, index) {
    var desc = directions[index] === false || directions[index] === 'desc';
    return function (rowA, rowB) {
      var _rowA$original, _rowB$original, _rowA$original2, _rowB$original2, _rowA$original3, _rowB$original3;

      if (((_rowA$original = rowA.original) === null || _rowA$original === void 0 ? void 0 : _rowA$original.emptyRow) && !((_rowB$original = rowB.original) === null || _rowB$original === void 0 ? void 0 : _rowB$original.emptyRow)) {
        return desc ? -1 : 1;
      }

      if (!((_rowA$original2 = rowA.original) === null || _rowA$original2 === void 0 ? void 0 : _rowA$original2.emptyRow) && ((_rowB$original2 = rowB.original) === null || _rowB$original2 === void 0 ? void 0 : _rowB$original2.emptyRow)) {
        return desc ? 1 : -1;
      }

      if (((_rowA$original3 = rowA.original) === null || _rowA$original3 === void 0 ? void 0 : _rowA$original3.emptyRow) && ((_rowB$original3 = rowB.original) === null || _rowB$original3 === void 0 ? void 0 : _rowB$original3.emptyRow)) {
        return 0;
      }

      return sortFn(rowA, rowB);
    };
  };

  var wrappedSortfunctions = functions.map(wrapSortFn);
  return defaultOrderByFn(rows, wrappedSortfunctions, directions);
};

var VirtualTableBody = function VirtualTableBody(props) {
  var classes = props.classes,
      prepareRow = props.prepareRow,
      rows = props.rows,
      minRows = props.minRows,
      selectionMode = props.selectionMode,
      reactWindowRef = props.reactWindowRef,
      isTreeTable = props.isTreeTable,
      internalRowHeight = props.internalRowHeight,
      tableBodyHeight = props.tableBodyHeight,
      visibleRows = props.visibleRows,
      overscanCount = props.overscanCount,
      totalColumnsWidth = props.totalColumnsWidth,
      infiniteScroll = props.infiniteScroll,
      infiniteScrollThreshold = props.infiniteScrollThreshold,
      onLoadMore = props.onLoadMore;
  var firedInfiniteLoadEvents = useRef(new Set());
  var itemCount = Math.max(minRows, rows.length);
  var overscan = overscanCount ? overscanCount : Math.floor(visibleRows / 2);
  var parentRef = useRef();
  var rowVirtualizer = useVirtual({
    size: itemCount,
    parentRef: parentRef,
    estimateSize: React.useCallback(function () {
      return internalRowHeight;
    }, [internalRowHeight]),
    overscan: overscan
  });
  reactWindowRef.current = {
    scrollToOffset: rowVirtualizer.scrollToOffset,
    scrollToIndex: rowVirtualizer.scrollToIndex
  };
  var classNames = StyleClassHelper.of(classes.tbody, GlobalStyleClasses.sapScrollBar);
  var lastScrollTop = useRef(0);
  var onScroll = useCallback(function (event) {
    var scrollOffset = event.target.scrollTop;
    var isScrollingDown = lastScrollTop.current < scrollOffset;

    if (isScrollingDown && infiniteScroll) {
      lastScrollTop.current = scrollOffset;
      var currentTopRow = Math.floor(scrollOffset / internalRowHeight);

      if (rows.length - currentTopRow < infiniteScrollThreshold) {
        if (!firedInfiniteLoadEvents.current.has(rows.length)) {
          onLoadMore({
            detail: {
              rowCount: rows.length
            }
          });
        }

        firedInfiniteLoadEvents.current.add(rows.length);
      }
    }
  }, [infiniteScroll, infiniteScrollThreshold, onLoadMore, rows.length, internalRowHeight, firedInfiniteLoadEvents, lastScrollTop]);
  var currentlyFocusedCell = useRef(null);
  var onTableFocus = useCallback(function (e) {
    var firstCell = e.target.querySelector('div[role="row"]:first-child div[role="cell"]:first-child');

    if (firstCell) {
      firstCell.tabIndex = 0;
      firstCell.focus();
      currentlyFocusedCell.current = firstCell;
    }
  }, [currentlyFocusedCell]);
  var onKeyboardNavigation = useCallback(function (e) {
    if (currentlyFocusedCell.current) {
      switch (e.key) {
        case 'ArrowRight':
          {
            var newElement = currentlyFocusedCell.current.nextElementSibling;

            if (newElement) {
              currentlyFocusedCell.current.tabIndex = -1;
              newElement.tabIndex = 0;
              newElement.focus();
              currentlyFocusedCell.current = newElement;
            }

            break;
          }

        case 'ArrowLeft':
          {
            var _newElement = currentlyFocusedCell.current.previousElementSibling;

            if (_newElement) {
              currentlyFocusedCell.current.tabIndex = -1;
              _newElement.tabIndex = 0;

              _newElement.focus();

              currentlyFocusedCell.current = _newElement;
            }

            break;
          }

        case 'ArrowDown':
          {
            var nextRow = currentlyFocusedCell.current.parentElement.nextElementSibling;

            if (nextRow) {
              currentlyFocusedCell.current.tabIndex = -1;
              var currentColumnIndex = currentlyFocusedCell.current.getAttribute('aria-colindex');

              var _newElement2 = nextRow.querySelector("div[aria-colindex=\"".concat(currentColumnIndex, "\"]"));

              _newElement2.tabIndex = 0;

              _newElement2.focus();

              currentlyFocusedCell.current = _newElement2;
            }

            break;
          }

        case 'ArrowUp':
          {
            var previousRow = currentlyFocusedCell.current.parentElement.previousElementSibling;

            if (previousRow) {
              currentlyFocusedCell.current.tabIndex = -1;

              var _currentColumnIndex = currentlyFocusedCell.current.getAttribute('aria-colindex');

              var _newElement3 = previousRow.querySelector("div[aria-colindex=\"".concat(_currentColumnIndex, "\"]"));

              _newElement3.tabIndex = 0;

              _newElement3.focus();

              currentlyFocusedCell.current = _newElement3;
            }

            break;
          }
      }
    }
  }, [currentlyFocusedCell]);
  return /*#__PURE__*/React.createElement("div", {
    className: classNames.valueOf(),
    ref: parentRef,
    onScroll: onScroll,
    style: {
      height: "".concat(tableBodyHeight, "px"),
      width: "".concat(totalColumnsWidth, "px")
    }
  }, /*#__PURE__*/React.createElement("div", {
    tabIndex: 0,
    onFocus: onTableFocus,
    onKeyDown: onKeyboardNavigation,
    style: {
      height: "".concat(rowVirtualizer.totalSize, "px"),
      width: "".concat(totalColumnsWidth, "px"),
      position: 'relative'
    }
  }, rowVirtualizer.virtualItems.map(function (virtualRow) {
    var row = rows[virtualRow.index];

    if (!row) {
      return /*#__PURE__*/React.createElement("div", {
        key: "empty_row_".concat(virtualRow.index),
        className: classes.tr,
        style: {
          height: "".concat(virtualRow.size, "px"),
          transform: "translateY(".concat(virtualRow.start, "px)")
        }
      });
    }

    prepareRow(row);
    var rowProps = row.getRowProps();
    return /*#__PURE__*/React.createElement("div", _extends({}, rowProps, {
      style: {
        height: "".concat(virtualRow.size, "px"),
        transform: "translateY(".concat(virtualRow.start, "px)")
      }
    }), row.cells.map(function (cell) {
      var _row$original;

      var cellProps = cell.getCellProps();

      if ((_row$original = row.original) === null || _row$original === void 0 ? void 0 : _row$original.emptyRow) {
        return /*#__PURE__*/React.createElement("div", cellProps);
      }

      var contentToRender;

      if (cell.column.id == '__ui5wcr__internal_highlight_column' || cell.column.id === '__ui5wcr__internal_selection_column') {
        contentToRender = 'Cell';
      } else if (isTreeTable) {
        contentToRender = 'Expandable';
      } else if (cell.isGrouped) {
        contentToRender = 'Grouped';
      } else if (cell.isAggregated) {
        contentToRender = 'Aggregated';
      } else if (cell.isPlaceholder) {
        contentToRender = 'RepeatedValue';
      } else {
        contentToRender = 'Cell';
      } // eslint-disable-next-line react/jsx-key


      return /*#__PURE__*/React.createElement("div", cellProps, cell.render(contentToRender));
    }));
  })));
};

var useStyles$1 = createComponentStyles(styles, {
  name: 'AnalyticalTable'
});
/**
 * <code>import { AnalyticalTable } from '@ui5/webcomponents-react/lib/AnalyticalTable';</code><br />
 * <br />
 * ### Usage Notes
 * By default, the `AnalyticalTable` will not select any rows after clicking on active elements like a `Button`, `Link`,
 * etc. <br />
 * In case you want to select the row anyways, you can "mark" the event to allow such a behaviour. <br />
 * Example: `<Link onClick={(e) => {e.markerAllowTableRowSelection = true;}>My Link Text</Link>`
 */

var AnalyticalTable = forwardRef(function (props, ref) {
  var _tableRef$current, _props$data, _props$data2, _props$data3, _props$data4;

  var columns = props.columns,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      title = props.title,
      loading = props.loading,
      groupBy = props.groupBy,
      selectionMode = props.selectionMode,
      selectionBehavior = props.selectionBehavior,
      onRowSelected = props.onRowSelected,
      onSort = props.onSort,
      reactTableOptions = props.reactTableOptions,
      tableHooks = props.tableHooks,
      busyIndicatorEnabled = props.busyIndicatorEnabled,
      subRowsKey = props.subRowsKey,
      onGroup = props.onGroup,
      rowHeight = props.rowHeight,
      selectedRowIds = props.selectedRowIds,
      LoadingComponent = props.LoadingComponent,
      onRowExpandChange = props.onRowExpandChange,
      noDataText = props.noDataText,
      NoDataComponent = props.NoDataComponent,
      visibleRows = props.visibleRows,
      minRows = props.minRows,
      isTreeTable = props.isTreeTable,
      alternateRowColor = props.alternateRowColor,
      overscanCount = props.overscanCount,
      scaleWidthMode = props.scaleWidthMode,
      withRowHighlight = props.withRowHighlight,
      _props$highlightField = props.highlightField,
      highlightField = _props$highlightField === void 0 ? 'status' : _props$highlightField,
      groupable = props.groupable,
      sortable = props.sortable,
      filterable = props.filterable,
      infiniteScroll = props.infiniteScroll,
      _props$infiniteScroll = props.infiniteScrollThreshold,
      infiniteScrollThreshold = _props$infiniteScroll === void 0 ? 20 : _props$infiniteScroll,
      onLoadMore = props.onLoadMore;
  var classes = useStyles$1();

  var _useTableScrollHandle = useTableScrollHandles(ref),
      _useTableScrollHandle2 = _slicedToArray(_useTableScrollHandle, 2),
      analyticalTableRef = _useTableScrollHandle2[0],
      reactWindowRef = _useTableScrollHandle2[1];

  var tableRef = useRef();
  var extension = useDeprecateRenderMethods(props, 'renderExtension', 'extension');
  var getSubRows = useCallback(function (row) {
    return row[subRowsKey] || [];
  }, [subRowsKey]);
  var data = useMemo(function () {
    if (minRows > props.data.length) {
      var missingRows = minRows - props.data.length;
      var emptyRows = Array.from({
        length: missingRows
      }, function (v, i) {
        return i;
      }).map(function () {
        return {
          emptyRow: true
        };
      });
      return [].concat(_toConsumableArray(props.data), _toConsumableArray(emptyRows));
    }

    return props.data;
  }, [props.data, minRows]);

  var _useTable = useTable.apply(void 0, [_objectSpread({
    columns: columns,
    data: data,
    defaultColumn: DefaultColumn,
    orderByFn: orderByFn,
    getSubRows: getSubRows,
    stateReducer: stateReducer,
    disableFilters: !filterable,
    disableSortBy: !sortable,
    disableGroupBy: !groupable,
    webComponentsReactProperties: {
      tableRef: tableRef,
      selectionMode: selectionMode,
      selectionBehavior: selectionBehavior,
      classes: classes,
      onRowSelected: onRowSelected,
      onRowExpandChange: onRowExpandChange,
      isTreeTable: isTreeTable,
      alternateRowColor: alternateRowColor,
      scaleWidthMode: scaleWidthMode,
      loading: loading,
      withRowHighlight: withRowHighlight,
      highlightField: highlightField
    }
  }, reactTableOptions), useFilters, useGroupBy, useColumnOrder, useSortBy, useExpanded, useRowSelect, useResizeColumns, useRowSelectionColumn, useSingleRowStateSelection, useRowHighlight, useDynamicColumnWidths, useStyling, useToggleRowExpand].concat(_toConsumableArray(tableHooks))),
      getTableProps = _useTable.getTableProps,
      headerGroups = _useTable.headerGroups,
      rows = _useTable.rows,
      prepareRow = _useTable.prepareRow,
      tableState = _useTable.state,
      tableInternalColumns = _useTable.columns,
      setColumnOrder = _useTable.setColumnOrder,
      dispatch = _useTable.dispatch,
      totalColumnsWidth = _useTable.totalColumnsWidth,
      selectedFlatRows = _useTable.selectedFlatRows; // scroll bar detection


  useEffect(function () {
    var visibleRowCount = rows.length < visibleRows ? Math.max(rows.length, minRows) : visibleRows;
    dispatch({
      type: 'TABLE_SCROLLING_ENABLED',
      payload: {
        isScrollable: rows.length > visibleRowCount
      }
    });
  }, [rows.length, minRows, visibleRows]);
  var updateTableClientWidth = useCallback(function () {
    if (tableRef.current) {
      dispatch({
        type: 'TABLE_RESIZE',
        payload: {
          tableClientWidth: tableRef.current.clientWidth
        }
      });
    }
  }, []);
  useEffect(function () {
    // @ts-ignore
    var tableWidthObserver = new ResizeObserver(debounce(updateTableClientWidth, 500));
    tableWidthObserver.observe(tableRef.current);
    return function () {
      tableWidthObserver.disconnect();
    };
  }, [updateTableClientWidth]);
  useEffect(function () {
    updateTableClientWidth();
  }, [updateTableClientWidth]);
  useEffect(function () {
    dispatch({
      type: 'SET_GROUP_BY',
      payload: groupBy
    });
  }, [groupBy, dispatch]);
  useEffect(function () {
    dispatch({
      type: 'SET_SELECTED_ROWS',
      selectedIds: selectedRowIds
    });
  }, [selectedRowIds, dispatch]);
  var calcRowHeight = parseInt(getComputedStyle((_tableRef$current = tableRef.current) !== null && _tableRef$current !== void 0 ? _tableRef$current : document.body).getPropertyValue('--sapWcrAnalyticalTableRowHeight') || '44');
  var internalRowHeight = rowHeight !== null && rowHeight !== void 0 ? rowHeight : calcRowHeight;
  var tableBodyHeight = useMemo(function () {
    var rowNum = rows.length < visibleRows ? Math.max(rows.length, minRows) : visibleRows;
    return internalRowHeight * rowNum;
  }, [internalRowHeight, rows.length, visibleRows, minRows]);
  var noDataStyles = useMemo(function () {
    return {
      height: "".concat(tableBodyHeight, "px"),
      width: "".concat(totalColumnsWidth, "px")
    };
  }, [tableBodyHeight, totalColumnsWidth]);
  var onGroupByChanged = useCallback(function (e) {
    var _e$detail = e.detail,
        column = _e$detail.column,
        isGrouped = _e$detail.isGrouped;
    var groupedColumns = [];

    if (isGrouped) {
      groupedColumns = [].concat(_toConsumableArray(tableState.groupBy), [column.id]);
    } else {
      groupedColumns = tableState.groupBy.filter(function (group) {
        return group !== column.id;
      });
    }

    dispatch({
      type: 'SET_GROUP_BY',
      payload: groupedColumns
    });
    onGroup(enrichEventWithDetails(e, {
      column: column,
      groupedColumns: groupedColumns
    }));
  }, [tableState.groupBy, onGroup, dispatch]);

  var _useDragAndDrop = useDragAndDrop(props, setColumnOrder, tableState.columnOrder, tableState.columnResizing, tableInternalColumns),
      _useDragAndDrop2 = _slicedToArray(_useDragAndDrop, 6),
      dragOver = _useDragAndDrop2[0],
      handleDragEnter = _useDragAndDrop2[1],
      handleDragStart = _useDragAndDrop2[2],
      handleDragOver = _useDragAndDrop2[3],
      handleOnDrop = _useDragAndDrop2[4],
      handleOnDragEnd = _useDragAndDrop2[5];

  var passThroughProps = usePassThroughHtmlProps(props, ['onSort', 'onGroup', 'onRowSelected', 'onRowExpandChange', 'onColumnsReordered', 'onLoadMore']);
  var inlineStyle = useMemo(function () {
    var tableStyles = {
      maxWidth: '100%',
      overflowX: 'auto'
    };

    if (!!rowHeight) {
      tableStyles['--sapWcrAnalyticalTableRowHeight'] = "".concat(rowHeight, "px");
    }

    if (tableState.tableClientWidth > 0) {
      return _objectSpread(_objectSpread({}, tableStyles), style);
    }

    return _objectSpread(_objectSpread(_objectSpread({}, tableStyles), style), {}, {
      visibility: 'hidden'
    });
  }, [tableState.tableClientWidth, style, rowHeight]);
  return /*#__PURE__*/React.createElement("div", _extends({
    className: className,
    style: inlineStyle,
    title: tooltip,
    ref: analyticalTableRef
  }, passThroughProps), title && /*#__PURE__*/React.createElement(TitleBar, null, title), extension && /*#__PURE__*/React.createElement("div", null, extension), /*#__PURE__*/React.createElement("div", _extends({}, getTableProps(), {
    role: "grid",
    "aria-rowcount": rows.length,
    "aria-colcount": tableInternalColumns.length,
    "data-per-page": visibleRows,
    ref: tableRef
  }), headerGroups.map(function (headerGroup) {
    var headerProps = {};

    if (headerGroup.getHeaderGroupProps) {
      headerProps = headerGroup.getHeaderGroupProps();
    }

    return (
      /*#__PURE__*/
      // eslint-disable-next-line react/jsx-key
      React.createElement("header", _extends({}, headerProps, {
        role: "rowgroup"
      }), headerGroup.headers.map(function (column) {
        return (
          /*#__PURE__*/
          // eslint-disable-next-line react/jsx-key
          React.createElement(ColumnHeader, _extends({}, column.getHeaderProps(), {
            onSort: onSort,
            onGroupBy: onGroupByChanged,
            onDragStart: handleDragStart,
            onDragOver: handleDragOver,
            onDrop: handleOnDrop,
            onDragEnter: handleDragEnter,
            onDragEnd: handleOnDragEnd,
            dragOver: column.id === dragOver,
            isDraggable: !isTreeTable && column.canReorder
          }), column.render('Header'))
        );
      }))
    );
  }), loading && busyIndicatorEnabled && ((_props$data = props.data) === null || _props$data === void 0 ? void 0 : _props$data.length) > 0 && /*#__PURE__*/React.createElement(LoadingComponent, {
    style: {
      width: "".concat(totalColumnsWidth, "px")
    }
  }), loading && ((_props$data2 = props.data) === null || _props$data2 === void 0 ? void 0 : _props$data2.length) === 0 && /*#__PURE__*/React.createElement(TablePlaceholder, {
    columns: tableInternalColumns.filter(function (col) {
      var _col$isVisible;

      return ((_col$isVisible = col.isVisible) !== null && _col$isVisible !== void 0 ? _col$isVisible : true) && !tableState.hiddenColumns.includes(col.accessor);
    }),
    rows: props.minRows,
    style: noDataStyles,
    rowHeight: internalRowHeight,
    tableWidth: totalColumnsWidth
  }), !loading && ((_props$data3 = props.data) === null || _props$data3 === void 0 ? void 0 : _props$data3.length) === 0 && /*#__PURE__*/React.createElement(NoDataComponent, {
    noDataText: noDataText,
    className: classes.noDataContainer,
    style: noDataStyles
  }), ((_props$data4 = props.data) === null || _props$data4 === void 0 ? void 0 : _props$data4.length) > 0 && /*#__PURE__*/React.createElement(VirtualTableBody, {
    classes: classes,
    prepareRow: prepareRow,
    rows: rows,
    minRows: minRows,
    selectionMode: selectionMode,
    reactWindowRef: reactWindowRef,
    isTreeTable: isTreeTable,
    internalRowHeight: internalRowHeight,
    tableBodyHeight: tableBodyHeight,
    visibleRows: visibleRows,
    alternateRowColor: alternateRowColor,
    overscanCount: overscanCount,
    totalColumnsWidth: totalColumnsWidth,
    infiniteScroll: infiniteScroll,
    infiniteScrollThreshold: infiniteScrollThreshold,
    onLoadMore: onLoadMore
  })));
});
AnalyticalTable.displayName = 'AnalyticalTable';
AnalyticalTable.defaultProps = {
  loading: false,
  busyIndicatorEnabled: true,
  sortable: true,
  filterable: false,
  groupable: false,
  selectionMode: TableSelectionMode.NONE,
  selectionBehavior: TableSelectionBehavior.ROW,
  scaleWidthMode: TableScaleWidthMode.Default,
  data: [],
  columns: [],
  title: null,
  minRows: 5,
  groupBy: [],
  NoDataComponent: DefaultNoDataComponent,
  LoadingComponent: DefaultLoadingComponent,
  noDataText: 'No Data',
  reactTableOptions: {},
  tableHooks: [],
  visibleRows: 15,
  subRowsKey: 'subRows',
  selectedRowIds: {},
  onGroup: function onGroup() {},
  onRowExpandChange: function onRowExpandChange() {},
  onColumnsReordered: function onColumnsReordered() {},
  isTreeTable: false,
  alternateRowColor: false
};

export { AnalyticalTable };
//# sourceMappingURL=AnalyticalTable.js.map
