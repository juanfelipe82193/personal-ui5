import _extends from '@babel/runtime/helpers/extends';
import { enrichEventWithDetails } from '@ui5/webcomponents-react-base/lib/Utils';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { BusyIndicator } from '@ui5/webcomponents-react/lib/BusyIndicator';
import { BusyIndicatorSize } from '@ui5/webcomponents-react/lib/BusyIndicatorSize';
import { FilterType } from '@ui5/webcomponents-react/lib/FilterType';
import { Input } from '@ui5/webcomponents-react/lib/Input';
import { Label } from '@ui5/webcomponents-react/lib/Label';
import { MultiComboBox } from '@ui5/webcomponents-react/lib/MultiComboBox';
import { Option } from '@ui5/webcomponents-react/lib/Option';
import { Select } from '@ui5/webcomponents-react/lib/Select';
import { StandardListItem } from '@ui5/webcomponents-react/lib/StandardListItem';
import React, { forwardRef, useMemo } from 'react';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';

var styles = {
  filterItem: {
    minWidth: '10rem',
    height: 'fit-content',
    marginRight: '1rem',
    marginBottom: '1rem'
  },
  innerFilterItemContainer: {
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'start'
  },
  loadingContainer: {
    display: 'flex',
    width: '100%',
    justifyContent: 'center'
  }
};

var useStyles = createComponentStyles(styles, {
  name: 'FilterItem'
});
/**
 * <code>import { FilterItem } from '@ui5/webcomponents-react/lib/FilterItem';</code>
 */

var FilterItem = forwardRef(function (props, ref) {
  var _ref = props,
      filterItems = _ref.filterItems,
      onChange = _ref.onChange,
      type = _ref.type,
      placeholder = _ref.placeholder,
      children = _ref.children,
      loading = _ref.loading,
      changeEventName = _ref.changeEventName,
      valueParamName = _ref.valueParamName,
      label = _ref.label,
      style = _ref.style,
      tooltip = _ref.tooltip;
  var classes = useStyles();

  function getItemByKey(key) {
    return filterItems.filter(function (item) {
      return item.key === key;
    })[0];
  }

  function onSelect(e) {
    var selectedKey = e.detail.selectedOption.getAttribute('data-key');
    var item = getItemByKey(selectedKey) || filterItems[0];
    onChange(enrichEventWithDetails(e, {
      selectedItem: item
    }));
  }

  function onMultiCbChange(e) {
    var selectedItems = e.detail.items;
    onChange(enrichEventWithDetails(e, {
      selectedItems: selectedItems.map(function (item) {
        return getItemByKey(item.getAttribute('data-key'));
      })
    }));
  }

  var filterComponent = useMemo(function () {
    if (loading) {
      return /*#__PURE__*/React.createElement("div", {
        className: classes.loadingContainer
      }, /*#__PURE__*/React.createElement(BusyIndicator, {
        active: true,
        size: BusyIndicatorSize.Medium,
        style: {
          backgroundColor: 'transparent',
          width: '80px'
        }
      }));
    }

    switch (type) {
      case FilterType.Default:
        return /*#__PURE__*/React.createElement(Input, {
          placeholder: placeholder,
          onChange: onSelect,
          style: {
            width: '100%'
          }
        });

      case FilterType.MultiSelect:
        return /*#__PURE__*/React.createElement(MultiComboBox, {
          onSelectionChange: onMultiCbChange
        }, filterItems.map(function (item) {
          return /*#__PURE__*/React.createElement(StandardListItem, {
            "data-key": item.key,
            key: item.key
          }, item.text);
        }));

      case FilterType.Select:
        return /*#__PURE__*/React.createElement(Select, {
          onChange: onSelect,
          style: {
            width: '100%'
          }
        }, filterItems.map(function (item) {
          return /*#__PURE__*/React.createElement(Option, {
            key: item.key,
            "data-key": item.key
          }, item.text);
        }));

      case FilterType.Custom:
        return /*#__PURE__*/React.createElement("div", null, React.Children.map(children, function (child) {
          return React.cloneElement(child, {
            // [changeEventName]: (event) => {
            //   onSelect(event);
            //   // @ts-ignore
            //   if (child.props.hasOwnProperty(changeEventName)) {
            //     // @ts-ignore
            //     child.props[changeEventName](event);
            //   }
            // },
            style: {
              width: '100%'
            }
          });
        }));
    }
  }, [valueParamName, changeEventName, filterItems, loading, type, children]);
  var filterItemClasses = StyleClassHelper.of(classes.filterItem);
  var passThroughProps = usePassThroughHtmlProps(props, ['onChange']);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: filterItemClasses.toString(),
    style: style,
    title: tooltip
  }, passThroughProps), /*#__PURE__*/React.createElement("div", {
    className: classes.innerFilterItemContainer
  }, /*#__PURE__*/React.createElement(Label, null, label), filterComponent));
});
FilterItem.defaultProps = {
  placeholder: '',
  renderText: function renderText(item) {
    return item && item.text || '';
  },
  type: FilterType.Default,
  filterItems: [],
  label: '',
  onChange: function onChange() {
    return null;
  },
  loading: false
};
FilterItem.displayName = 'FilterItem';

export { FilterItem };
//# sourceMappingURL=FilterItem.js.map
