import _extends from '@babel/runtime/helpers/extends';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { FlexBoxAlignItems } from '@ui5/webcomponents-react/lib/FlexBoxAlignItems';
import { FlexBoxDirection } from '@ui5/webcomponents-react/lib/FlexBoxDirection';
import { FlexBoxJustifyContent } from '@ui5/webcomponents-react/lib/FlexBoxJustifyContent';
import { FlexBoxWrap } from '@ui5/webcomponents-react/lib/FlexBoxWrap';
import React, { forwardRef, useMemo } from 'react';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';

var styles = {
  flexBox: {
    display: 'flex'
  },
  flexBoxDisplayInline: {
    display: 'inline-flex'
  },
  justifyContentStart: {
    justifyContent: 'flex-start'
  },
  justifyContentEnd: {
    justifyContent: 'flex-end'
  },
  justifyContentCenter: {
    justifyContent: 'center'
  },
  justifyContentSpaceAround: {
    justifyContent: 'space-around'
  },
  justifyContentSpaceBetween: {
    justifyContent: 'space-between'
  },
  flexBoxDirectionColumn: {
    flexDirection: 'column'
  },
  flexBoxDirectionColumnReverse: {
    flexDirection: 'column-reverse'
  },
  flexBoxDirectionRow: {
    flexDirection: 'row'
  },
  flexBoxDirectionRowReverse: {
    flexDirection: 'row-reverse'
  },
  alignItemsStart: {
    alignItems: 'flex-start'
  },
  alignItemsEnd: {
    alignItems: 'flex-end'
  },
  alignItemsCenter: {
    alignItems: 'center'
  },
  alignItemsStretch: {
    alignItems: 'stretch'
  },
  alignItemsBaseline: {
    alignItems: 'baseline'
  },
  flexWrapNoWrap: {
    flexWrap: 'nowrap'
  },
  flexWrapWrap: {
    flexWrap: 'wrap'
  },
  flexWrapWrapReverse: {
    flexWrap: 'wrap-reverse'
  }
};

var useStyles = createComponentStyles(styles, {
  name: 'FlexBox'
});

/**
 * <code>import { FlexBox } from '@ui5/webcomponents-react/lib/FlexBox';</code>
 */
var FlexBox = forwardRef(function (props, ref) {
  var children = props.children,
      justifyContent = props.justifyContent,
      direction = props.direction,
      alignItems = props.alignItems,
      height = props.height,
      width = props.width,
      displayInline = props.displayInline,
      wrap = props.wrap,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot;
  var classes = useStyles();
  var flexBoxClasses = StyleClassHelper.of(classes.flexBox); // direction

  flexBoxClasses.put(classes["flexBoxDirection".concat(direction)]); // justify content

  flexBoxClasses.put(classes["justifyContent".concat(justifyContent)]); // align items

  flexBoxClasses.put(classes["alignItems".concat(alignItems)]); // wrapping

  flexBoxClasses.put(classes["flexWrap".concat(wrap)]);

  if (displayInline) {
    flexBoxClasses.put(classes.flexBoxDisplayInline);
  }

  if (className) {
    flexBoxClasses.put(className);
  }

  var memoizedStyles = useMemo(function () {
    var innerStyles = {};

    if (height) {
      innerStyles.height = height;
    }

    if (width) {
      innerStyles.width = width;
    }

    if (style) {
      Object.assign(innerStyles, style);
    }

    return innerStyles;
  }, [height, width, style]);
  var passThroughProps = usePassThroughHtmlProps(props);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: flexBoxClasses.valueOf(),
    style: memoizedStyles,
    title: tooltip,
    slot: slot
  }, passThroughProps), children);
});
FlexBox.defaultProps = {
  alignItems: FlexBoxAlignItems.Stretch,
  direction: FlexBoxDirection.Row,
  displayInline: false,
  height: '',
  justifyContent: FlexBoxJustifyContent.Start,
  width: '',
  wrap: FlexBoxWrap.NoWrap
};
FlexBox.displayName = 'FlexBox';

export { FlexBox };
//# sourceMappingURL=FlexBox.js.map
