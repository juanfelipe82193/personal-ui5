import _extends from '@babel/runtime/helpers/extends';
import _wrapRegExp from '@babel/runtime/helpers/wrapRegExp';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { useViewportRange } from '@ui5/webcomponents-react-base/lib/useViewportRange';
import { GridPosition } from '@ui5/webcomponents-react/lib/GridPosition';
import React, { forwardRef, useMemo, Children } from 'react';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';

var getWidthForSpan = function getWidthForSpan(width) {
  var hSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return {
    width: "calc(".concat(width * 100 / 12, "% - ").concat(hSpace, "rem)")
  };
};

var getIndentForSpan = function getIndentForSpan(width) {
  var hSpace = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return {
    marginLeft: "calc(".concat(width * 100 / 12, "% + ").concat(hSpace / 2, "rem)")
  };
};

var getSpansForSpace = function getSpansForSpace() {
  var hSpace = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;
  return {
    '&$gridSpan1': getWidthForSpan(1, hSpace),
    '&$gridSpan2': getWidthForSpan(2, hSpace),
    '&$gridSpan3': getWidthForSpan(3, hSpace),
    '&$gridSpan4': getWidthForSpan(4, hSpace),
    '&$gridSpan5': getWidthForSpan(5, hSpace),
    '&$gridSpan6': getWidthForSpan(6, hSpace),
    '&$gridSpan7': getWidthForSpan(7, hSpace),
    '&$gridSpan8': getWidthForSpan(8, hSpace),
    '&$gridSpan9': getWidthForSpan(9, hSpace),
    '&$gridSpan10': getWidthForSpan(10, hSpace),
    '&$gridSpan11': getWidthForSpan(11, hSpace),
    '&$gridSpan12': getWidthForSpan(12, hSpace)
  };
};

var getIndentsForSpace = function getIndentsForSpace(hSpace) {
  return {
    '&$gridIndent1': getIndentForSpan(1, hSpace),
    '&$gridIndent2': getIndentForSpan(2, hSpace),
    '&$gridIndent3': getIndentForSpan(3, hSpace),
    '&$gridIndent4': getIndentForSpan(4, hSpace),
    '&$gridIndent5': getIndentForSpan(5, hSpace),
    '&$gridIndent6': getIndentForSpan(6, hSpace),
    '&$gridIndent7': getIndentForSpan(7, hSpace),
    '&$gridIndent8': getIndentForSpan(8, hSpace),
    '&$gridIndent9': getIndentForSpan(9, hSpace),
    '&$gridIndent10': getIndentForSpan(10, hSpace),
    '&$gridIndent11': getIndentForSpan(11, hSpace),
    '&$gridIndent12': getIndentForSpan(12, hSpace)
  };
};

var GridClasses = {
  '@global html': {
    '--_ui5wcr_Grid_float': 'left'
  },
  '@global [dir="rtl"]': {
    '--_ui5wcr_Grid_float': 'right'
  },
  grid: {
    '& $gridSpan': _objectSpread(_objectSpread({}, getSpansForSpace(0)), getIndentsForSpace(0)),
    '&$gridHSpace05': {
      padding: '0 0.25rem',
      '& > div': {
        margin: '0 0.25rem'
      },
      '& $gridSpan': _objectSpread(_objectSpread({}, getSpansForSpace(0.5)), getIndentsForSpace(0.5))
    },
    '&$gridHSpace1': {
      padding: '0 0.5rem',
      '& > div': {
        margin: '0 0.5rem'
      },
      '& $gridSpan': _objectSpread(_objectSpread({}, getSpansForSpace(1)), getIndentsForSpace(1))
    },
    '&$gridHSpace2': {
      padding: '0 1rem',
      '& > div': {
        margin: '0 1rem'
      },
      '& $gridSpan': _objectSpread(_objectSpread({}, getSpansForSpace(2)), getIndentsForSpace(2))
    },
    '&$gridVSpace0 > $gridSpan': {
      marginBottom: 0
    },
    '&$gridVSpace05 > $gridSpan': {
      marginBottom: '0.5rem'
    },
    '&$gridVSpace1 > $gridSpan': {
      marginBottom: '1rem'
    },
    '&$gridVSpace2 > $gridSpan': {
      marginBottom: '2rem'
    },
    '& > div': {
      "float": 'var(--_ui5wcr_Grid_float)',
      overflow: 'hidden',
      minHeight: '1px'
    },
    '&$gridPositionCenter': {
      marginLeft: 'auto',
      marginRight: 'auto'
    },
    '&$gridPositionRight': {
      marginLeft: 'auto',
      marginRight: 0
    },
    '&:after, & > div:after': {
      clear: 'both',
      content: '" "',
      display: 'block',
      fontSize: 0,
      height: 0,
      visibility: 'hidden'
    }
  },
  gridHSpace05: {},
  gridHSpace1: {},
  gridHSpace2: {},
  gridVSpace0: {},
  gridVSpace05: {},
  gridVSpace1: {},
  gridVSpace2: {},
  gridPositionCenter: {},
  gridPositionRight: {},
  // small spans
  gridSpan: {},
  gridSpan1: {},
  gridSpan2: {},
  gridSpan3: {},
  gridSpan4: {},
  gridSpan5: {},
  gridSpan6: {},
  gridSpan7: {},
  gridSpan8: {},
  gridSpan9: {},
  gridSpan10: {},
  gridSpan11: {},
  gridSpan12: {},
  gridIndent1: {},
  gridIndent2: {},
  gridIndent3: {},
  gridIndent4: {},
  gridIndent5: {},
  gridIndent6: {},
  gridIndent7: {},
  gridIndent8: {},
  gridIndent9: {},
  gridIndent10: {},
  gridIndent11: {},
  gridIndent12: {}
};

var INDENT_PATTERN = /*#__PURE__*/_wrapRegExp(/^(XL([0-9]|1[01]))? ?(L([0-9]|1[01]))? ?(M([0-9]|1[01]))? ?(S([0-9]|1[01]))?$/i, {
  LargeDesktop: 2,
  Desktop: 4,
  Tablet: 6,
  Phone: 8
});

var SPAN_PATTERN = /*#__PURE__*/_wrapRegExp(/^(XL([1-9]|1[0-2]))? ?(L([1-9]|1[0-2]))? ?(M([1-9]|1[0-2]))? ?(S([1-9]|1[0-2]))?$/i, {
  LargeDesktop: 2,
  Desktop: 4,
  Tablet: 6,
  Phone: 8
});

var DefaultSpanMap = new Map();
DefaultSpanMap.set('Phone', 12);
DefaultSpanMap.set('Tablet', 6);
DefaultSpanMap.set('Desktop', 3);
DefaultSpanMap.set('LargeDesktop', 3);
var DefaultIndentMap = new Map();
DefaultIndentMap.set('Phone', 0);
DefaultIndentMap.set('Tablet', 0);
DefaultIndentMap.set('Desktop', 0);
DefaultIndentMap.set('LargeDesktop', 0);

var getSpanFromString = function getSpanFromString(span, currentRange) {
  var _spanConfig$groups$cu;

  var spanConfig = SPAN_PATTERN.exec(span);
  return (_spanConfig$groups$cu = spanConfig.groups[currentRange]) !== null && _spanConfig$groups$cu !== void 0 ? _spanConfig$groups$cu : DefaultSpanMap.get(currentRange);
};

var getIndentFromString = function getIndentFromString(indent, currentRange) {
  var _indentConfig$groups$;

  var indentConfig = INDENT_PATTERN.exec(indent);
  return (_indentConfig$groups$ = indentConfig.groups[currentRange]) !== null && _indentConfig$groups$ !== void 0 ? _indentConfig$groups$ : DefaultIndentMap.get(currentRange);
};

var useStyles = createComponentStyles(GridClasses, {
  name: 'Grid'
});
/**
 * <code>import { Grid } from '@ui5/webcomponents-react/lib/Grid';</code>
 */

var Grid = forwardRef(function (props, ref) {
  var children = props.children,
      hSpacing = props.hSpacing,
      vSpacing = props.vSpacing,
      position = props.position,
      width = props.width,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot,
      defaultIndent = props.defaultIndent,
      defaultSpan = props.defaultSpan;
  var classes = useStyles();
  var gridClasses = StyleClassHelper.of(classes.grid);
  gridClasses.put(classes["gridHSpace".concat(hSpacing === 0.5 ? '05' : hSpacing)]);
  gridClasses.put(classes["gridVSpace".concat(vSpacing === 0.5 ? '05' : vSpacing)]);
  var currentRange = useViewportRange('StdExt');

  if (GridPosition.Center === position) {
    gridClasses.put(classes.gridPositionCenter);
  }

  if (GridPosition.Right === position) {
    gridClasses.put(classes.gridPositionRight);
  }

  var gridStyle = useMemo(function () {
    var styles = {};

    if (width !== '100%' && width !== 'auto' && width !== 'inherit') {
      if (hSpacing === 0) {
        styles.width = width;
      } else {
        styles.width = "calc(".concat(width, " - ").concat(hSpacing, "rem)");
      }
    }

    if (style) {
      Object.assign(styles, style);
    }

    return styles;
  }, [width, hSpacing, style]);

  if (className) {
    gridClasses.put(className);
  }

  var renderGridElements = function renderGridElements(child) {
    var gridSpanClasses = StyleClassHelper.of(classes.gridSpan);

    if (child.props['data-layout'] && child.props['data-layout'].span) {
      var childSpan = getSpanFromString(child.props['data-layout'].span, currentRange);
      gridSpanClasses.put(classes["gridSpan".concat(childSpan)]);
    } else {
      var span = getSpanFromString(defaultSpan, currentRange);
      gridSpanClasses.put(classes["gridSpan".concat(span)]);
    }

    var indentSpan = getIndentFromString(defaultIndent, currentRange);

    if (child.props['data-layout'] && child.props['data-layout'].indent) {
      var childIndent = getIndentFromString(child.props['data-layout'].indent, currentRange);

      if (childIndent && childIndent > 0) {
        gridSpanClasses.put(classes["gridIndent".concat(childIndent)]);
      }
    } else if (indentSpan && indentSpan > 0) {
      gridSpanClasses.put(classes["gridIndent".concat(indentSpan)]);
    }

    return /*#__PURE__*/React.createElement("div", {
      className: gridSpanClasses.valueOf()
    }, child);
  };

  var passThroughProps = usePassThroughHtmlProps(props);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: gridClasses.valueOf(),
    style: gridStyle,
    title: tooltip,
    slot: slot
  }, passThroughProps), Children.map(children, renderGridElements));
});
Grid.displayName = 'Grid';
Grid.defaultProps = {
  width: '100%',
  vSpacing: 1,
  hSpacing: 1,
  position: GridPosition.Left,
  defaultSpan: 'XL3 L3 M6 S12',
  defaultIndent: 'XL0 L0 M0 S0'
};

export { Grid };
//# sourceMappingURL=Grid.js.map
