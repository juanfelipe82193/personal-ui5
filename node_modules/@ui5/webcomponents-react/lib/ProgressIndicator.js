import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/lib/usePassThroughHtmlProps';
import { ValueState } from '@ui5/webcomponents-react/lib/ValueState';
import React, { forwardRef, useMemo } from 'react';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { CssSizeVariables } from '@ui5/webcomponents-react-base/lib/CssSizeVariables';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';

var styles = {
  progressBarRemaining: {
    height: '100%',
    flexGrow: '1',
    minWidth: '0',
    display: 'flex',
    alignItems: 'center'
  },
  progressBarTextRight: {
    marginLeft: '0.375rem'
  },
  progressBarTextLeft: {
    marginRight: '0.375rem'
  },
  wrapper: {
    display: 'flex',
    flexDirection: 'row',
    WebkitFlexDirection: 'row',
    boxSizing: 'border-box',
    outline: 'none',
    background: ThemingParameters.sapField_Background,
    width: '100%',
    height: CssSizeVariables.sapWcrProgressIndicatorHeight,
    minWidth: '4rem',
    minHeight: '1rem',
    padding: '0',
    margin: CssSizeVariables.sapWcrProgressIndicatorMargin,
    border: "1px solid ".concat(ThemingParameters.sapField_BorderColor),
    borderRadius: '0.5rem',
    overflow: 'hidden'
  },
  progressbar: {
    transition: 'flex-basis 1s',
    justifyContent: 'flex-end',
    display: 'flex',
    alignItems: 'center'
  },
  progressBarText: {
    textOverflow: 'ellipsis',
    overflow: 'hidden',
    whiteSpace: 'nowrap',
    fontFamily: ThemingParameters.sapFontFamily,
    fontSize: ThemingParameters.sapFontSmallSize,
    fontWeight: 'normal'
  },
  progressBarTextColorLow: {
    color: ThemingParameters.sapTextColor
  },
  progressBarTextColorHigh: {
    color: ThemingParameters.sapContent_ContrastTextColor
  },
  stateNone: {
    backgroundColor: ThemingParameters.sapNeutralElementColor
  },
  stateSuccess: {
    backgroundColor: ThemingParameters.sapPositiveElementColor
  },
  stateWarning: {
    backgroundColor: ThemingParameters.sapCriticalElementColor
  },
  stateError: {
    backgroundColor: ThemingParameters.sapNegativeElementColor
  },
  stateInformation: {
    backgroundColor: ThemingParameters.sapInformativeElementColor
  }
};

var useStyles = createComponentStyles(styles, {
  name: 'ProgressIndicator'
});
/**
 * <code>import { ProgressIndicator } from '@ui5/webcomponents-react/lib/ProgressIndicator';</code>
 */

var ProgressIndicator = forwardRef(function (props, ref) {
  var percentValue = props.percentValue,
      displayValue = props.displayValue,
      width = props.width,
      height = props.height,
      className = props.className,
      style = props.style,
      tooltip = props.tooltip,
      state = props.state,
      slot = props.slot;
  var classes = useStyles(); // CSS classes

  var wrapperClasses = StyleClassHelper.of(classes.wrapper);
  var progressBarClasses = StyleClassHelper.of(classes.progressbar);
  var progressBarTextClasses = StyleClassHelper.of(classes.progressBarText);
  var progressBarStyle = {
    flexBasis: "".concat(percentValue, "%")
  }; // change text color based on percent value

  if (percentValue <= 50) {
    progressBarTextClasses.put(classes.progressBarTextColorLow);
    progressBarTextClasses.put(classes.progressBarTextRight);
  } else {
    progressBarTextClasses.put(classes.progressBarTextColorHigh);
    progressBarTextClasses.put(classes.progressBarTextLeft);
  }

  var progressBarTextSpan = /*#__PURE__*/React.createElement("span", {
    className: progressBarTextClasses.valueOf()
  }, " ", displayValue, " ");
  progressBarClasses.put(classes["state".concat(state)]);

  if (className) {
    wrapperClasses.put(className);
  }

  var progressBarContainerStyle = useMemo(function () {
    return _objectSpread(_objectSpread({}, style), {}, {
      width: width,
      height: height
    });
  }, [style, width, height]);
  var passThroughProps = usePassThroughHtmlProps(props);
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: ref,
    className: wrapperClasses.valueOf(),
    style: progressBarContainerStyle,
    title: tooltip,
    slot: slot
  }, passThroughProps), /*#__PURE__*/React.createElement("div", {
    className: progressBarClasses.valueOf(),
    style: progressBarStyle
  }, percentValue <= 50 ? null : progressBarTextSpan), /*#__PURE__*/React.createElement("div", {
    className: classes.progressBarRemaining
  }, percentValue <= 50 ? progressBarTextSpan : null));
});
ProgressIndicator.displayName = 'ProgressIndicator';
ProgressIndicator.defaultProps = {
  percentValue: 0,
  displayValue: '',
  width: 'auto',
  height: '',
  state: ValueState.None
};

export { ProgressIndicator };
//# sourceMappingURL=ProgressIndicator.js.map
