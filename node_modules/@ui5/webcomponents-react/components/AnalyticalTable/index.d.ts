import { TableScaleWidthMode } from '@ui5/webcomponents-react/lib/TableScaleWidthMode';
import { TableSelectionBehavior } from '@ui5/webcomponents-react/lib/TableSelectionBehavior';
import { TableSelectionMode } from '@ui5/webcomponents-react/lib/TableSelectionMode';
import { ComponentType, FC, ReactNode, ReactText } from 'react';
import { PluginHook } from 'react-table';
import { AnalyticalTableColumnDefinition } from '../../interfaces/AnalyticalTableColumnDefinition';
import { CommonProps } from '../../interfaces/CommonProps';
export interface TableProps extends CommonProps {
    columns: AnalyticalTableColumnDefinition[];
    data: object[];
    title?: ReactText | ReactNode;
    renderExtension?: () => ReactNode;
    extension?: ReactNode;
    minRows?: number;
    visibleRows?: number;
    loading?: boolean;
    busyIndicatorEnabled?: boolean;
    noDataText?: string;
    rowHeight?: number;
    alternateRowColor?: boolean;
    withRowHighlight?: boolean;
    highlightField?: string;
    filterable?: boolean;
    sortable?: boolean;
    groupable?: boolean;
    groupBy?: string[];
    selectionBehavior?: TableSelectionBehavior;
    selectionMode?: TableSelectionMode;
    scaleWidthMode?: TableScaleWidthMode;
    columnOrder?: object[];
    infiniteScroll?: boolean;
    infiniteScrollThreshold?: number;
    onSort?: (e: CustomEvent<{
        column: unknown;
        sortDirection: string;
    }>) => void;
    onGroup?: (e: CustomEvent<{
        column: unknown;
        groupedColumns: string[];
    }>) => void;
    onRowSelected?: (e?: CustomEvent<{
        allRowsSelected?: boolean;
        row?: unknown;
        isSelected?: boolean;
    }>) => any;
    onRowExpandChange?: (e?: CustomEvent<{
        row: unknown;
        column: unknown;
    }>) => any;
    onColumnsReordered?: (e?: CustomEvent<{
        columnsNewOrder: string[];
        column: unknown;
    }>) => void;
    onLoadMore?: (e?: {
        detail: {
            rowCount: number;
        };
    }) => void;
    reactTableOptions?: object;
    tableHooks?: PluginHook<any>[];
    subRowsKey?: string;
    selectedRowIds?: {
        [key: string]: boolean;
    };
    isTreeTable?: boolean;
    overscanCount?: number;
    NoDataComponent?: ComponentType<any>;
    LoadingComponent?: ComponentType<any>;
}
declare const AnalyticalTable: FC<TableProps>;
export { AnalyticalTable };
