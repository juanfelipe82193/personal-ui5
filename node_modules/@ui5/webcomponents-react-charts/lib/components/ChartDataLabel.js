import _extends from '@babel/runtime/helpers/extends';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';
import { getTextWidth } from '@ui5/webcomponents-react-charts/lib/Utils';
import React, { createElement } from 'react';
import { Label } from 'recharts';

var ChartDataLabel = function ChartDataLabel(props) {
  var _props$value;

  var config = props.config,
      chartType = props.chartType,
      viewBox = props.viewBox;

  if (config.hideDataLabel) {
    return null;
  }

  if (config.DataLabel) {
    return createElement(config.DataLabel, props);
  }

  var formattedLabel = config.formatter((_props$value = props.value) !== null && _props$value !== void 0 ? _props$value : props.children);

  if (chartType === 'bar' || chartType === 'column') {
    if (viewBox.width < getTextWidth(formattedLabel)) {
      return null;
    }

    if (viewBox.height < 12) {
      return null;
    }
  }

  var fill = ThemingParameters.sapContent_ContrastTextColor;

  if (['area', 'line', 'radar'].includes(chartType)) {
    fill = ThemingParameters.sapTextColor; // label is displayed outside of the colored element
  }

  return /*#__PURE__*/React.createElement(Label, _extends({
    fill: fill,
    viewBox: viewBox
  }, props, {
    content: undefined,
    value: formattedLabel
  }));
};

export { ChartDataLabel };
//# sourceMappingURL=ChartDataLabel.js.map
