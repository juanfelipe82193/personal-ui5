import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { deprecationNotice } from '@ui5/webcomponents-react-base/lib/Utils';
import { useConsolidatedRef } from '@ui5/webcomponents-react-base/lib/useConsolidatedRef';
import { withChartContainer } from '@ui5/webcomponents-react-charts/lib/withChartContainer';
import React, { useCallback, useEffect, useMemo, forwardRef } from 'react';
import { Line } from 'react-chartjs-2';
import { getTheme } from '@ui5/webcomponents-base/dist/config/Theme';
import { defaults, pluginService } from 'chart.js';
import DataLabels from 'chartjs-plugin-datalabels';
import '@ui5/webcomponents/dist/Label';
import merge from 'lodash.merge';
import _extends from '@babel/runtime/helpers/extends';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';
import ContentLoader from 'react-content-loader';

/* eslint-disable no-underscore-dangle */

var getSymbolForDataset = function getSymbolForDataset(type, dataset) {
  var _datasetMeta$type;

  var datasetMeta = dataset.hasOwnProperty('_meta') ? Object.values(dataset._meta)[0] : null;
  var elementType = (_datasetMeta$type = datasetMeta === null || datasetMeta === void 0 ? void 0 : datasetMeta.type) !== null && _datasetMeta$type !== void 0 ? _datasetMeta$type : type;

  switch (elementType) {
    case 'line':
      return "\n        <div style=\"width: 5px; height: 2px; background-color: ".concat(dataset.backgroundColor, "; border-top-left-radius: 2px; border-bottom-left-radius: 2px; margin-right: 2px\"></div>\n        <div style=\"width: 10px; height: 10px; background-color: ").concat(dataset.backgroundColor, "; border-radius: 50%;\"></div>\n        <div style=\"width: 5px; height: 2px; background-color: ").concat(dataset.backgroundColor, "; border-top-right-radius: 2px; border-bottom-right-radius: 2px; margin-left: 2px; margin-right: 8px\"></div>\n      ");

    default:
      return "<div style=\"width: 14px; height: 14px; border-radius: 2px; background-color: ".concat(dataset.backgroundColor, "; margin-right: 8px\"></div>");
  }
};

var getLegendEntry = function getLegendEntry(dataset, type, index) {
  var symbol = getSymbolForDataset(type, dataset);
  return "<li style=\"display: flex; align-items: center; margin-right: 24px; cursor:pointer;\" data-datasetindex=\"".concat(index, "\">\n").concat(symbol, "\n<ui5-label style=\"font-size: 12px; user-select: none; cursor:pointer;\">").concat(dataset.label, "</ui5-label>\n</li>");
};

var generateLegend = function generateLegend(chart) {
  var datasets = chart.config.data.datasets;
  var type = chart.config.type;
  var itemsForLegend = datasets;

  if (['pie', 'doughnut'].includes(type)) {
    var pieDataSet = Object.values(datasets[0]._meta)[0];
    itemsForLegend = pieDataSet.data.map(function (meta) {
      return meta._model;
    });
  }

  return itemsForLegend.map(function (item, index) {
    return getLegendEntry(item, type, index);
  }).join(' ');
};
var useLegend = function useLegend(chartRef, legendRef, noLegend, handleLegendItemPress) {
  useEffect(function () {
    if (chartRef && legendRef) {
      if (noLegend) {
        legendRef.current.innerHTML = '';
      } else {
        legendRef.current.innerHTML = chartRef.current.chartInstance.generateLegend();
        legendRef.current.querySelectorAll('li').forEach(function (legendItem) {
          legendItem.addEventListener('click', handleLegendItemPress);
        });
      }
    }
  }, [chartRef.current, legendRef.current, noLegend, handleLegendItemPress]);
};
var useLegendItemClickHandler = function useLegendItemClickHandler(chartRef, legendRef) {
  return useCallback(function (e) {
    var clickTarget = e.currentTarget;
    var datasetIndex = parseInt(clickTarget.dataset.datasetindex);
    var chartInstance = chartRef.current.chartInstance;
    var meta = chartInstance.getDatasetMeta(datasetIndex);
    meta.hidden = meta.hidden === null ? !chartInstance.data.datasets[datasetIndex].hidden : null;
    chartInstance.update();
    clickTarget.style.textDecoration = meta.hidden ? 'line-through' : 'unset';
  }, [legendRef.current, chartRef.current]);
};

var getCssVariableValue = function getCssVariableValue(cssVariable) {
  var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var propertyValue = getComputedStyle(document.documentElement).getPropertyValue(cssVariable);
  return propertyValue || fallback;
};

defaults.global.animation.duration = 0;
defaults.scale.ticks.fontStyle = 'bold';
defaults.global.layout.padding = {
  top: 32,
  left: 16,
  right: 16,
  bottom: 16
};
defaults.global.maintainAspectRatio = false; // Legend Configuration

defaults.global.legend.display = false;
defaults.global.legendCallback = generateLegend; // Chart Type Configuration

defaults.global.elements.line.fill = false;
defaults.doughnut.legendCallback = generateLegend;
defaults.pie.legendCallback = generateLegend; // Data Labels Configuration

pluginService.register(DataLabels);
defaults.global.plugins.datalabels.align = 'top';
defaults.global.plugins.datalabels.display = 'auto';
var defaultFont = {
  family: getCssVariableValue('--sapFontFamily', '"72","72full",Arial,Helvetica,sans-serif'),
  size: 12
};
defaults.global.plugins.datalabels.font = defaultFont;
var DEFAULT_OPTIONS = {
  scales: {
    yAxes: [{
      display: false,
      ticks: {
        beginAtZero: true,
        maxTicksLimit: 6
      },
      gridLines: {
        display: true
      }
    }],
    xAxes: [{
      gridLines: {
        display: false,
        lineWidth: 2,
        color: getCssVariableValue('--sapTextColor', '#32363a'),
        fontColor: getCssVariableValue('--sapTextColor', '#32363a')
      }
    }]
  }
};

var ChartBaseDefaultProps = {
  labels: [],
  datasets: [],
  colors: [],
  height: 300,
  minHeight: 300,
  minWidth: 300,
  width: 300,
  options: {},
  categoryAxisFormatter: function categoryAxisFormatter(d) {
    return d;
  },
  valueAxisFormatter: function valueAxisFormatter(d) {
    return d;
  },
  getDatasetAtEvent: function getDatasetAtEvent(d, e) {// do nothing
  },
  getElementAtEvent: function getElementAtEvent(d, e) {// do nothing
  }
};

var sequentialColors = {
  sapUiChartAccent1: '#5899DA',
  sapUiChartAccent2: '#E8743B',
  sapUiChartAccent3: '#19A979',
  sapUiChartAccent4: '#ED4A7B',
  sapUiChartAccent5: '#945ECF',
  sapUiChartAccent6: '#13A4B4',
  sapUiChartAccent7: '#525DF4',
  sapUiChartAccent8: '#BF399E',
  sapUiChartAccent9: '#6C8893',
  sapUiChartAccent10: '#EE6868',
  sapUiChartAccent11: '#2F6497',
  sapUiChartAccent12: '#1866b4'
};
var semanticColors = {
  sapUiChartGood: '#3fa45b',
  sapUiChartBad: '#dc0d0e',
  sapUiChartHighlight: '#de890d'
};

var sapBelize = /*#__PURE__*/Object.freeze({
  __proto__: null,
  sequentialColors: sequentialColors,
  semanticColors: semanticColors
});

var sequentialColors$1 = {
  sapUiChartAccent1: '#5899DA',
  sapUiChartAccent2: '#E8743B',
  sapUiChartAccent3: '#19A979',
  sapUiChartAccent4: '#ED4A7B',
  sapUiChartAccent5: '#945ECF',
  sapUiChartAccent6: '#13A4B4',
  sapUiChartAccent7: '#525DF4',
  sapUiChartAccent8: '#BF399E',
  sapUiChartAccent9: '#6C8893',
  sapUiChartAccent10: '#EE6868',
  sapUiChartAccent11: '#2F6497',
  sapUiChartAccent12: '#1866b4'
};
var semanticColors$1 = {
  sapUiChartGood: '#69c683',
  sapUiChartBad: '#f55556',
  sapUiChartHighlight: '#f4ac44'
};

var sapBelizePlus = /*#__PURE__*/Object.freeze({
  __proto__: null,
  sequentialColors: sequentialColors$1,
  semanticColors: semanticColors$1
});

var sequentialColors$2 = {
  sapUiChartAccent1: '#0f828f',
  sapUiChartAccent2: '#5ac2ce',
  sapUiChartAccent3: '#03734d',
  sapUiChartAccent4: '#66c2a3',
  sapUiChartAccent5: '#3c6372',
  sapUiChartAccent6: '#adbcc3',
  sapUiChartAccent7: '#144b7f',
  sapUiChartAccent8: '#698caf',
  sapUiChartAccent9: '#d62f2f',
  sapUiChartAccent10: '#f8a6a6',
  sapUiChartAccent11: '#921473',
  sapUiChartAccent12: '#d876c0'
};
var semanticColors$2 = {
  sapUiChartGood: '#3fa45b',
  sapUiChartBad: '#dc0d0e',
  sapUiChartHighlight: '#f0ab00'
};

var sapFiori3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  sequentialColors: sequentialColors$2,
  semanticColors: semanticColors$2
});

var sequentialColors$3 = {
  sapUiChartAccent1: '#13a4b4',
  sapUiChartAccent2: '#81d1da',
  sapUiChartAccent3: '#19a979',
  sapUiChartAccent4: '#8fd1bb',
  sapUiChartAccent5: '#6c8893',
  sapUiChartAccent6: '#d1d9dc',
  sapUiChartAccent7: '#2f6497',
  sapUiChartAccent8: '#85a1bb',
  sapUiChartAccent9: '#ee6868',
  sapUiChartAccent10: '#fccaca',
  sapUiChartAccent11: '#bf399e',
  sapUiChartAccent12: '#e597d2'
};
var semanticColors$3 = {
  sapUiChartGood: '#3fa45b',
  sapUiChartBad: '#dc0d0e',
  sapUiChartHighlight: '#f0ab00'
};

var sapFiori3Dark = /*#__PURE__*/Object.freeze({
  __proto__: null,
  sequentialColors: sequentialColors$3,
  semanticColors: semanticColors$3
});

var sequentialColors$4 = {
  sapUiChartAccent1: '#4DA2F6',
  sapUiChartAccent2: '#E8743B',
  sapUiChartAccent3: '#19A979',
  sapUiChartAccent4: '#ED4A7B',
  sapUiChartAccent5: '#945ECF',
  sapUiChartAccent6: '#13A4B4',
  sapUiChartAccent7: '#5C66F5',
  sapUiChartAccent8: '#C63FA4',
  sapUiChartAccent9: '#6C8893',
  sapUiChartAccent10: '#EE6868',
  sapUiChartAccent11: '#387BB7',
  sapUiChartAccent12: '#097be8'
};
var semanticColors$4 = {
  sapUiChartGood: '#9c9',
  sapUiChartBad: '#ff5e5e',
  sapUiChartHighlight: '#ffab1d'
};

var sapBelizeHCB = /*#__PURE__*/Object.freeze({
  __proto__: null,
  sequentialColors: sequentialColors$4,
  semanticColors: semanticColors$4
});

var sequentialColors$5 = {
  sapUiChartAccent1: '#286AC3',
  sapUiChartAccent2: '#D74114',
  sapUiChartAccent3: '#057D47',
  sapUiChartAccent4: '#E11E48',
  sapUiChartAccent5: '#642EB2',
  sapUiChartAccent6: '#03778C',
  sapUiChartAccent7: '#232DEB',
  sapUiChartAccent8: '#9B136F',
  sapUiChartAccent9: '#395563',
  sapUiChartAccent10: '#E02E2E',
  sapUiChartAccent11: '#0D3367',
  sapUiChartAccent12: '#0e4186'
};
var semanticColors$5 = {
  sapUiChartGood: '#006362',
  sapUiChartBad: '#ab0000',
  sapUiChartHighlight: '#5c5c00'
};

var sapBelizeHCW = /*#__PURE__*/Object.freeze({
  __proto__: null,
  sequentialColors: sequentialColors$5,
  semanticColors: semanticColors$5
});

var themeMap = new Map();
themeMap.set('sap_belize', sapBelize);
themeMap.set('sap_belize_plus', sapBelizePlus);
themeMap.set('sap_fiori_3', sapFiori3);
themeMap.set('sap_fiori_3_dark', sapFiori3Dark);
themeMap.set('sap_belize_hcw', sapBelizeHCW);
themeMap.set('sap_belize_hcb', sapBelizeHCB);
var getOrLoadTheme = function getOrLoadTheme(theme) {
  if (themeMap.has(theme)) {
    return themeMap.get(theme);
  } else {
    console.warn("".concat(theme, "-theme not found. Falling back to default theme 'sap_fiori_3'."));
    return themeMap.get('sap_fiori_3');
  }
};

var populateData = function populateData(labels, datasets, colors, theme) {
  var isPie = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var colorPalette = resolveColors(colors, theme);
  return {
    labels: labels,
    datasets: datasets.map(function (item, index) {
      return _objectSpread({
        backgroundColor: isPie ? colorPalette : colorPalette[index % colorPalette.length],
        borderColor: isPie ? colorPalette : colorPalette[index % colorPalette.length]
      }, item);
    })
  };
};
var resolveColors = function resolveColors(colors, theme) {
  var _getOrLoadTheme = getOrLoadTheme(theme),
      semanticColors = _getOrLoadTheme.semanticColors,
      sequentialColors = _getOrLoadTheme.sequentialColors;

  if (colors && colors.length > 0) {
    return colors.map(function (key) {
      return semanticColors[key] || sequentialColors[key] || key;
    });
  }

  return Object.values(sequentialColors);
};
var useChartData = function useChartData(labels, datasets, colors, theme) {
  var isPie = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  return useMemo(function () {
    return populateData(labels, datasets, colors, theme, isPie);
  }, [labels, datasets, colors, theme, isPie]);
};

var useMergedConfig = function useMergedConfig(x, y) {
  return useMemo(function () {
    return merge(x, y);
  }, [x, y]);
}; // this needs to be a function as we need the `this` of the chart;

var formatAxisCallback = function formatAxisCallback(formatter) {
  return function (value) {
    // @ts-ignore
    var currentDataset = this.chart.data.datasets[0];
    return formatter(value, currentDataset);
  };
};
var formatDataLabel = function formatDataLabel(formatter) {
  return function (val, context) {
    return formatter(val, context.dataset, context);
  };
};
var formatTooltipLabel = function formatTooltipLabel(categoryFormatter, valueFormatter) {
  var valueAccessor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'yLabel';
  return function (tooltipItem, data) {
    var currentDataset = data.datasets[tooltipItem.datasetIndex];
    var label = categoryFormatter(currentDataset.label, currentDataset, tooltipItem) || '';

    if (label) {
      label += ': ';
    }

    label += valueFormatter(tooltipItem[valueAccessor], currentDataset, tooltipItem);
    return label;
  };
};

var LineChartPlaceholder = function LineChartPlaceholder(props) {
  return /*#__PURE__*/React.createElement(ContentLoader, _extends({
    viewBox: "0 0 165 145",
    preserveAspectRatio: "xMidYMid meet",
    width: "100%",
    height: "100%",
    speed: 2,
    backgroundColor: ThemingParameters.sapContent_ImagePlaceholderBackground,
    foregroundColor: ThemingParameters.sapContent_ImagePlaceholderForegroundColor,
    backgroundOpacity: ThemingParameters.sapContent_DisabledOpacity
  }, props), /*#__PURE__*/React.createElement("rect", {
    x: "10",
    y: "135",
    width: "135",
    height: "1"
  }), /*#__PURE__*/React.createElement("path", {
    d: "M20 135 L40 80 L60 70 L80 30 L100 50 L120 65 L 135 100 L120 67 L100 52 L80 32 L60 72 L40 82 L20 137 Z",
    fill: "none",
    strokeWidth: "2"
  }));
};

var LineChartComponent = forwardRef(function (props, ref) {
  var _ref = props,
      labels = _ref.labels,
      datasets = _ref.datasets,
      colors = _ref.colors,
      options = _ref.options,
      valueAxisFormatter = _ref.valueAxisFormatter,
      categoryAxisFormatter = _ref.categoryAxisFormatter,
      getElementAtEvent = _ref.getElementAtEvent,
      getDatasetAtEvent = _ref.getDatasetAtEvent,
      width = _ref.width,
      height = _ref.height,
      noLegend = _ref.noLegend,
      legendRef = _ref.legendRef;
  useEffect(function () {
    deprecationNotice('LineChart', "This component is deprecated and will be removed with v0.10.0. Please use '@ui5/webcomponents-react-charts/lib/next/LineChart' instead.");
  }, []);
  var lineChartDefaultConfig = useMemo(function () {
    return {
      scales: {
        yAxes: [_objectSpread(_objectSpread({}, DEFAULT_OPTIONS.scales.yAxes[0]), {}, {
          display: true,
          ticks: _objectSpread(_objectSpread({}, DEFAULT_OPTIONS.scales.yAxes[0].ticks), {}, {
            callback: formatAxisCallback(valueAxisFormatter)
          })
        })],
        xAxes: [_objectSpread(_objectSpread({}, DEFAULT_OPTIONS.scales.xAxes[0]), {}, {
          ticks: {
            callback: formatAxisCallback(categoryAxisFormatter)
          }
        })]
      },
      tooltips: {
        callbacks: {
          label: formatTooltipLabel(categoryAxisFormatter, valueAxisFormatter)
        }
      },
      plugins: {
        datalabels: {
          formatter: formatDataLabel(valueAxisFormatter)
        }
      }
    };
  }, [categoryAxisFormatter, valueAxisFormatter]);
  var chartOptions = useMergedConfig(lineChartDefaultConfig, options);
  var theme = getTheme();
  var data = useChartData(labels, datasets, colors, theme);
  var chartRef = useConsolidatedRef(ref);
  var handleLegendItemPress = useLegendItemClickHandler(chartRef, legendRef);
  useLegend(chartRef, legendRef, noLegend, handleLegendItemPress);
  return /*#__PURE__*/React.createElement(Line, {
    ref: chartRef,
    data: data,
    options: chartOptions,
    getDatasetAtEvent: getDatasetAtEvent,
    getElementAtEvent: getElementAtEvent
  });
}); // @ts-ignore

LineChartComponent.LoadingPlaceholder = LineChartPlaceholder;
/**
 * <code>import { LineChart } from '@ui5/webcomponents-react-charts/lib/LineChart';</code>
 * <br />
 * <b>This component is deprecated and will be removed with v0.10.0. Please use [this component](https://sap.github.io/ui5-webcomponents-react/?path=/docs/charts-linechart) instead.</b>
 */

var LineChart = withChartContainer(LineChartComponent);
LineChart.defaultProps = _objectSpread({}, ChartBaseDefaultProps);
LineChart.displayName = 'LineChart';

export { LineChart };
//# sourceMappingURL=LineChart.js.map
