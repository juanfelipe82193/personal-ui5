import _extends from '@babel/runtime/helpers/extends';
import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import React, { forwardRef, useMemo, useCallback, isValidElement, cloneElement } from 'react';
import { useConsolidatedRef } from '@ui5/webcomponents-react-base/lib/useConsolidatedRef';
import { enrichEventWithDetails } from '@ui5/webcomponents-react-base/lib/Utils';
import { ChartContainer } from '@ui5/webcomponents-react-charts/lib/next/ChartContainer';
import { PieChartPlaceholder } from '@ui5/webcomponents-react-charts/lib/PieChartPlaceholder';
import { useLegendItemClick } from '@ui5/webcomponents-react-charts/lib/useLegendItemClick';
import { Text, PieChart as PieChart$1, Pie, Label, Cell, Tooltip, Legend } from 'recharts';
import { getValueByDataKey } from 'recharts/lib/util/ChartUtils';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';

var defaultFormatter = function defaultFormatter(d) {
  return d;
};

var tooltipContentStyle = {
  backgroundColor: ThemingParameters.sapBackgroundColor
};
var tooltipFillOpacity = {
  fillOpacity: 0.3
};

/**
 * <code>import { PieChart } from '@ui5/webcomponents-react-charts/lib/next/PieChart';</code>
 */
var PieChart = forwardRef(function (props, ref) {
  var loading = props.loading,
      dataset = props.dataset,
      _props$noLegend = props.noLegend,
      noLegend = _props$noLegend === void 0 ? false : _props$noLegend,
      _props$noAnimation = props.noAnimation,
      noAnimation = _props$noAnimation === void 0 ? false : _props$noAnimation,
      onDataPointClick = props.onDataPointClick,
      onLegendClick = props.onLegendClick,
      centerLabel = props.centerLabel,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot;
  var chartConfig = useMemo(function () {
    var _props$chartConfig$ma, _props$chartConfig;

    return _objectSpread({
      margin: _objectSpread({
        right: 30,
        left: 30,
        bottom: 30,
        top: 30
      }, (_props$chartConfig$ma = (_props$chartConfig = props.chartConfig) === null || _props$chartConfig === void 0 ? void 0 : _props$chartConfig.margin) !== null && _props$chartConfig$ma !== void 0 ? _props$chartConfig$ma : {}),
      legendPosition: 'bottom',
      legendHorizontalAlign: 'center',
      paddingAngle: 0,
      outerRadius: '80%',
      resizeDebounce: 250
    }, props.chartConfig);
  }, [props.chartConfig]);
  var dimension = useMemo(function () {
    return _objectSpread({
      formatter: defaultFormatter
    }, props.dimension);
  }, [props.dimension]);
  var measure = useMemo(function () {
    return _objectSpread({
      formatter: defaultFormatter
    }, props.measure);
  }, [props.measure]);
  var dataLabel = useCallback(function (props) {
    if (measure.hideDataLabel) return null;

    if (isValidElement(measure.DataLabel)) {
      return cloneElement(measure.DataLabel, _objectSpread(_objectSpread({}, props), {}, {
        config: measure
      }));
    }

    return /*#__PURE__*/React.createElement(Text, _extends({}, props, {
      alignmentBaseline: "middle",
      className: "recharts-pie-label-text"
    }), measure.formatter(props.value));
  }, [measure]);
  var tooltipValueFormatter = useCallback(function (value) {
    return measure.formatter(value);
  }, [measure.formatter]);
  var chartRef = useConsolidatedRef(ref);
  var onItemLegendClick = useLegendItemClick(onLegendClick, function () {
    return measure.accessor;
  });
  var onDataPointClickInternal = useCallback(function (payload, dataIndex, event) {
    if (payload && payload && typeof onDataPointClick === 'function') {
      var _payload$tooltipPaylo, _payload$tooltipPaylo2;

      onDataPointClick(enrichEventWithDetails(event, {
        value: payload.value,
        dataKey: (_payload$tooltipPaylo = payload.tooltipPayload) === null || _payload$tooltipPaylo === void 0 ? void 0 : (_payload$tooltipPaylo2 = _payload$tooltipPaylo[0]) === null || _payload$tooltipPaylo2 === void 0 ? void 0 : _payload$tooltipPaylo2.dataKey,
        name: payload.name,
        payload: payload.payload,
        dataIndex: dataIndex
      }));
    }
  }, [onDataPointClick]);
  return /*#__PURE__*/React.createElement(ChartContainer, {
    dataset: dataset,
    ref: chartRef,
    loading: loading,
    Placeholder: PieChartPlaceholder,
    style: style,
    className: className,
    tooltip: tooltip,
    slot: slot,
    resizeDebounce: chartConfig.resizeDebounce
  }, /*#__PURE__*/React.createElement(PieChart$1, {
    margin: chartConfig.margin,
    className: typeof onDataPointClick === 'function' ? 'has-click-handler' : undefined
  }, /*#__PURE__*/React.createElement(Pie, {
    onClick: onDataPointClickInternal,
    innerRadius: chartConfig.innerRadius,
    outerRadius: chartConfig.outerRadius,
    paddingAngle: chartConfig.paddingAngle,
    nameKey: dimension.accessor,
    dataKey: measure.accessor,
    data: dataset,
    animationBegin: 0,
    isAnimationActive: noAnimation === false,
    labelLine: measure.hideDataLabel !== true,
    label: dataLabel
  }, centerLabel && /*#__PURE__*/React.createElement(Label, {
    position: 'center'
  }, centerLabel), dataset && dataset.map(function (data, index) {
    var _measure$colors$index, _measure$colors;

    return /*#__PURE__*/React.createElement(Cell, {
      key: index,
      name: dimension.formatter(getValueByDataKey(data, dimension.accessor, '')),
      fill: (_measure$colors$index = (_measure$colors = measure.colors) === null || _measure$colors === void 0 ? void 0 : _measure$colors[index]) !== null && _measure$colors$index !== void 0 ? _measure$colors$index : "var(--sapChart_OrderedColor_".concat(index % 11 + 1, ")")
    });
  })), /*#__PURE__*/React.createElement(Tooltip, {
    cursor: tooltipFillOpacity,
    formatter: tooltipValueFormatter,
    contentStyle: tooltipContentStyle
  }), !noLegend && /*#__PURE__*/React.createElement(Legend, {
    verticalAlign: chartConfig.legendPosition,
    align: chartConfig.legendHorizontalAlign,
    onClick: onItemLegendClick
  })));
});
PieChart.displayName = 'PieChart';

/**
 * <code>import { DonutChart } from '@ui5/webcomponents-react-charts/lib/next/DonutChart';</code>
 */

var DonutChart = forwardRef(function (props, ref) {
  var chartConfig = useMemo(function () {
    return _objectSpread({
      legendPosition: 'bottom',
      paddingAngle: 0,
      innerRadius: '50%'
    }, props.chartConfig);
  }, [props.chartConfig]);
  return /*#__PURE__*/React.createElement(PieChart, _extends({}, props, {
    ref: ref,
    chartConfig: chartConfig
  }));
});
DonutChart.displayName = 'DonutChart';

export { DonutChart };
//# sourceMappingURL=DonutChart.js.map
