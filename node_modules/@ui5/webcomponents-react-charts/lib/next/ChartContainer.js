import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { createComponentStyles } from '@ui5/webcomponents-react-base/lib/createComponentStyles';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';
import { Loader } from '@ui5/webcomponents-react/lib/Loader';
import React, { forwardRef, useMemo } from 'react';
import { ResponsiveContainer } from 'recharts';

var loaderStyles = {
  position: 'absolute',
  top: 0,
  left: 0,
  right: 0
};
var chartContainerStyles = {
  '@global': {
    '.has-click-handler': {
      '& .recharts-pie-sector, .recharts-bar-rectangles, .recharts-active-dot, .recharts-area-dot': {
        cursor: 'pointer'
      }
    }
  }
};
var useStyles = createComponentStyles(chartContainerStyles, {
  name: 'ChartContainer'
});
var ChartContainer = forwardRef(function (props, ref) {
  var Placeholder = props.Placeholder,
      _props$loading = props.loading,
      loading = _props$loading === void 0 ? false : _props$loading,
      dataset = props.dataset,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot,
      children = props.children,
      resizeDebounce = props.resizeDebounce;
  useStyles();
  var internalStyles = useMemo(function () {
    return _objectSpread({
      fontSize: ThemingParameters.sapFontSmallSize,
      color: ThemingParameters.sapTextColor,
      fontFamily: ThemingParameters.sapFontFamily,
      width: '100%',
      height: '400px',
      position: 'relative'
    }, style !== null && style !== void 0 ? style : {});
  }, [style]);
  return /*#__PURE__*/React.createElement("div", {
    ref: ref,
    style: internalStyles,
    className: className,
    title: tooltip,
    slot: slot
  }, (dataset === null || dataset === void 0 ? void 0 : dataset.length) > 0 ? /*#__PURE__*/React.createElement(React.Fragment, null, loading && dataset.length > 0 && /*#__PURE__*/React.createElement(Loader, {
    style: loaderStyles
  }), dataset.length > 0 && /*#__PURE__*/React.createElement(ResponsiveContainer, {
    debounce: resizeDebounce
  }, children)) : /*#__PURE__*/React.createElement(Placeholder, null));
});
ChartContainer.displayName = 'ChartContainer';

export { ChartContainer };
//# sourceMappingURL=ChartContainer.js.map
