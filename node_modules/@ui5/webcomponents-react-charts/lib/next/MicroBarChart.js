import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { enrichEventWithDetails } from '@ui5/webcomponents-react-base/lib/Utils';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';
import { useConsolidatedRef } from '@ui5/webcomponents-react-base/lib/useConsolidatedRef';
import { ChartContainer } from '@ui5/webcomponents-react-charts/lib/next/ChartContainer';
import React, { forwardRef, useMemo, useCallback } from 'react';
import { BarChart, XAxis, YAxis, Bar, Cell, Tooltip } from 'recharts';
import ContentLoader from 'react-content-loader';

var defaultFormatter = function defaultFormatter(d) {
  return d;
};

var BarChartPlaceholder = function BarChartPlaceholder() {
  return /*#__PURE__*/React.createElement(ContentLoader, {
    viewBox: "0 0 165 145",
    preserveAspectRatio: "xMidYMid meet",
    width: "100%",
    height: "100%",
    speed: 2,
    backgroundColor: ThemingParameters.sapContent_ImagePlaceholderBackground,
    foregroundColor: ThemingParameters.sapContent_ImagePlaceholderForegroundColor,
    backgroundOpacity: ThemingParameters.sapContent_DisabledOpacity
  }, /*#__PURE__*/React.createElement("rect", {
    x: "20",
    y: "10",
    width: "1",
    height: "135"
  }), /*#__PURE__*/React.createElement("rect", {
    x: "20",
    y: "20",
    width: "85",
    height: "15"
  }), /*#__PURE__*/React.createElement("rect", {
    x: "20",
    y: "40",
    width: "117",
    height: "15"
  }), /*#__PURE__*/React.createElement("rect", {
    x: "20",
    y: "60",
    width: "67",
    height: "15"
  }), /*#__PURE__*/React.createElement("rect", {
    x: "20",
    y: "80",
    width: "75",
    height: "15"
  }), /*#__PURE__*/React.createElement("rect", {
    x: "20",
    y: "100",
    width: "125",
    height: "15"
  }), /*#__PURE__*/React.createElement("rect", {
    x: "20",
    y: "120",
    width: "60",
    height: "15"
  }));
};

var tooltipContentStyle = {
  backgroundColor: ThemingParameters.sapBackgroundColor
};
var tooltipFillOpacity = {
  fillOpacity: 0.3
};

var TiltedAxisTick = function TiltedAxisTick(props) {
  var x = props.x,
      y = props.y,
      payload = props.payload;
  return /*#__PURE__*/React.createElement("g", {
    transform: "translate(".concat(x, ",").concat(y, ")")
  }, /*#__PURE__*/React.createElement("text", {
    x: 7,
    y: -10,
    textAnchor: "begin",
    fill: ThemingParameters.sapContent_LabelColor
  }, payload.value));
};

var microBarChartLabel = {
  position: 'insideBottomRight',
  fill: ThemingParameters.sapContent_LabelColor
};
var microBarChartMargin = {
  left: -30,
  right: 30,
  top: 40,
  bottom: 30
};
/**
 * <code>import { MicroBarChart } from '@ui5/webcomponents-react-charts/lib/next/MicroBarChart';</code>
 */

var MicroBarChart = forwardRef(function (props, ref) {
  var _measure$width;

  var loading = props.loading,
      dataset = props.dataset,
      onDataPointClick = props.onDataPointClick,
      style = props.style,
      className = props.className,
      tooltip = props.tooltip,
      slot = props.slot;
  var chartRef = useConsolidatedRef(ref);
  var dimension = useMemo(function () {
    return _objectSpread({
      formatter: defaultFormatter
    }, props.dimension);
  }, [props.dimension]);
  var measure = useMemo(function () {
    return _objectSpread({
      formatter: defaultFormatter
    }, props.measure);
  }, [props.measure]);
  var tooltipValueFormatter = useCallback(function (value) {
    return measure.formatter(value);
  }, [measure.formatter]);
  var onDataPointClickInternal = useCallback(function (e, i) {
    if (e && onDataPointClick) {
      onDataPointClick(enrichEventWithDetails(e, {
        dataKey: Object.keys(e).filter(function (key) {
          return e.value.length ? e[key] === e.value[1] - e.value[0] : e[key] === e.value && key !== 'value';
        })[0],
        value: e.value.length ? e.value[1] - e.value[0] : e.value,
        payload: e.payload,
        dataIndex: i
      }));
    }
  }, [onDataPointClick]);

  var CustomizedLabel = function CustomizedLabel(properties) {
    var x = properties.x,
        y = properties.y,
        value = properties.value;
    var xText = chartRef.current.clientWidth - 60;
    return /*#__PURE__*/React.createElement("g", {
      transform: "translate(".concat(x, ",").concat(y, ")")
    }, /*#__PURE__*/React.createElement("text", {
      y: -7,
      dx: "".concat(xText, "px"),
      textAnchor: 'end',
      fill: ThemingParameters.sapContent_LabelColor
    }, measure.formatter(value)));
  };

  return /*#__PURE__*/React.createElement(ChartContainer, {
    dataset: dataset,
    loading: loading,
    Placeholder: BarChartPlaceholder,
    ref: chartRef,
    style: style,
    className: className,
    tooltip: tooltip,
    slot: slot,
    resizeDebounce: 250
  }, /*#__PURE__*/React.createElement(BarChart, {
    margin: microBarChartMargin,
    layout: "vertical",
    data: dataset,
    label: microBarChartLabel
  }, /*#__PURE__*/React.createElement(XAxis, {
    hide: true,
    type: "number"
  }), /*#__PURE__*/React.createElement(YAxis, {
    axisLine: false,
    tick: /*#__PURE__*/React.createElement(TiltedAxisTick, null),
    tickLine: false,
    type: "category",
    dataKey: dimension.accessor
  }), /*#__PURE__*/React.createElement(Bar, {
    background: {
      fill: ThemingParameters.sapNeutralBackground
    },
    strokeOpacity: measure.opacity,
    fillOpacity: measure.opacity,
    label: {
      content: /*#__PURE__*/React.createElement(CustomizedLabel, {
        external: style.width
      })
    },
    dataKey: measure.accessor,
    barSize: (_measure$width = measure.width) !== null && _measure$width !== void 0 ? _measure$width : 5,
    onClick: onDataPointClickInternal
  }, dataset && dataset.map(function (data, index) {
    var _measure$colors$index, _measure$colors;

    return /*#__PURE__*/React.createElement(Cell, {
      key: index,
      name: dimension.formatter(data[dimension.accessor]),
      fill: (_measure$colors$index = (_measure$colors = measure.colors) === null || _measure$colors === void 0 ? void 0 : _measure$colors[index]) !== null && _measure$colors$index !== void 0 ? _measure$colors$index : "var(--sapChart_OrderedColor_".concat(index % 11 + 1, ")")
    });
  })), /*#__PURE__*/React.createElement(Tooltip, {
    cursor: tooltipFillOpacity,
    formatter: tooltipValueFormatter,
    contentStyle: tooltipContentStyle
  })));
});
MicroBarChart.displayName = 'MicroBarChart';

export { MicroBarChart };
//# sourceMappingURL=MicroBarChart.js.map
