import _objectSpread from '@babel/runtime/helpers/objectSpread2';
import { StyleClassHelper } from '@ui5/webcomponents-react-base/lib/StyleClassHelper';
import { deprecationNotice } from '@ui5/webcomponents-react-base/lib/Utils';
import { Title } from '@ui5/webcomponents-react/lib/Title';
import React, { useMemo, useCallback, useEffect, forwardRef } from 'react';
import { createUseStyles } from 'react-jss';
import merge from 'lodash.merge';
import { useConsolidatedRef } from '@ui5/webcomponents-react-base/lib/useConsolidatedRef';
import { withChartContainer } from '@ui5/webcomponents-react-charts/lib/withChartContainer';
import { Pie } from 'react-chartjs-2';
import { getTheme } from '@ui5/webcomponents-base/dist/config/Theme';
import '@ui5/webcomponents/dist/Label';
import _extends from '@babel/runtime/helpers/extends';
import { ThemingParameters } from '@ui5/webcomponents-react-base/lib/ThemingParameters';
import ContentLoader from 'react-content-loader';

var ChartBaseDefaultProps = {
  labels: [],
  datasets: [],
  colors: [],
  height: 300,
  minHeight: 300,
  minWidth: 300,
  width: 300,
  options: {},
  categoryAxisFormatter: function categoryAxisFormatter(d) {
    return d;
  },
  valueAxisFormatter: function valueAxisFormatter(d) {
    return d;
  },
  getDatasetAtEvent: function getDatasetAtEvent(d, e) {// do nothing
  },
  getElementAtEvent: function getElementAtEvent(d, e) {// do nothing
  }
};

var useMergedConfig = function useMergedConfig(x, y) {
  return useMemo(function () {
    return merge(x, y);
  }, [x, y]);
}; // this needs to be a function as we need the `this` of the chart;
var formatDataLabel = function formatDataLabel(formatter) {
  return function (val, context) {
    return formatter(val, context.dataset, context);
  };
};
var formatTooltipLabelForPieCharts = function formatTooltipLabelForPieCharts(categoryFormatter, valueFormatter) {
  return function (tooltipItem, data) {
    var currentDataset = data.datasets[tooltipItem.datasetIndex];
    var label = categoryFormatter(data.labels[tooltipItem.index], currentDataset, tooltipItem) || '';

    if (label) {
      label += ': ';
    }

    label += valueFormatter(data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index], currentDataset, tooltipItem);
    return label;
  };
};

/* eslint-disable no-underscore-dangle */
var useLegend = function useLegend(chartRef, legendRef, noLegend, handleLegendItemPress) {
  useEffect(function () {
    if (chartRef && legendRef) {
      if (noLegend) {
        legendRef.current.innerHTML = '';
      } else {
        legendRef.current.innerHTML = chartRef.current.chartInstance.generateLegend();
        legendRef.current.querySelectorAll('li').forEach(function (legendItem) {
          legendItem.addEventListener('click', handleLegendItemPress);
        });
      }
    }
  }, [chartRef.current, legendRef.current, noLegend, handleLegendItemPress]);
};
var usePieLegendItemClickHandler = function usePieLegendItemClickHandler(chartRef, legendRef) {
  return useCallback(function (e) {
    var clickTarget = e.currentTarget;
    var datasetIndex = parseInt(clickTarget.dataset.datasetindex);
    var chartInstance = chartRef.current.chartInstance;
    var meta = chartInstance.getDatasetMeta(0).data[datasetIndex];
    meta.hidden = !meta.hidden;
    chartInstance.update();
    clickTarget.style.textDecoration = meta.hidden ? 'line-through' : 'unset';
  }, [legendRef.current, chartRef.current]);
};

var getCssVariableValue = function getCssVariableValue(cssVariable) {
  var fallback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var propertyValue = getComputedStyle(document.documentElement).getPropertyValue(cssVariable);
  return propertyValue || fallback;
};

var sequentialColors = {
  sapUiChartAccent1: '#5899DA',
  sapUiChartAccent2: '#E8743B',
  sapUiChartAccent3: '#19A979',
  sapUiChartAccent4: '#ED4A7B',
  sapUiChartAccent5: '#945ECF',
  sapUiChartAccent6: '#13A4B4',
  sapUiChartAccent7: '#525DF4',
  sapUiChartAccent8: '#BF399E',
  sapUiChartAccent9: '#6C8893',
  sapUiChartAccent10: '#EE6868',
  sapUiChartAccent11: '#2F6497',
  sapUiChartAccent12: '#1866b4'
};
var semanticColors = {
  sapUiChartGood: '#3fa45b',
  sapUiChartBad: '#dc0d0e',
  sapUiChartHighlight: '#de890d'
};

var sapBelize = /*#__PURE__*/Object.freeze({
  __proto__: null,
  sequentialColors: sequentialColors,
  semanticColors: semanticColors
});

var sequentialColors$1 = {
  sapUiChartAccent1: '#5899DA',
  sapUiChartAccent2: '#E8743B',
  sapUiChartAccent3: '#19A979',
  sapUiChartAccent4: '#ED4A7B',
  sapUiChartAccent5: '#945ECF',
  sapUiChartAccent6: '#13A4B4',
  sapUiChartAccent7: '#525DF4',
  sapUiChartAccent8: '#BF399E',
  sapUiChartAccent9: '#6C8893',
  sapUiChartAccent10: '#EE6868',
  sapUiChartAccent11: '#2F6497',
  sapUiChartAccent12: '#1866b4'
};
var semanticColors$1 = {
  sapUiChartGood: '#69c683',
  sapUiChartBad: '#f55556',
  sapUiChartHighlight: '#f4ac44'
};

var sapBelizePlus = /*#__PURE__*/Object.freeze({
  __proto__: null,
  sequentialColors: sequentialColors$1,
  semanticColors: semanticColors$1
});

var sequentialColors$2 = {
  sapUiChartAccent1: '#0f828f',
  sapUiChartAccent2: '#5ac2ce',
  sapUiChartAccent3: '#03734d',
  sapUiChartAccent4: '#66c2a3',
  sapUiChartAccent5: '#3c6372',
  sapUiChartAccent6: '#adbcc3',
  sapUiChartAccent7: '#144b7f',
  sapUiChartAccent8: '#698caf',
  sapUiChartAccent9: '#d62f2f',
  sapUiChartAccent10: '#f8a6a6',
  sapUiChartAccent11: '#921473',
  sapUiChartAccent12: '#d876c0'
};
var semanticColors$2 = {
  sapUiChartGood: '#3fa45b',
  sapUiChartBad: '#dc0d0e',
  sapUiChartHighlight: '#f0ab00'
};

var sapFiori3 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  sequentialColors: sequentialColors$2,
  semanticColors: semanticColors$2
});

var sequentialColors$3 = {
  sapUiChartAccent1: '#13a4b4',
  sapUiChartAccent2: '#81d1da',
  sapUiChartAccent3: '#19a979',
  sapUiChartAccent4: '#8fd1bb',
  sapUiChartAccent5: '#6c8893',
  sapUiChartAccent6: '#d1d9dc',
  sapUiChartAccent7: '#2f6497',
  sapUiChartAccent8: '#85a1bb',
  sapUiChartAccent9: '#ee6868',
  sapUiChartAccent10: '#fccaca',
  sapUiChartAccent11: '#bf399e',
  sapUiChartAccent12: '#e597d2'
};
var semanticColors$3 = {
  sapUiChartGood: '#3fa45b',
  sapUiChartBad: '#dc0d0e',
  sapUiChartHighlight: '#f0ab00'
};

var sapFiori3Dark = /*#__PURE__*/Object.freeze({
  __proto__: null,
  sequentialColors: sequentialColors$3,
  semanticColors: semanticColors$3
});

var sequentialColors$4 = {
  sapUiChartAccent1: '#4DA2F6',
  sapUiChartAccent2: '#E8743B',
  sapUiChartAccent3: '#19A979',
  sapUiChartAccent4: '#ED4A7B',
  sapUiChartAccent5: '#945ECF',
  sapUiChartAccent6: '#13A4B4',
  sapUiChartAccent7: '#5C66F5',
  sapUiChartAccent8: '#C63FA4',
  sapUiChartAccent9: '#6C8893',
  sapUiChartAccent10: '#EE6868',
  sapUiChartAccent11: '#387BB7',
  sapUiChartAccent12: '#097be8'
};
var semanticColors$4 = {
  sapUiChartGood: '#9c9',
  sapUiChartBad: '#ff5e5e',
  sapUiChartHighlight: '#ffab1d'
};

var sapBelizeHCB = /*#__PURE__*/Object.freeze({
  __proto__: null,
  sequentialColors: sequentialColors$4,
  semanticColors: semanticColors$4
});

var sequentialColors$5 = {
  sapUiChartAccent1: '#286AC3',
  sapUiChartAccent2: '#D74114',
  sapUiChartAccent3: '#057D47',
  sapUiChartAccent4: '#E11E48',
  sapUiChartAccent5: '#642EB2',
  sapUiChartAccent6: '#03778C',
  sapUiChartAccent7: '#232DEB',
  sapUiChartAccent8: '#9B136F',
  sapUiChartAccent9: '#395563',
  sapUiChartAccent10: '#E02E2E',
  sapUiChartAccent11: '#0D3367',
  sapUiChartAccent12: '#0e4186'
};
var semanticColors$5 = {
  sapUiChartGood: '#006362',
  sapUiChartBad: '#ab0000',
  sapUiChartHighlight: '#5c5c00'
};

var sapBelizeHCW = /*#__PURE__*/Object.freeze({
  __proto__: null,
  sequentialColors: sequentialColors$5,
  semanticColors: semanticColors$5
});

var themeMap = new Map();
themeMap.set('sap_belize', sapBelize);
themeMap.set('sap_belize_plus', sapBelizePlus);
themeMap.set('sap_fiori_3', sapFiori3);
themeMap.set('sap_fiori_3_dark', sapFiori3Dark);
themeMap.set('sap_belize_hcw', sapBelizeHCW);
themeMap.set('sap_belize_hcb', sapBelizeHCB);
var getOrLoadTheme = function getOrLoadTheme(theme) {
  if (themeMap.has(theme)) {
    return themeMap.get(theme);
  } else {
    console.warn("".concat(theme, "-theme not found. Falling back to default theme 'sap_fiori_3'."));
    return themeMap.get('sap_fiori_3');
  }
};

var populateData = function populateData(labels, datasets, colors, theme) {
  var isPie = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  var colorPalette = resolveColors(colors, theme);
  return {
    labels: labels,
    datasets: datasets.map(function (item, index) {
      return _objectSpread({
        backgroundColor: isPie ? colorPalette : colorPalette[index % colorPalette.length],
        borderColor: isPie ? colorPalette : colorPalette[index % colorPalette.length]
      }, item);
    })
  };
};
var resolveColors = function resolveColors(colors, theme) {
  var _getOrLoadTheme = getOrLoadTheme(theme),
      semanticColors = _getOrLoadTheme.semanticColors,
      sequentialColors = _getOrLoadTheme.sequentialColors;

  if (colors && colors.length > 0) {
    return colors.map(function (key) {
      return semanticColors[key] || sequentialColors[key] || key;
    });
  }

  return Object.values(sequentialColors);
};
var useChartData = function useChartData(labels, datasets, colors, theme) {
  var isPie = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;
  return useMemo(function () {
    return populateData(labels, datasets, colors, theme, isPie);
  }, [labels, datasets, colors, theme, isPie]);
};

var PieChartPlaceholder = function PieChartPlaceholder(props) {
  return /*#__PURE__*/React.createElement(ContentLoader, _extends({
    viewBox: "0 0 165 145",
    preserveAspectRatio: "xMidYMid meet",
    width: "100%",
    height: "100%",
    speed: 2,
    backgroundColor: ThemingParameters.sapContent_ImagePlaceholderBackground,
    foregroundColor: ThemingParameters.sapContent_ImagePlaceholderForegroundColor,
    backgroundOpacity: ThemingParameters.sapContent_DisabledOpacity
  }, props), /*#__PURE__*/React.createElement("circle", {
    cy: "75",
    cx: "85",
    r: "60"
  }));
};

var DonutChartComponent = forwardRef(function (props, ref) {
  var _ref = props,
      labels = _ref.labels,
      datasets = _ref.datasets,
      colors = _ref.colors,
      categoryAxisFormatter = _ref.categoryAxisFormatter,
      getDatasetAtEvent = _ref.getDatasetAtEvent,
      getElementAtEvent = _ref.getElementAtEvent,
      valueAxisFormatter = _ref.valueAxisFormatter,
      options = _ref.options,
      width = _ref.width,
      height = _ref.height,
      noLegend = _ref.noLegend,
      legendRef = _ref.legendRef;
  useEffect(function () {
    deprecationNotice('DonutChart', "This component is deprecated and will be removed with v0.10.0. Please use '@ui5/webcomponents-react-charts/lib/next/DonutChart' instead.");
  }, []);
  var theme = getTheme();
  var data = useChartData(labels, datasets, colors, theme, true);
  var donutChartDefaultConfig = useMemo(function () {
    return {
      cutoutPercentage: 70,
      tooltips: {
        callbacks: {
          label: formatTooltipLabelForPieCharts(categoryAxisFormatter, valueAxisFormatter)
        }
      },
      plugins: {
        datalabels: {
          anchor: 'end',
          align: 'end',
          color: getCssVariableValue('--sapTextColor', '#32363a'),
          formatter: formatDataLabel(valueAxisFormatter)
        }
      }
    };
  }, [categoryAxisFormatter, valueAxisFormatter]);
  var mergedOptions = useMergedConfig(donutChartDefaultConfig, options);
  var chartRef = useConsolidatedRef(ref);
  var handleLegendItemPress = usePieLegendItemClickHandler(chartRef, legendRef);
  useLegend(chartRef, legendRef, noLegend, handleLegendItemPress);
  return /*#__PURE__*/React.createElement(Pie, {
    ref: chartRef,
    data: data,
    height: height,
    width: width,
    options: mergedOptions,
    getDatasetAtEvent: getDatasetAtEvent,
    getElementAtEvent: getElementAtEvent
  });
}); // @ts-ignore

DonutChartComponent.LoadingPlaceholder = PieChartPlaceholder;
/**
 * <code>import { DonutChart } from '@ui5/webcomponents-react-charts/lib/DonutChart';</code>
 * <br />
 * <b>This component is deprecated and will be removed with v0.10.0. Please use [this component](https://sap.github.io/ui5-webcomponents-react/?path=/docs/charts-donutchart) instead.</b>
 */

var DonutChart = withChartContainer(DonutChartComponent);
DonutChart.defaultProps = _objectSpread(_objectSpread({}, ChartBaseDefaultProps), {}, {
  colors: null
});
DonutChart.displayName = 'DonutChart';

var styles = {
  radialChart: {
    position: 'relative'
  },
  content: {
    position: 'absolute',
    top: '0',
    left: '0',
    right: '0',
    bottom: '0',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center',
    pointerEvents: 'none',
    fontSize: '2rem'
  }
};
var useStyles = createUseStyles(styles, {
  name: 'RadialChart'
});
/**
 * <code>import { RadialChart } from '@ui5/webcomponents-react-charts/lib/RadialChart';</code>
 * <br />
 * <b>This component is deprecated and will be removed with v0.10.0. Please use [this component](https://sap.github.io/ui5-webcomponents-react/?path=/docs/charts-radialchart) instead.</b>
 */

var RadialChart = forwardRef(function (props, ref) {
  var maxValue = props.maxValue,
      value = props.value,
      displayValue = props.displayValue,
      style = props.style,
      className = props.className,
      colors = props.colors,
      options = props.options,
      width = props.width,
      height = props.height;
  useEffect(function () {
    deprecationNotice('RadialChart', "This component is deprecated and will be removed with v0.10.0. Please use '@ui5/webcomponents-react-charts/lib/next/RadialChart' instead.");
  }, []);
  var data = [value, maxValue - value];
  var radialChartDefaultConfig = useMemo(function () {
    return {
      cutoutPercentage: 90,
      tooltips: {
        enabled: false
      },
      plugins: {
        datalabels: false
      }
    };
  }, []);
  var mergedOptions = useMergedConfig(radialChartDefaultConfig, options);
  var classes = useStyles();
  var radialChartContainerStyles = useMemo(function () {
    return _objectSpread({
      width: "".concat(width, "px"),
      height: "".concat(height, "px")
    }, style);
  }, [width, height, style]);
  var outerClasses = StyleClassHelper.of(classes.radialChart);

  if (className) {
    outerClasses.put(className);
  }

  return /*#__PURE__*/React.createElement("div", {
    className: outerClasses.toString(),
    style: radialChartContainerStyles
  }, /*#__PURE__*/React.createElement(DonutChart, {
    ref: ref,
    datasets: [{
      data: data
    }],
    colors: colors,
    options: mergedOptions,
    width: width,
    height: height,
    style: {
      paddingTop: 0
    },
    noLegend: true
  }), /*#__PURE__*/React.createElement("div", {
    className: classes.content
  }, /*#__PURE__*/React.createElement(Title, null, displayValue)));
});
RadialChart.defaultProps = _objectSpread(_objectSpread({}, ChartBaseDefaultProps), {}, {
  maxValue: 100,
  colors: ['#5899DA', '#adbcc3']
});

export { RadialChart };
//# sourceMappingURL=RadialChart.js.map
