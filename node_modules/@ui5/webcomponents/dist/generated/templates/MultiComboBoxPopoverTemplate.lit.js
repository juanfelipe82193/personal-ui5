
/* eslint no-unused-vars: 0 */
import ifDefined from '@ui5/webcomponents-base/dist/renderer/ifDefined.js';
import { html, svg, repeat, classMap, styleMap } from '@ui5/webcomponents-base/dist/renderer/LitRenderer.js';
const block0 = (context) => { return html`<ui5-responsive-popover	placement-type="Bottom"	horizontal-align="Left"	class="ui5-multi-combobox-selected-items-responsive-popover"	no-arrow	_disable-initial-focus	content-only-on-desktop	@ui5-afterClose=${ifDefined(context._afterClosePopover)}	@ui5-afterOpen=${ifDefined(context._setInitialFocusInResponsivePopover)}><div slot="header" class="ui5-responsive-popover-header"><div class="row"><span>${ifDefined(context._headerTitleText)}</span><ui5-button				icon="decline"				design="Transparent"				@click="${context._closeMorePopover}"			></ui5-button></div><div class="row"><div				slot="header"				class="input-root-phone"				value-state="${ifDefined(context.valueState)}"			><input					.value="${ifDefined(context.value)}"					inner-input					placeholder="${ifDefined(context.placeholder)}"					?required=${context.required}					value-state="${ifDefined(context.valueState)}"					@input="${context._inputLiveChange}"					@change=${context._inputChange}					aria-autocomplete="both"					aria-labelledby="${ifDefined(context._id)}-hiddenText-nMore"					aria-describedby="${ifDefined(context._id)}-valueStateDesc"				/></div><ui5-togglebutton				slot="header"				class="ui5-multi-combobox-toggle-button"				icon="multiselect-all"				design="Transparent"				pressed				@click="${context._toggleButtonPress}"			></ui5-togglebutton></div></div><ui5-list separators="None" mode="${ifDefined(context.selectedItemsListMode)}"		@ui5-selectionChange=${ifDefined(context._listSelectionChange)}>		${ repeat(context.items, (item, index) => item._id || index, (item, index) => block1(item, index, context)) }</ui5-list><div slot="footer" class="ui5-responsive-popover-footer"><ui5-button			design="Transparent"			@click="${context._closeMorePopover}"		>OK</ui5-button></div></ui5-responsive-popover><ui5-responsive-popover	placement-type="Bottom"	horizontal-align="Left"	class="ui5-multi-combobox-all-items-responsive-popover"	no-arrow	_disable-initial-focus	content-only-on-desktop	@ui5-selectionChange=${ifDefined(context._listSelectionChange)}	@ui5-afterClose=${ifDefined(context._toggleIcon)}	@ui5-afterOpen=${ifDefined(context._onAllItemsPopoverAfterOpen)}><div slot="header" class="ui5-responsive-popover-header"><div class="row"><span>${ifDefined(context._headerTitleText)}</span><ui5-button				icon="decline"				design="Transparent"				@click="${context._closeAllItemsPopover}"			></ui5-button></div><div class="row"><div					slot="header"					class="input-root-phone"					value-state="${ifDefined(context.valueState)}"				><input						.value="${ifDefined(context.value)}"						inner-input						placeholder="${ifDefined(context.placeholder)}"						?required=${context.required}						value-state="${ifDefined(context.valueState)}"						@input="${context._inputLiveChange}"						@change=${context._inputChange}						aria-autocomplete="both"						aria-labelledby="${ifDefined(context._id)}-hiddenText-nMore"						aria-describedby="${ifDefined(context._id)}-valueStateDesc"					/></div><ui5-button					slot="header"					class="ui5-multi-combobox-toggle-button"					icon="multiselect-all"					design="Transparent"					@click="${context._toggleButtonPress}"					show-selected				></ui5-button></div></div><ui5-list separators="None" mode="MultiSelect" class="ui5-multi-combobox-all-items-list">		${ repeat(context._filteredItems, (item, index) => item._id || index, (item, index) => block3(item, index, context)) }</ui5-list><div slot="footer" class="ui5-responsive-popover-footer"><ui5-button			design="Transparent"			@click="${context._closeAllItemsPopover}"		>OK</ui5-button></div></ui5-responsive-popover>`; };
const block1 = (item, index, context) => { return html`${ item.selected ? block2(item, index, context) : undefined }`; };
const block2 = (item, index, context) => { return html`<ui5-li type="Active" data-ui5-token-id="${ifDefined(item._id)}" .selected="${ifDefined(context.editable)}">${ifDefined(item.text)}</ui5-li>			`; };
const block3 = (item, index, context) => { return html`<ui5-li type="Active" ?selected=${item.selected} data-ui5-token-id="${ifDefined(item._id)}">${ifDefined(item.text)}</ui5-li>		`; };

export default block0;