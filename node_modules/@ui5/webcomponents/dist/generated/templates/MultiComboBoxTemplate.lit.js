
/* eslint no-unused-vars: 0 */
import ifDefined from '@ui5/webcomponents-base/dist/renderer/ifDefined.js';
import { html, svg, repeat, classMap, styleMap } from '@ui5/webcomponents-base/dist/renderer/LitRenderer.js';
const block0 = (context) => { return html`<div class="ui5-multi-combobox-root"	@focusin=${context.rootFocusIn}	@focusout=${context.rootFocusOut}	role="combobox"	aria-haspopup="listbox"	aria-expanded="${ifDefined(context.open)}"><span id="${ifDefined(context._id)}-hiddenText-nMore" class="ui5-hidden-text">${ifDefined(context.nMoreCountText)}</span>		${ context.hasValueState ? block1(context) : undefined }<ui5-tokenizer slot="_beginContent"		show-more		class="ui5-multi-combobox-tokenizer"		?disabled="${context.disabled}"		@ui5-showMoreItemsPress="${ifDefined(context._showMorePopover)}"		@ui5-tokenDelete="${ifDefined(context._tokenDelete)}"		@focusout="${context._tokenizerFocusOut}"		@click=${context._click}		?expanded="${context.expandedTokenizer}"	>		${ repeat(context.items, (item, index) => item._id || index, (item, index) => block2(item, index, context)) }</ui5-tokenizer><input id="ui5-multi-combobox-input"		.value="${ifDefined(context.value)}"		inner-input		placeholder="${ifDefined(context.placeholder)}"		?disabled=${context.disabled}		?readonly=${context.readonly}		?required=${context.required}		value-state="${ifDefined(context.valueState)}"		@input="${context._inputLiveChange}"		@change=${context._inputChange}		@keydown="${context._onkeydown}"		@keyup="${context._onkeyup}"		@focusin="${context._focusin}"		@focusout="${context._focusout}"		@click=${context._click}		aria-autocomplete="both"		aria-labelledby="${ifDefined(context._id)}-hiddenText-nMore"		aria-describedby="${ifDefined(context._id)}-valueStateDesc"	/>	${ !context.readonly ? block4(context) : undefined }</div>`; };
const block1 = (context) => { return html`<span id="${ifDefined(context._id)}-valueStateDesc" class="ui5-hidden-text">${ifDefined(context.valueStateText)}</span>	`; };
const block2 = (item, index, context) => { return html`${ item.selected ? block3(item, index, context) : undefined }`; };
const block3 = (item, index, context) => { return html`<ui5-token				?readonly="${context.readonly}"				class="ui5-multi-combobox-token"				data-ui5-id="${ifDefined(item._id)}"				part="token-${index}"				>					${ifDefined(item.text)}</ui5-token>			`; };
const block4 = (context) => { return html`<ui5-icon name="slim-arrow-down"			input-icon			slot="icon"			tabindex="-1"			@click=${context._showAllItemsPopover}			?pressed="${context._iconPressed}"			dir="${ifDefined(context.dir)}"		></ui5-icon>	`; };

export default block0;